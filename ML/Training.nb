(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    486789,       8560]
NotebookOptionsPosition[    480632,       8448]
NotebookOutlinePosition[    481035,       8464]
CellTagsIndexPosition[    480992,       8461]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{"path", " ", "=", " ", 
  "\"\<C:\\\\Users\\\\enego\\\\OneDrive\\\\Documents\\\\GitHub\\\\durhack22\\\
\\ML\\\\mathematics_dataset-v1.0\\\\train-easy\>\""}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allFiles", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<*.txt\>\"", ",", " ", "path"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"allData", "=", 
   RowBox[{"AssociationMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Import", "[", "#", "]"}], "<>", 
       RowBox[{"Import", "[", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"#", ",", 
          RowBox[{"\"\<train-easy\>\"", "->", "\"\<train-hard\>\""}]}], "]"}],
         "]"}], " ", "<>", 
       RowBox[{"Import", "[", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"#", ",", 
          RowBox[{"\"\<train-easy\>\"", "->", "\"\<train-medium\>\""}]}], 
         "]"}], "]"}], " ", "<>", 
       RowBox[{"Import", "[", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"#", ",", 
          RowBox[{"\"\<train-easy\>\"", "->", "\"\<interpolate\>\""}]}], 
         "]"}], "]"}]}], "&"}], ",", " ", "allFiles"}], "]"}]}], 
  ";"}], "\n"}], "Input",
 CellChangeTimes->{{3.8778676194934196`*^9, 3.877867619494424*^9}, {
  3.877867652790508*^9, 3.8778676796389017`*^9}, {3.8778677201826553`*^9, 
  3.877867737541868*^9}, {3.877867795579109*^9, 3.877867798733878*^9}, {
  3.877868010544079*^9, 3.877868092437383*^9}, {3.877868188077515*^9, 
  3.8778682321209707`*^9}, {3.8778685162850137`*^9, 3.8778685377268286`*^9}, {
  3.8778686643731728`*^9, 3.8778686801914*^9}, {3.877877266073909*^9, 
  3.8778772673527126`*^9}, {3.877877367652896*^9, 3.877877373172736*^9}, {
  3.8778778762332964`*^9, 3.8778779118933926`*^9}, {3.8778780112134557`*^9, 
  3.8778780205933304`*^9}, {3.877886874140955*^9, 3.877886889819137*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"471d7cd1-6d71-4f5e-8826-34cf5f21b09d"],

Cell[BoxData["\<\"C:\\\\Users\\\\enego\\\\OneDrive\\\\Documents\\\\GitHub\\\\\
durhack22\\\\ML\\\\mathematics_dataset-v1.0\\\\train-easy\"\>"], "Output",
 CellChangeTimes->{
  3.877868681829983*^9, 3.8778772679428587`*^9, {3.877877349372833*^9, 
   3.877877374193051*^9}, 3.8778779127333727`*^9, 3.877878021083578*^9, 
   3.8778868917746077`*^9, 3.8778871869044256`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"de51d8ef-0641-4e59-81dd-a9151a363e08"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"allData", "[", 
  RowBox[{"[", 
   RowBox[{"-", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.877877354268035*^9, 3.877877355762557*^9}, {
   3.8778779748236914`*^9, 3.877877978363596*^9}, 3.877886455756297*^9},
 CellLabel->
  "In[191]:=",ExpressionUUID->"9597b77d-1996-42c1-bc5a-354003f55ac8"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{
      "\"What is prob of sequence ccbc when four letters picked without \
replacement from nnscspb?\\n0\\nThree letters picked without replacement from \
{g: 3, w: 1, t: 7, u: 3}. Give prob of sequence tuw.\\n1/104\\nThree letters \
picked without replacement from dxaxxaaxxxaax. What is prob of sequence \
aad?\\n5/429\\nC\"", "\[Ellipsis]", 
       "\"s picked without replacement from {j: 1, h: 1, c: 1}?\\n1/6\\nTwo \
letters picked without replacement from {a: 1, h: 1, x: 1, k: 2, y: 1, w: 1}. \
What is prob of sequence xa?\\n1/42\\nCalculate prob of sequence rbjr when \
four letters picked without replacement from {a: 4, b: 4, v: 2, r: 2, j: \
2}.\\n2/3003\""}], Short[#, 5]& ], "line" -> 191, "sessionID" -> 
   25974417297526019872, "byteCount" -> 203115640, "size" -> 5, "stored" -> 
   False, "expr" -> Missing["NotAvailable", "NewSessionID"], "wrap" -> 
   OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.8778773561531725`*^9, 3.8778774234226885`*^9, 
  3.8778779806134524`*^9, 3.877883823368598*^9, 3.8778864625221863`*^9},
 CellLabel->
  "Out[191]=",ExpressionUUID->"2a013638-9da6-48bc-9ef0-0e9f1bbaba6b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"allData", " ", "=", " ", 
   RowBox[{"KeyMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringDelete", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringSplit", "[", 
          RowBox[{"#", ",", "\"\<\\\\\>\""}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}], ",", "\"\<.txt\>\""}], "]"}], 
      "&"}], ",", " ", "allData"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.877867658395599*^9, 3.8778676604832783`*^9}, {
  3.8778683050991335`*^9, 3.877868352512296*^9}, {3.877868417089904*^9, 
  3.877868441382156*^9}, {3.8778684728626595`*^9, 3.877868485272497*^9}, {
  3.877868621808941*^9, 3.87786863637586*^9}, {3.8778688615371943`*^9, 
  3.877868909805746*^9}, {3.8778689637312818`*^9, 3.8778690226422677`*^9}, {
  3.877886506620181*^9, 3.877886537430065*^9}, {3.8778865767513294`*^9, 
  3.8778865777337866`*^9}, {3.8778866502515354`*^9, 3.8778866515315943`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"03aff200-9994-46bc-a879-99c07f969c2d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Keys", "[", "allData", "]"}], "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8778866371157103`*^9, 3.8778866447419868`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"fd3e4d5b-6ada-400c-9ab4-810089ebef7b"],

Cell[BoxData["\<\"algebra__linear_1d_composed\"\>"], "Output",
 CellChangeTimes->{{3.877886645131513*^9, 3.877886654654702*^9}, 
   3.8778873953568892`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"25be68ff-d067-40a1-9a07-a84e5444a311"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"largeQuestion", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"StringSplit", "[", 
       RowBox[{"#", ",", " ", "\"\<\\n\>\""}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", ";;", "2"}], "]"}], "]"}], "&"}], "/@", " ", 
    "allData"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8778646110126433`*^9, 3.8778646383377028`*^9}, {
   3.877867446930006*^9, 3.8778674483206344`*^9}, {3.8778693623812475`*^9, 
   3.8778694020131445`*^9}, 3.8778694978331327`*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"cace77be-6530-4cd7-98b7-4f450b7d0339"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questions", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"RandomSample", "[", 
     RowBox[{"#", ",", "500"}], "]"}], "&"}], "/@", " ", 
   "largeQuestion"}]}]], "Input",
 CellChangeTimes->{{3.877869631358019*^9, 3.8778696469613247`*^9}, {
  3.8778697417460165`*^9, 3.877869758907544*^9}, {3.87788746429902*^9, 
  3.8778874646346774`*^9}, {3.8778874972515664`*^9, 3.8778874981468635`*^9}, {
  3.877887572877018*^9, 3.8778875730159297`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"33f330fe-adce-4e6c-ab9c-1f10a70c8c9f"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], 
       "\[RightAssociation]"}], Short[#, 5]& ], "line" -> 13, "sessionID" -> 
   25975152053207288730, "byteCount" -> 2334040, "size" -> 5, "stored" -> 
   False, "expr" -> Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, 
   "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{
  3.8778697624520836`*^9, {3.8778874824567766`*^9, 3.8778875079819527`*^9}, 
   3.8778875790302057`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"940072cb-06ac-44de-b8d8-dd51ffc84b3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"naturalQuestions", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"StringRiffle", "[", 
       RowBox[{"StringSplit", "[", "#", "]"}], "]"}], "&"}], "/@", " ", 
     RowBox[{"StringReplace", "[", 
      RowBox[{"#", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<-\>\"", "->", " ", "\"\< minus \>\""}], ",", " ", 
         RowBox[{"\"\<+\>\"", "->", " ", "\"\<plus\>\""}], ",", " ", 
         RowBox[{"\"\<=\>\"", "->", " ", "\"\<equals\>\""}], ",", " ", 
         RowBox[{"\"\<**\>\"", "->", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"\"\<.\>\"", "->", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"\"\<*\>\"", "->", " ", "\"\< multiply \>\""}], ",", " ", 
         RowBox[{"\"\<(\>\"", "->", " ", "\"\<open bracket \>\""}], ",", " ", 
         RowBox[{"\"\<)\>\"", "->", " ", "\"\< close bracket \>\""}]}], " ", 
        "}"}]}], "]"}]}], "&"}], "/@", " ", "questions"}]}]], "Input",
 CellChangeTimes->{{3.8778698918198395`*^9, 3.877869900555871*^9}, {
  3.877869935239072*^9, 3.877869954233689*^9}, {3.877870266385372*^9, 
  3.877870338718854*^9}, {3.8778703713233986`*^9, 3.877870431263208*^9}, {
  3.8778704728997173`*^9, 3.877870473838518*^9}, {3.877870671227564*^9, 
  3.877870695903322*^9}, {3.877870735793762*^9, 3.8778707837546015`*^9}, {
  3.8778982172596817`*^9, 3.877898229670312*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"56f71839-db6a-4dab-ba8c-36be508ffc37"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       RowBox[{
         RowBox[{"\"algebra__linear_1d_composed\"", "\[Rule]", 
           RowBox[{"{", 
             
             RowBox[{"\"Let t be open bracket open bracket minus 8 close \
bracket /open bracket minus 56 close bracket close bracket /open bracket 2/14 \
close bracket Let a be 3/6 multiply 0 multiply t Solve 3 multiply v plus 15 \
equals minus a multiply v for v\"", ",", 
               TemplateBox[{"498"}, "OutputSizeLimit`Skeleton"], ",", 
               
               RowBox[{
                "\"Let oopen bracket a close bracket equals minus 8 multiply \
a3 minus 2 multiply a2 minus a plus 1 Let t be oopen bracket minus 1 close \
bracket Let d\"", "\[Ellipsis]", 
                 "\"bracket equals minus f2 plus 5 multiply f plus 2 Let h be \
dopen bracket 5 close bracket Solve 2 multiply z plus h multiply z plus t \
equals 0 for z\""}]}], "}"}]}], ",", 
         TemplateBox[{"54"}, "OutputSizeLimit`Skeleton"], ",", 
         TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"]}], 
       "\[RightAssociation]"}], Short[#, 5]& ], "line" -> 39, "sessionID" -> 
   25975152053207288730, "byteCount" -> 3573688, "size" -> 5, "stored" -> 
   False, "expr" -> Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, 
   "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.87787044541638*^9, 3.877870480493387*^9, 
  3.8778707177023935`*^9, 3.877870765179161*^9, 3.877870817411718*^9, 
  3.8778875164956894`*^9, 3.877887579865453*^9, 3.877898234042983*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"0619f7b2-2798-483f-8d4c-137b7e130472"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"getAsso", "[", "key_", "]"}], " ", ":=", " ", 
  RowBox[{"Normal", "[", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"naturalQuestions", "[", "key", "]"}], ",", 
     RowBox[{
      RowBox[{"key", "&"}], "/@", 
      RowBox[{"naturalQuestions", "[", "key", "]"}]}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.877871823781003*^9, 3.877871899255652*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"c66fe4c7-e040-4a49-85ab-8a653c6ca362"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plainData", " ", "=", " ", 
  RowBox[{"Association", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"getAsso", "[", "#", "]"}], "&"}], "/@", 
     RowBox[{"Keys", "[", "naturalQuestions", "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8778710768678255`*^9, 3.8778711567551875`*^9}, {
   3.8778712316314077`*^9, 3.877871250902561*^9}, {3.87787130362354*^9, 
   3.8778713162635016`*^9}, {3.877871416203635*^9, 3.8778714300019693`*^9}, {
   3.877871531107215*^9, 3.87787156998732*^9}, {3.8778716919165034`*^9, 
   3.8778717385247927`*^9}, {3.8778717760951157`*^9, 3.877871803385377*^9}, 
   3.877871836801214*^9, {3.8778719032751455`*^9, 3.877872018896224*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"261e89e9-bd9a-4027-8280-d8c38bdd0e2f"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       RowBox[{
         RowBox[{
          "\"Let t be open bracket open bracket minus 8 close bracket /open \
bracket minus 56 close bracket close bracket /open bracket 2/14 close bracket \
Let a be 3/6 multiply 0 multiply t Solve 3 multiply v plus 15 equals minus a \
multiply v for v\"", "\[Rule]", "\"algebra__linear_1d_composed\""}], ",", 
         TemplateBox[{"23971"}, "OutputSizeLimit`Skeleton"], ",", 
         RowBox[{
          "\"Two letters picked without replacement from kvbvvffwvvvwfwvbvv \
What is prob of sequence vv?\"", "\[Rule]", 
           "\"probability__swr_p_sequence\""}]}], "\[RightAssociation]"}], 
     Short[#, 5]& ], "line" -> 41, "sessionID" -> 25975152053207288730, 
   "byteCount" -> 6693872, "size" -> 5, "stored" -> False, "expr" -> 
   Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{
  3.8778714240846796`*^9, 3.87787153640524*^9, 3.8778715704560966`*^9, {
   3.8778716991133184`*^9, 3.8778717076628957`*^9}, 3.8778717390861506`*^9, {
   3.877871945697118*^9, 3.8778720253043337`*^9}, 3.8778875304479713`*^9, 
   3.8778875845821495`*^9, 3.877898237620336*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"3f54892a-c6ee-4f9c-85c1-d3b3d73d58c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bert", " ", "=", " ", 
  RowBox[{
  "NetModel", "[", 
   "\"\<DistilBERT Trained on BookCorpus and English Wikipedia Data\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.877872033825715*^9, 3.8778720359403205`*^9}, {
  3.8778720669637213`*^9, 3.8778720747660184`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"ebf28abf-d7ca-412c-aa3b-a1980815223e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"string\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "embedding" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 2}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "part1" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 2}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]]|>|>, 
                    "embeddingwords" -> <|
                    "Type" -> "Embedding", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{30522, 
                    768}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {768}, "ClassCount" -> 30522, 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083]}, "$OutputDimension" -> 
                    768|>, "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "posembed" -> <|
                    "Type" -> "SequenceIndices", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Maximum" -> 512, "$Length" -> 
                    NeuralNetworks`LengthVar[2145573083]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`IndexIntegerT[1, 512]]|>|>, 
                    "embeddingpos" -> <|
                    "Type" -> "Embedding", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 
                    768}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {768}, "ClassCount" -> 512, 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083]}, "$OutputDimension" -> 
                    768|>, "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`IndexIntegerT[1, 512]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "inputCombine" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# + #2& ],
                     "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "normalize" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{768}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.1, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "part1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "embeddingwords", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "posembed", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "inputCombine", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "embeddingwords", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "embeddingpos", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "posembed", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "inputCombine", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "embeddingpos", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "inputCombine", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"]}|>, 
                    "encoder" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "embedding", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "encoder", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "embedding", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "encoder", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|"Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 2}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]], "Type" -> 
                    "Function", "Function" -> Composition[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    Map[List]], "OutputType" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 2}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]], "Pattern" -> 
                    NeuralNetworks`ValidatedParameter[
                    Blank[String]], "Batched" -> True, "$Version" -> "13.1.3",
                     "Initialization" -> (Initialization :> None)|>|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"string\""}, {
                    TemplateBox[{"\"matrix \"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]2\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of indices \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\[VeryThinSpace]range: \"", "1", 
                    "\"..\"", "30522", "\"\[VeryThinSpace])\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"embedding\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "embedding"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "embedding"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "embedding"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"encoder\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "encoder"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "6", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "encoder"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "encoder"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8778720786471195`*^9, 3.87788753798689*^9, 
  3.877898240481532*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"812ac235-60dd-4d75-82c5-35e9bcc289d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"embedData", " ", "=", " ", 
   RowBox[{"KeyMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"bert", "[", 
       RowBox[{"#", ",", 
        RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}], "&"}], ",", 
     RowBox[{"Association", "[", 
      RowBox[{"Normal", "[", "plainData", "]"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8778720872967644`*^9, 3.8778721078969765`*^9}, {
  3.877872142539405*^9, 3.877872146151673*^9}, {3.8778724039766645`*^9, 
  3.877872438573486*^9}, {3.8778724819289227`*^9, 3.877872497508671*^9}, {
  3.8778875531073437`*^9, 3.8778875599135847`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"e63e2566-a2b4-4a27-a622-1406c6a2809c"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.8778986311238785`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"d6078748-d862-427e-8827-8d68a4fa561f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"mixedData", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Normal", "[", "embedData", "]"}], ",", " ", 
     RowBox[{"Length", "[", 
      RowBox[{"Normal", "[", "embedData", "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "mixedData", "]"}]}], "Input",
 CellChangeTimes->{{3.877874059402655*^9, 3.877874145302004*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"f56ccbb8-d6c0-4107-8439-99e9252c2473"],

Cell[BoxData["23973"], "Output",
 CellChangeTimes->{3.877874168475562*^9, 3.877888302007233*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"be994978-bcd7-41c8-b45b-ff3f3832ed4d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixPlot", "[", 
  RowBox[{
   RowBox[{"Keys", "[", "mixedData", "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8778741828753433`*^9, 3.877874210161519*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"171590db-393b-4491-835c-2fa13a7fa4f5"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJwUmnc4lu8fhpVCpYjIKCuKpKRCqCuJSEKDJKU0kC8RadAQkhRKKKkoIlIy
UikjFYrsvd89ngdNDfrdvz8c9cfb0/Pe9+dzXed5lPp+v60HRUVERGaQH1/y
8//fxxvL18zpo/DDtqXb85UA+8/fm31dg4WFZeHlSW5snFF7/ebLXT6GgyfG
XBqFWG01of64lYOUC/H3LgYKYGC8ZNkTewq1B5db3gqlMbyzY9UKeRrJ/80R
CVkvwLb+Z+m3Nrdile8J1euGDLRmB6zUVuFjmq2k6OerXXDXun5wdigLKoov
v42+5SFO/v3N4CN8/FC0TUjhC2GRefHVuB6NfzFHLYeshdgi2HrVaTkLYU/9
h5qoWswwaC8vsKYhsiU2wm4LBd5m9eYoEx48xIV6U9V68Z+r6MwGQzZmmUrt
2G7Ah47f1lsz2hnwtFa8EWLAQ9T7pI2LxwRQmjHfY+E9IV6sKs77kceGQapK
PnNbM2qP796VMImHHZwvTEkVIQZjy2z+K6Rwb0V4DieYRs/bL1E5IjQSHm/N
Oj1dgHc3kz5OyqJwunt7pewwHzGTDyfJSzFQMlOl/JapEDuWRYlt+MmE/Nui
v5O1ahASc09NVo5GtbB8k9FlIdZLZ31QAAdJ02VOLrekYSV8tXCGOYW4aIf3
MxR4aOY1bmN9a8WnvqdR36IY0J900osryocJU7Hao5mC/s4Wn8nXBWjaIDgf
+oKJhRbasZN2CLHJ/cJdl0MszDbscmq5+gkVoScuVS2lMaZyMc1OKMQ3emhW
mikXErFxiio6FCyVDPNHpvIw0+hcxJuLPdjkNs/s9hUW3KULP+5fzMez8pj4
EPK+yXdrbptrDKJ89NpsxiMOTOWYMwOkBFisGvaoMacB+6V3ri6sbkO3rGbx
q4tC0NsvmnADGSg20r0m+oeLgmFZnkG7AAd+F2q4S3aggxn5RTaWCS5WTfF4
ykO/R0e6UnsbRF0VXjz5yYDj4HrJewM8fDyz0K7oZBc2r3ApVQpmIVhqe/6h
ch6MDj9YGvmyGdUfWzLL/YfwPr92av9uPh6U1umFRjWiS1k6MG3PIMYvz3ob
VciH05zedeUpFA4wr318W85H5+isVfcSh2BkMaktRoPClYbzDsY8Lp5Wyj6t
lu9Bl0ui70rdFvAzdi/lZQ3B5/HzMltbPpwNnDQfxzORcp45+DuFh0nT4uO7
DYXo7jebxQsUwnCiQrl/lIVR10Xxuj4NOChkSGc9EmJavvZfbg8bYZpJjikS
LZi7/NCik+40fsWHPFEjc3T8s7uJniYfDsrJKm+LhLBeeuTbZEMalwyvio98
Ib/G6T6R396LkonxLRct2dixpl1D1pSP9pMyzsOVQow1SykHraERLtHdsPsn
DWrPX8NRsk83ojYoLuMJ8c/j7aTwFVxEVS7gHj86iB/uQ6oK7RwkK26Mea4j
QGtMjPGJbRQ2GzU1pD0h555TYbznXj/uuy4p27SNiXpx1s3nJ3i45r2xna0u
RGPIQK2yZges/zGmP7vFRM/113ue5PLAaSiNCjxOQcwx5EjrCj7Y1tprZ2oP
YstbdnLPnEF0Lg9vcLjPQYLrVf0vZI/mr0oudb5Awe/zP/OoA3z0vlOPK8kc
xILDelLi11swpfbNk1fdQ3hx6OxiJfJ9zyzLmUNndEItVkxjnSkLXd2c6pbb
PEypn3w56TyNmm87nay0aLAr5YX5XgKob7QI3F5M4fb5ZyortAT4qbM5oTeF
gTnl8UYNB5sgsnfn3bFaMidDPp6i1/gouCtjL3ZfiDZ+5/eoV2z0sVclOkU0
4+reyQVevygUHfzv4FMNId7M/njDcBkbC+5c+ow9FESaIpLdOniQ9/J/pGEy
AB2lu5mnpGic2dGxXeY4uc/FghWKEhxU7IltD/JsAaM22YP1fggizDldr835
WKl4NPCyNo2/2eera1qEsLq8mX98goOYkCrzyQ+EkP76orKtjI2Dv/Yrb0hs
RuWnZKGRAw1Jm3/Bhd4Uvl3ctMwrnAc7x+fTrh4TYnTswtVRAQvaoX/bu7Y3
4JH/tDJzMh8S+js/zFxA5i3UYsP0Wi4KA2882/FPCOZGmb9G9ly4PpxbJ/ui
E9Wjs0ed13VgwfUdtuFZTMSYCX9szOLBes3Fk0djhzCx/GLKlpNcOMcpDc2P
FuD9/s9X762nEdhwrW2nEYWBQH/p5gkuEve/ZSvO4SByh3bIPHEB7AL/lGbN
ovBFvvOGYIiH87V+WT6pQuwz8/RSJfl6qWBXTHZSG8k/mZi0DgbuqIatieDz
kLfVriQuXIi77/3UdpCcP9C8447fyUaY6EjZ3J7chp79rKU5sQwkX/haWzWJ
D4tJNbYTh9kQfNYpb87go9Gs2a2DnKu3c7nmgjJyL9GyWiW7h9Errn5VNn0Y
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
qZt1r7Qh/OSqdds+rhfPWrQ3jLpQyPyh7Ta3modAPZGROqkBXAtr9NPbxEdB
8Lh3bbsQYiqKE/UaNDSC0+gNQ/3QsBPJ8Z5gI0Dhkf7XLD70azb19SdyMfLw
7urSQQEoNxOjG4Tzfkg363yd2YoFvq33OXMZGJfY/JVaxMeUl8Uzx9Tr4R2Y
zXf36sND378/I0l+VGdcrru6n8LzgEyjJ0k0drHPxvxZMowfT6cUlJPcPNW0
uGbxHDa4YrkLpb424PW1tvTZf4gvc6wt4sy46Hu00LrQrxOfYoasipezoLs2
/8XRHzwEXzv+KdVHiAll/3MV+kNon7bqfI0FFzN+B9609xaAoTa31ui1EOdk
xnrnLOXA93yqSe/GVsiPCfQUTrTCpa5aqdeWgaPsU1l75/Jh+Hkf40w02efV
u4piz/LRnR6VKUYNomzu3cni1S24HVK+4/H3IfS9kOK3GhAeeetat2g2G+fO
2o2+Jp5f8rr7be5zIY64Fj1+874ZZclT5UqDh3Dg0+tZP3fxYTfRFLrxvRAB
+6cZFRFfa803NithtMIqpT/9/gkKhVWBqvKEt5OHK+LC1wyi656OOYPkm5rb
LZc6gQD1LzfdCrjHwpkDV90mr+Djpm51f36tEHnsGRlihOdy3HZtuTFAYX/n
PePeKgFKYuj7i01ZSPj+L7ZWshkF8oEeRfOG0PE6XnYsmI+70db7A4ME0M7R
m/v9HAWzVvH1zhdpvEtS3XvlJIVgE3OXS+Bj5LwvL5RwUIk7I+pBF9lP2ZTz
lXkcNLho9Y+Zt6NnWKp6wScerr55uDomTkg8tc3zBPGWqKEcvDMn9/hW/J+J
DAsK3SvOq/6qwcqRM2mpvhRqdxh3rpLnYzHLvuRf1wDaAhelz1TuxNCeis/X
ZVkQynAn60by8PZ1sRt3CY2inZ8VpacPQ/XWsevfjg5D+UyI2qdKCoeXu6XZ
byfcMJA3yVOeCfj+G5p0rAUn7GPkpT4N4Xl3d7HCOj7Esy8FMBQotA/vHvj5
hospuTM23Draje/52gsdtpIe33T6xZ0AwhfNiZn/knmQ0W63aSf9vG3ox9Lk
NDY0ujen1/jzoT7dumjdJS4alpQqTesS4MzIi8ZJxBPYBe6mH98NIt/2TOY2
cS64wZX/7bMiPbk+2LLjQyOZp9KeB6GDODRdVuThIz7WzgipWsUYwIfKk5PW
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
p4e7OiHdF50xpslF0KlCBa0FFGLjvEs4b/qR23OqbK81BbmuhOxtZD+0Oa3e
tXs5g7OFmrxuRwFys/L0fLMJ10pdXPngXS+CzFixhw/xSF4vnezIEF+47L9g
vx0P1yrNnC5rChHjbFAWp0b22PeVi99caYPt+DXzzpsQXr2qPHQgSQA1L5jY
Z3XiDYtlVaVM+iqU19uvRiFf5nCrBPG/9qPPK1+OcJFiFPUg9gEFSb3Kj8ln
RdjAPMv8t0IEa0920ef7Qhj+3CX6epfk6NBqi4EOCnfHvBiHLhbk5Wcu3aBA
ocldUWU68TafEomNHvIiTHy8Sffj7jYIbni+aNImvvbUUpF9RQAlafHyD13d
eDYsCql4xcU/36+RhmEUJk8v20qdasbrfYlPgmvYqAy2eFjECNDLVOcljzbg
SpVV85wrLBwu19nc60TB3v33tezjDG4dGidxYSmFWddiZ6037oPdsNPP6mEa
yxyuF60xIHumpu/+JbM2vGiXkx2u4MP0YcnKVHKeq/xfvy1IYzC5SfLUoLsI
ob6VTiuuEo+jQqc1kPf95qp+1pvMv/kfZfkw0mfhcVN3ZT/qhaPbXaNEkge9
60Y/PD/OR2DHIWNTt3aICddM/HmBRuiisPZnm7mwy3Bvuj9Sh5ym5VlaMcSz
/a+XL+/nomTierffSRR+WEqc3v2yFpKrcgo2/+hF40TPA4rNFJ7+oYIfrqSx
1lbBzVSsH7Wvo0y99lXAJKK5e9piBvLr9ZM85xEvtTk07ehYJ7pTf+/uSGJh
tElTaUk4H9fuLPuQelGIt9XDbveut+KdYCweDRyMNjCuT5JJDhy78Mgmow9R
tIXSjVEeNgVv2lxrIYRqRWHOhoYm9NxP8j8dxMa+ew5X58tQwPnpD+dlcvFr
7V2NmzUUzszf1jOdIf2eV7VAo5Jw2+rzMhEk/5aIy+uoPhyAHuPgYi3djF6z
xOgD8Wz8snBWZotR6Gr47ZkcRPKnTnmuBPGL4q9/9DOe1qJQ/U0aTeb88Oh0
++TvfEyL1/9yC52o+GLwPCaDg+/6kT87CK+mpwWHsy1pRJeskF7OppGlpnZw
XSMPoqBT31ObWrB+bazpc5oHY9PP3WcjhQi0W6q8x5V4Gl9+b+49BrlK+iFt
3YQziuqHejks7I+5eSjXswW7bVuUJq3gwFTPdq9OpQCthz7/1b3C4Il97+JP
Nyg0v2c5phiwEP/vIFtSgUHG0omLzG7w4eRynjZobcezZ90GbwlPGMyq23sB
DIyPT3h43JP41/cnUXNM/n8f8MMy/+UCrHwYtlVvcxdCtxWUf+bT+J2ROPke
ud5P8n9LXE1a8d2sf1JnEeGMFM9DpY5CJE46+t9iOQ6+fQj/3FzPgUXuFqPa
QgGyHH+afVhHw7d1lsyx9SLYB3JmrPFksENOVW3jHgEkMvPX/VhF9smHo+OP
BQhw6ob4fg37bvz0z6uhF9IYLCqNzcriYLFhRf9dmTK4TTg4fVesCDs9ey3l
NhDvKvc5VNwghLtNG6/LXwT9P5+yfjQzsK5TyfibSvx9/ewl56R78OvTDqq3
kIuCD/LyO4kHrX1dOhYz/v/Py5pms2I7H//pBUsbfm3D/cprBwM92XBT6+MF
DvBxPT0j0LlWiIf5JpdNhsi+Uu6o2rGpH8XrRhNGiRfkfZ6lrE41o9P4b8eY
GAf6GS0707sEqFYxmrJMwMC9saL/VD/JodCtzxXj+uGSMt++0aEP68Ik23YV
85Dv90J1D/FU7rIHa0SqLKS49EtNWMpHmeTfQkcvISTkNf1tL9OYdZZ7Wcub
i2WrvrZfNaxH4d89fUv0iL/I6p+5waKRxouR36nBh2K7++WAecSLH47Vvhog
fH5jSfRUwh1reXod9+f0YLGmXsncMlKHmXdqlc9RaN9/L0hdTATfUPbIVMLT
/raygysPcSH146b8ZOdeVOXu1yo14eHu/CP1LRUU1v+q3KHwksFcbtzU9VOE
yF/VGaXqx4a8WItKm68II3uWl/4rYWBSGZT42J/C7PVvgqJ+10Fhqmvm18Q+
9FoWJ1y/S0H5xAnKVYyBeGmGcZozHxsKKxcGfCb719RtcMxWhFsNY27KNgxs
27+r/1Ij/bj3q4fjCdKf83yM9lpROKSrcnZ0fR/251855SnOxh65Z3Yt+XyE
Ot0QyL8Uwkx3+jjjuSL4sJhjNjk02ttHhMHPeFgZre9k5cZA1BM12El8tzG4
hx+lM4BTNjM9ykjuaW3cWeZWSmNLoQPLUlmEhoPp/3QLGbz7cVLGc60QNb5v
uZf/sOGQ/+PDdbd6qEvZccJL+/DqtsW6addIndV+bP9LvJl94u/hkCYGX3KH
wuLfkM9zuiLjriODqykeJvR9AW6uDuc/8uvBmvKzXy/NZjAusUXg1cBHu4xz
FV3YAfdF56YmP23BJWeXylc7OIhuWqYR8kGAyJWuWvnezbg5Sg8uKmSjhG2m
tvGbAOI5fIX1CSJckTWbWnhAhIQI9fN7yPw455a7p7MYzDvfXK3cK4J3oOIx
cbcB/Ox6cfcu4f76GYPG/NMiuM90CG/ZQUM64OLw3SMimHSGtW0aYrAr0aNl
K0XhEst5h4F3P9yr0qPPTaNwWvN2Dy+MxrEzww4znjGw/D55afQ/Ck4akSE2
ZmwMfB6ndaiDgcGy5qoD5DyuPRK63pUmf+/vve6SfitU5QfoTbc5mH9gyXzT
pwLc68lNm5IkxHKjSI0Ti1lQGOv6M29/MlbEdS6VGGbwdgd3Z7KQ5LS7x8V2
jwGsMTZI7yB8P6LftTnqLY2vilsH3r8jnNGi/3S7ggg33D30/INpaDdMiK5V
4CFy07SEGyZC2K/pPtG5jVzX29JCNvFC44yJWXPS+Eg43FYWzRNieCjVRvIa
g80b12eEEb5kGUWdTdhM3t/1xCft/SI8mXNwxvz/hPgclPru5X4G2vrxn0ND
RahY89U9wLkFw8d7ll4w5sBD/WP/imoBXkdNN3XpakLA7vXW+8IIj8109E+Q
ojBFZehjpFMtKtjqizifegk/RemyOBRMFWL4iwoY6N52ZLOt/n8/4MQmZQEb
ssue95wdaIVCXG+N7T8ONOKZ5qFYsmdOxIz2nu6HQHPbTdY8ksclV3PNiMcq
HI5XP5vbggVVl37LeXOw+/Kark/viV9PP7Vrxbc6KP/wvb47vg+7Yr0iJ94n
87j9mZmneTs2Xbxu8pGcs5Rq1+WZuSTHUi3VjobQWGVfXxQxmYtOp7njyjtr
kWiz55IX8fDmJLGhr6MM/sx69P3abwraLNeT2m+asVoua4oUue74fm6pQ7+A
7L2rxf1FNKwkFxZcsOJhufrS3e43mpDNyDVKfKQxMfTJeVNHHlbNdL+pWtME
yHy2sSY5UXheZuevHgHikDSBWd8L90/LvQ4Tn1khv5B7OZqH7tbvKd33mnH3
2p6w4detCBGvnBfH5uDrhH2xxxMEWGDBXR/5sRtXJ8/3HHjOxePfmdPUgik8
kDYIKx3tQ7rlLx3b+XzcNKxk6bkJ4SLfNJkPPhykXidczRRC6rWpv8dh4qkb
+FMCyFxZX1/nndbLQCD7fNH8PArm67adE/3uR3WYenmBHwWjXQvuXcikca8u
1Hu3nwCKA2LOum6EI2Jj7/0kueS6Uzuyr5fshzseqyZ+5sHgRlyLzfMWzDBr
1yjUEEG6eMorTgHhhvC4W6c/8hAboZsSEtMKs+BdeZuqODgj13ix5ybJ/fAg
oyfE933zNMddkx9AzqmF91ccGYDGSHbhhYs03J60KKZs5yKdlzeLN60ewwZb
XEpDaRQ0zguvVBShIGH6u889IsSkeSudNRGB0/Z4oPX/z6EcqHWfepKP11+q
qidFdqNn13+Riclc2B6ekXk7gEJn1GufqXnEX1Zf7RPTFkL9SGmM9j02RCt9
7sTcYhDePRjoUElhqKeqSTyLhRYX1rWsFgFsoq9nTr9OfLFT08n9DwO7d/If
WAebcNF97of/7NkoH70YHj6Dws2JlT1fusn+XXJt9r9CHrawny7MiGnBSP2m
B/6XGTya3Bi3KJ7CeI6OVdBsFsb5/KnSTuwFe5XE4aytPLxKnXhkVy+FOYu+
Kh0h/PvXM2o0yJsHt5wXjwy5xAOujx4PH2wGt/KlVcoEDpx0Whec6hTg4pPL
u6Y9EOD+2rqw4ydoBCdpqW4REi4ZuThZrL4Vs+3vGdUNcPA4VHb0MvECqw45
s/2Ev/d1pzFOaRTE1k7d02rDgliNr4upiwD5E0yNign3+B9j2SyqZXDUf2RW
1DLisQd3LL26XoC+TXMNre52YY3lQHBnOoM6H+OZG75ReMF7OBKizIY0/9oP
2TgBJqhbRV7bT+rxvfC1PYdBYpbSXst5NMab2orPI/7vJjbp0tNxn/BnherB
FuL3WTERns/HD+CEtM6POP8B3JC1v2WwVITNE5xzeuWJ/936vkWH8KBi4Kxm
v9cMPv8cbZ+sL8T0G012GzLZODEsu33+OwYxlLWz/gqSd99lG6Sa2JhobHFt
IvGATwtubvGYwCBI/2z3upUirF2464p9DoOBJYWtFupCaNkUXbl2hY3lIUo/
yp/wEXRBbttfWgib7Xp7ba8zmPSUMtxdRuN0zAareHceFqfmaLX9bIKDq41S
U0MvlMoVKy+d5IF+So1T+UEhMHlNSxSXRv0kyahcFg+S6xJObZzcisKObcUy
NQ1AyiGZDSEs3FZa29Kwhfz+2Jmr4l4Mtu598cmDIvvOKfr8sF8vVlTsco7r
pJF6/PRCnTwerC12vRL3asHtYdVXpsta4D95z9rcBRzUTjNNdKoT4OVe19Vz
Q0SYcYhzpmWSCNW8pqR5JA9c23YUfaskeWCtVs8+Ruqjqbdpy0EO9gtbtf9s
F+GTSu2DN2QOSje9cnwtS2H3VrviK7NFKFto+sTxKY3n/RN7E+N5EPzwzLrY
y4Xch42bfgnI3u89z3f9S8Oo++i7lSSXkPMDYTwGoXMOOf4pp6C0db3HbDkR
PDex1DQDSH/2Tfjd8ZWLwUzb/f//XqCv35xiBQcGSUy+5uwlAizb6Mz6eKcG
QU8WW0ibd6Ho2u6loktCrJ/3RmMgToTTvrOysUOEWOfKhDAxGrtePX4dq8rg
hK+xXspnPsbEjM08b3Xgf24rkXU=
   "], {{0, 0}, {110, 11}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{10.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["2", TraditionalForm]}, {7.5, 
       FormBox["4", TraditionalForm]}, {5.5, 
       FormBox["6", TraditionalForm]}, {3.5, 
       FormBox["8", TraditionalForm]}, {1.5, 
       FormBox["10", TraditionalForm]}, {0.5, 
       FormBox["11", TraditionalForm]}}, {{10.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["2", TraditionalForm]}, {7.5, 
       FormBox["4", TraditionalForm]}, {5.5, 
       FormBox["6", TraditionalForm]}, {3.5, 
       FormBox["8", TraditionalForm]}, {1.5, 
       FormBox["10", TraditionalForm]}, {0.5, 
       FormBox["11", TraditionalForm]}}}, {{{0.07161458333333333, 
       FormBox["1", TraditionalForm]}, {28.574218749999996`, 
       FormBox["200", TraditionalForm]}, {57.22005208333333, 
       FormBox["400", TraditionalForm]}, {85.86588541666666, 
       FormBox["600", TraditionalForm]}, {109.92838541666666`, 
       FormBox["768", TraditionalForm]}}, {{0.07161458333333333, 
       FormBox["1", TraditionalForm]}, {28.574218749999996`, 
       FormBox["200", TraditionalForm]}, {57.22005208333333, 
       FormBox["400", TraditionalForm]}, {85.86588541666666, 
       FormBox["600", TraditionalForm]}, {109.92838541666666`, 
       FormBox["768", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]}]], "Output",
 CellChangeTimes->{{3.8778742023169036`*^9, 3.8778742108642993`*^9}, 
   3.877889097159128*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"8ac05b8c-2db6-4685-8535-6d8c33fe07b2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"traingingData", ",", " ", "vtData"}], "}"}], " ", "=", " ", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{"mixedData", ",", 
     RowBox[{"Floor", "[", 
      RowBox[{"0.75", "*", 
       RowBox[{"Length", "[", "mixedData", "]"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.877874227339921*^9, 3.877874267522001*^9}, {
  3.877874348198831*^9, 3.8778744117523966`*^9}, {3.8778891323183603`*^9, 
  3.8778891356901827`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"942b293e-fe48-49a0-980f-838500c3d9b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"testData", ",", " ", "validationData"}], "}"}], " ", "=", " ", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{"vtData", ",", " ", 
     RowBox[{"Floor", "[", 
      RowBox[{"0.8", " ", "*", " ", 
       RowBox[{"Length", "[", "vtData", "]"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8778744152546663`*^9, 3.8778744869517035`*^9}, {
  3.877889140361313*^9, 3.877889143791052*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"502d9ca2-67ee-485d-b875-42b07e10fc3a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "testData", "]"}]], "Input",
 CellChangeTimes->{{3.877874491503986*^9, 3.877874494252329*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"61e91e64-1b7b-4ed0-ad3f-185401845aa2"],

Cell[BoxData["4795"], "Output",
 CellChangeTimes->{3.8778745013107395`*^9, 3.8778891583518534`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"466f3cec-456f-4f51-8b9d-ef50e63a1897"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"network", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DropoutLayer", "[", 
      RowBox[{"\"\<Input\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<Varying\>\"", ",", "768"}], "}"}]}], "]"}], ",", 
     RowBox[{"NetBidirectionalOperator", "[", 
      RowBox[{"LongShortTermMemoryLayer", "[", "150", "]"}], "]"}], 
     RowBox[{"(*", 
      RowBox[{",", " ", 
       RowBox[{"GatedRecurrentLayer", "[", "50", "]"}]}], "*)"}], ",", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"NetMapOperator", "[", 
        RowBox[{"LinearLayer", "[", "30", "]"}], "]"}], ","}], "*)"}], 
     RowBox[{"LongShortTermMemoryLayer", "[", "56", "]"}], ",", 
     RowBox[{"AggregationLayer", "[", 
      RowBox[{"Total", ",", "1"}], "]"}], ",", " ", 
     RowBox[{"LinearLayer", "[", "56", "]"}], ",", 
     RowBox[{"SoftmaxLayer", "[", " ", 
      RowBox[{"\"\<Output\>\"", " ", "->", " ", 
       RowBox[{"NetDecoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Class\>\"", ",", 
          RowBox[{"Keys", "[", "questions", "]"}]}], "}"}], "]"}]}], "]"}]}], 
    " ", "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8778721142809505`*^9, 3.8778721163008285`*^9}, 
   3.8778721491920824`*^9, {3.87787224345673*^9, 3.877872276093667*^9}, {
   3.8778723505081396`*^9, 3.877872357014615*^9}, {3.8778740351856394`*^9, 
   3.8778740563043656`*^9}, 3.8778745094360185`*^9, {3.877874578477234*^9, 
   3.877874602484439*^9}, {3.8778746372438493`*^9, 3.8778746646889796`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"794910ec-5433-4c00-b4a3-be6fa2fd3f76"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "2" -> <|
                    "Type" -> "NetBidirectional", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "ForwardNet" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 150, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    768, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1466040848], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> NeuralNetworks`TensorT[{150}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "BackwardNet" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 150, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    768, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1466040848], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> NeuralNetworks`TensorT[{150}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "Aggregation" -> Catenate, "DataReversed" -> Automatic, 
                    "$InputTensor" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT], "$ForwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT], "$BackwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 300}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "ForwardState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "ForwardCellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "BackwardState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "BackwardCellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{56, 300}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{56, 300}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{56, 300}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{56, 300}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 56, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    300, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1466040848], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 300}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 56}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {56}, "$OutputSize" -> 56, 
                    "$InputSize" -> 56, "$InputDimensions" -> {56}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{56}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{
                    "\"algebra__linear_1d_composed\"", 
                    "\"algebra__linear_1d\"", 
                    Skeleton[53], "\"probability__swr_p_sequence\""}, {
                    "algebra__linear_1d_composed", "algebra__linear_1d", 
                    "algebra__linear_2d_composed", "algebra__linear_2d", 
                    "algebra__polynomial_roots_composed", 
                    "algebra__polynomial_roots", 
                    "algebra__sequence_next_term", 
                    "algebra__sequence_nth_term", 
                    "arithmetic__add_or_sub_in_base", 
                    "arithmetic__add_or_sub", "arithmetic__add_sub_multiple", 
                    "arithmetic__div", "arithmetic__mixed", 
                    "arithmetic__mul_div_multiple", "arithmetic__mul", 
                    "arithmetic__nearest_integer_root", 
                    "arithmetic__simplify_surd", 
                    "calculus__differentiate_composed", 
                    "calculus__differentiate", "comparison__closest_composed",
                     "comparison__closest", 
                    "comparison__kth_biggest_composed", 
                    "comparison__kth_biggest", "comparison__pair_composed", 
                    "comparison__pair", "comparison__sort_composed", 
                    "comparison__sort", "measurement__conversion", 
                    "measurement__time", "numbers__base_conversion", 
                    "numbers__div_remainder_composed", 
                    "numbers__div_remainder", "numbers__gcd_composed", 
                    "numbers__gcd", "numbers__is_factor_composed", 
                    "numbers__is_factor", "numbers__is_prime_composed", 
                    "numbers__is_prime", "numbers__lcm_composed", 
                    "numbers__lcm", "numbers__list_prime_factors_composed", 
                    "numbers__list_prime_factors", 
                    "numbers__place_value_composed", "numbers__place_value", 
                    "numbers__round_number_composed", "numbers__round_number",
                     "polynomials__add", "polynomials__coefficient_named", 
                    "polynomials__collect", "polynomials__compose", 
                    "polynomials__evaluate_composed", "polynomials__evaluate",
                     "polynomials__expand", "polynomials__simplify_power", 
                    "probability__swr_p_level_set", 
                    "probability__swr_p_sequence"}], "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 56, "$Rank" -> 0, 
                    "$Version" -> "13.1.3"|>|>, 
                    "InteriorStates" -> <|{2, "ForwardState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "ForwardState"], {
                    2, "ForwardCellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "ForwardCellState"], {
                    2, "BackwardState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "BackwardState"], {
                    2, "BackwardCellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "BackwardCellState"], {
                    3, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "3", "States", "State"], {
                    3, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "States", "CellState"]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetBidirectionalOperator", HoldForm], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"LongShortTermMemoryLayer", ",", 
                    "LongShortTermMemoryLayer"}], "}"}], "]"}], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]300\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LongShortTermMemoryLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]56\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8778721213621273`*^9, {3.8778722507690687`*^9, 3.8778723007186394`*^9}, {
   3.8778723674795265`*^9, 3.877872377367081*^9}, 3.877874606194994*^9, {
   3.877874655461546*^9, 3.8778746673422413`*^9}, 3.8778892130818796`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"696dc610-1fa0-4ff7-960c-1cfa567a2bab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedNet", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"network", ",", "traingingData", ",", " ", 
    RowBox[{"ValidationSet", "->", "validationData"}], ",", " ", 
    RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877867474590951*^9, 3.877867475594259*^9}, {
  3.877874676475333*^9, 3.8778747546703777`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"6d6f095f-ccc4-4031-8254-5d13df943736"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "2" -> <|
                    "Type" -> "NetBidirectional", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "ForwardNet" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 150, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    768, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1466040848], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> NeuralNetworks`TensorT[{150}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "BackwardNet" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 150, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    768, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1466040848], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> NeuralNetworks`TensorT[{150}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "Aggregation" -> Catenate, "DataReversed" -> Automatic, 
                    "$InputTensor" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT], "$ForwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT], "$BackwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 300}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "ForwardState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "ForwardCellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "BackwardState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "BackwardCellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 56, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    300, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1466040848], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 300}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 56}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{56}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {56}, "$OutputSize" -> 56, 
                    "$InputSize" -> 56, "$InputDimensions" -> {56}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{56}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{
                    "\"algebra__linear_1d_composed\"", 
                    "\"algebra__linear_1d\"", 
                    Skeleton[53], "\"probability__swr_p_sequence\""}, {
                    "algebra__linear_1d_composed", "algebra__linear_1d", 
                    "algebra__linear_2d_composed", "algebra__linear_2d", 
                    "algebra__polynomial_roots_composed", 
                    "algebra__polynomial_roots", 
                    "algebra__sequence_next_term", 
                    "algebra__sequence_nth_term", 
                    "arithmetic__add_or_sub_in_base", 
                    "arithmetic__add_or_sub", "arithmetic__add_sub_multiple", 
                    "arithmetic__div", "arithmetic__mixed", 
                    "arithmetic__mul_div_multiple", "arithmetic__mul", 
                    "arithmetic__nearest_integer_root", 
                    "arithmetic__simplify_surd", 
                    "calculus__differentiate_composed", 
                    "calculus__differentiate", "comparison__closest_composed",
                     "comparison__closest", 
                    "comparison__kth_biggest_composed", 
                    "comparison__kth_biggest", "comparison__pair_composed", 
                    "comparison__pair", "comparison__sort_composed", 
                    "comparison__sort", "measurement__conversion", 
                    "measurement__time", "numbers__base_conversion", 
                    "numbers__div_remainder_composed", 
                    "numbers__div_remainder", "numbers__gcd_composed", 
                    "numbers__gcd", "numbers__is_factor_composed", 
                    "numbers__is_factor", "numbers__is_prime_composed", 
                    "numbers__is_prime", "numbers__lcm_composed", 
                    "numbers__lcm", "numbers__list_prime_factors_composed", 
                    "numbers__list_prime_factors", 
                    "numbers__place_value_composed", "numbers__place_value", 
                    "numbers__round_number_composed", "numbers__round_number",
                     "polynomials__add", "polynomials__coefficient_named", 
                    "polynomials__collect", "polynomials__compose", 
                    "polynomials__evaluate_composed", "polynomials__evaluate",
                     "polynomials__expand", "polynomials__simplify_power", 
                    "probability__swr_p_level_set", 
                    "probability__swr_p_sequence"}], "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 56, "$Rank" -> 0, 
                    "$Version" -> "13.1.3"|>|>, 
                    "InteriorStates" -> <|{2, "ForwardState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "ForwardState"], {
                    2, "ForwardCellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "ForwardCellState"], {
                    2, "BackwardState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "BackwardState"], {
                    2, "BackwardCellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "BackwardCellState"], {
                    3, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "3", "States", "State"], {
                    3, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "States", "CellState"]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetBidirectionalOperator", HoldForm], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"LongShortTermMemoryLayer", ",", 
                    "LongShortTermMemoryLayer"}], "}"}], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]300\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LongShortTermMemoryLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]56\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8778747462994156`*^9, 3.8778748545619035`*^9, 
  3.8778893225390487`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"9ab8091e-c44a-47ff-9811-0f9f6d01e1f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetMeasurements", "[", 
  RowBox[{"trainedNet", ",", " ", "testData", ",", " ", "\"\<ErrorRate\>\""}],
   "]"}]], "Input",
 CellChangeTimes->{{3.8778747650827255`*^9, 3.8778748189820004`*^9}, {
  3.877874859482331*^9, 3.877874862330803*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"cf14139e-f989-406d-b0dc-2bc1a9eef062"],

Cell[BoxData["0.11637122002085505`"], "Output",
 CellChangeTimes->{3.877874869147374*^9, 3.877889339646598*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"1427638b-1624-4041-ae6a-307424187796"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"Values", "[", 
   RowBox[{"Association", "[", "traingingData", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8778748858307333`*^9, 3.8778749125994883`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"d4ed508c-b6ae-4480-b9c2-ff5c5e2f2bb6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"algebra__linear_1d\"\>", 
   ",", "\<\"algebra__linear_1d_composed\"\>", 
   ",", "\<\"algebra__linear_2d\"\>", 
   ",", "\<\"algebra__linear_2d_composed\"\>", 
   ",", "\<\"algebra__polynomial_roots\"\>", 
   ",", "\<\"algebra__polynomial_roots_composed\"\>", 
   ",", "\<\"algebra__sequence_next_term\"\>", 
   ",", "\<\"algebra__sequence_nth_term\"\>", 
   ",", "\<\"arithmetic__add_or_sub\"\>", 
   ",", "\<\"arithmetic__add_or_sub_in_base\"\>", 
   ",", "\<\"arithmetic__add_sub_multiple\"\>", 
   ",", "\<\"arithmetic__div\"\>", ",", "\<\"arithmetic__mixed\"\>", 
   ",", "\<\"arithmetic__mul\"\>", 
   ",", "\<\"arithmetic__mul_div_multiple\"\>", 
   ",", "\<\"arithmetic__nearest_integer_root\"\>", 
   ",", "\<\"arithmetic__simplify_surd\"\>", 
   ",", "\<\"calculus__differentiate\"\>", 
   ",", "\<\"calculus__differentiate_composed\"\>", 
   ",", "\<\"comparison__closest\"\>", 
   ",", "\<\"comparison__closest_composed\"\>", 
   ",", "\<\"comparison__kth_biggest\"\>", 
   ",", "\<\"comparison__kth_biggest_composed\"\>", 
   ",", "\<\"comparison__pair\"\>", ",", "\<\"comparison__pair_composed\"\>", 
   ",", "\<\"comparison__sort\"\>", ",", "\<\"comparison__sort_composed\"\>", 
   ",", "\<\"measurement__conversion\"\>", ",", "\<\"measurement__time\"\>", 
   ",", "\<\"numbers__base_conversion\"\>", 
   ",", "\<\"numbers__div_remainder\"\>", 
   ",", "\<\"numbers__div_remainder_composed\"\>", 
   ",", "\<\"numbers__gcd\"\>", ",", "\<\"numbers__gcd_composed\"\>", 
   ",", "\<\"numbers__is_factor\"\>", 
   ",", "\<\"numbers__is_factor_composed\"\>", 
   ",", "\<\"numbers__is_prime\"\>", 
   ",", "\<\"numbers__is_prime_composed\"\>", ",", "\<\"numbers__lcm\"\>", 
   ",", "\<\"numbers__lcm_composed\"\>", 
   ",", "\<\"numbers__list_prime_factors\"\>", 
   ",", "\<\"numbers__list_prime_factors_composed\"\>", 
   ",", "\<\"numbers__place_value\"\>", 
   ",", "\<\"numbers__place_value_composed\"\>", 
   ",", "\<\"numbers__round_number\"\>", 
   ",", "\<\"numbers__round_number_composed\"\>", 
   ",", "\<\"polynomials__add\"\>", 
   ",", "\<\"polynomials__coefficient_named\"\>", 
   ",", "\<\"polynomials__collect\"\>", ",", "\<\"polynomials__compose\"\>", 
   ",", "\<\"polynomials__evaluate\"\>", 
   ",", "\<\"polynomials__evaluate_composed\"\>", 
   ",", "\<\"polynomials__expand\"\>", 
   ",", "\<\"polynomials__simplify_power\"\>", 
   ",", "\<\"probability__swr_p_level_set\"\>", 
   ",", "\<\"probability__swr_p_sequence\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.877874913087448*^9, 3.8778897251730585`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"9d9a5a76-4289-4ad3-895d-6420788f1edc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questions", "[", "\"\<algebra__linear_2d\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8778897372551794`*^9, 3.8778897796598816`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"a85b926a-8ba7-41f9-8a15-b520e8c1cfd6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Solve 2*l + 16 = 2*m, -4*m + 22 = -5*l - 15 for l.\"\>", 
   ",", "\<\"-3\"\>", 
   ",", "\<\"Solve 87*l - 83*l + 14*n = 372, 4*n - 96 = 4*l for l.\"\>", 
   ",", "\<\"Solve 2*y - 2*k - 2 - 10 = 0, -4*k = 20 for y.\"\>", 
   ",", "\<\"Solve -3*v - 3*s + 6 = 0, -11 = -v - 2*s - 12 for v.\"\>", 
   ",", "\<\"Solve 2*g + 40 = 5*p + 5, -3*g = 5*p - 10 for g.\"\>", 
   ",", "\<\"Solve -p - 4*v = 8 + 7, 5*v + 50 = 5*p for p.\"\>", 
   ",", "\<\"Solve 2*d + 5*u - 44 = 0, 360*d - u + 4 = 362*d for d.\"\>", 
   ",", "\<\"Solve -220*t + 4*p = -219*t - 3, 5*t + 2*p = -29 for t.\"\>", 
   ",", "\<\"Solve -26*f = 2*q - 27*f - 7, 4*f + 12 = 0 for q.\"\>", 
   ",", "\<\"Solve 0 = 3*d - 5*x - 3, 4*x + x = -2*d + 2 for d.\"\>", 
   ",", "\<\"Solve 2*g = r - 1, 2*g = -4*r - 0*g - 26 for r.\"\>", 
   ",", "\<\"Solve u + 6 = 3*j, 13*j - 2*u - 10 = 8*j for j.\"\>", 
   ",", "\<\"4\"\>", ",", "\<\"-15\"\>", 
   ",", "\<\"Solve -6 = -3*b + 3*l, -3*l - 2 - 7 = -4*b for b.\"\>", 
   ",", "\<\"Solve -4*p - 2429 = -11*x - 2422, 0 = -x - p + 17 for x.\"\>", 
   ",", "\<\"Solve 4*v + 4*j = -4, v + 2*j - 1 = -6 for v.\"\>", 
   ",", "\<\"Solve -m = -3*a - 9, 76*a = -4*m + 78*a + 16 for m.\"\>", 
   ",", "\<\"Solve -3*a + 4*d + 1 = 0, 4*a + 2*d + 0*d + 28 = 0 for a.\"\>", 
   ",", "\<\"Solve -3*c + 5*h - 7 = 0, 2*c - 10 = -3*h + 17 for c.\"\>", 
   ",", "\<\"Solve 10 = -h - 3*b, -h - 19*b + 20 = -22*b for h.\"\>", 
   ",", "\<\"-5\"\>", 
   ",", "\<\"Solve 5*a - 2*i + 5 = -i, 5*i = -3*a + 25 for a.\"\>", 
   ",", "\<\"Solve 2*f + 5358*r = 5356*r - 2, 0 = f - 4*r + 6 for f.\"\>", 
   ",", "\<\"5\"\>", ",", "\<\"2\"\>", 
   ",", "\<\"Solve -u + 1 = l, 5*u - 5 - 4 = -4*l for u.\"\>", 
   ",", "\<\"Solve r - 48*l = -51*l + 17, 2*r + 2 = 3*l for r.\"\>", 
   ",", "\<\"Solve 4*m + 5*c - 29 = 0, -225 = -5*m + 2*c - 230 for m.\"\>", 
   ",", "\<\"Solve i = -2*n + 6*i + 15, -n - 4*i = 25 for n.\"\>", 
   ",", "\<\"Solve -5*p = 4*b + 5, 3*b - 3*p - 3 = -0 for b.\"\>", 
   ",", "\<\"Solve -24 = -5*j - 2*u, -51*u = -56*u - 15 for j.\"\>", 
   ",", "\<\"-16\"\>", 
   ",", "\<\"Solve 0 = 3*x - j + 5, -3*j = -4*x - 5 - 5 for x.\"\>", 
   ",", "\<\"Solve -f = -m + 4, -45*m - 20 = 3*f - 50*m for f.\"\>", 
   ",", "\<\"Solve 2*o + 4*j + 26 = 0, 3*j + 17 - 2 = 0 for o.\"\>", 
   ",", "\<\"Solve 142*m - 140*m - o = 11, 5*m - 26 = 2*o for m.\"\>", 
   ",", "\<\"Solve 3*m + 2*o + 3 = 0, 4*o + 4 = -4*m - 0*o for m.\"\>", 
   ",", "\<\"7\"\>", 
   ",", "\<\"Solve 4*k + 28 = 4*h, -2*k - h - 8 = -0*k for k.\"\>", 
   ",", "\<\"Solve 0 = 5*z - 3*i + 27, 24*i - 19*i = -7*z - 1 for z.\"\>", 
   ",", "\<\"38\"\>", 
   ",", "\<\"Solve a = 36*x - 38*x + 4, -4*a = -4*x + 8 for a.\"\>", 
   ",", "\<\"7\"\>", ",", "\<\"16\"\>", 
   ",", "\<\"Solve 4*f + 7 = 3*t, 0 = 2*f + 3*t - 8 - 11 for f.\"\>", 
   ",", "\<\"Solve -5*l - 10 = -0*c + c - 9, 3*c = 12 for l.\"\>", 
   ",", "\<\"Solve 3*h = 3*k - 9, -3*h + 34 - 37 = 0 for k.\"\>", 
   ",", "\<\"1\"\>", ",", "\<\"3\"\>", ",", "\<\"1\"\>", ",", "\<\"-47\"\>", 
   ",", "\<\"Solve -2*c = -8, 10*g + 4*c = 6*g - 24 for g.\"\>", 
   ",", "\<\"Solve -9*g + 95 = -4*g + 21*u, 0 = 4*u - 20 for g.\"\>", 
   ",", "\<\"Solve 3 = g, 4*g + 0*g - 5*g = 4*q + 13 for q.\"\>", 
   ",", "\<\"Solve 16*p - 14*p = 2*f + 18, 4*p + 18 = -2*f for p.\"\>", 
   ",", "\<\"Solve 20 = -5*t + 5*j, 305*j = -6*t + 310*j - 22 for t.\"\>", 
   ",", "\<\"Solve -63*j = -67*j - p - 23, 5*j + 2*p + 28 = 0 for j.\"\>", 
   ",", "\<\"Solve -175*w + 177*w = -5*g - 10, -4*g - 8 = 0 for w.\"\>", 
   ",", "\<\"Solve 12 = h - 4*h + 3*c, -3*h = 5*c + 20 for h.\"\>", 
   ",", "\<\"Solve -60 + 15 = r - 10*n + 5, 50 = -4*r + 10*n for r.\"\>", 
   ",", "\<\"Solve 18*b - 14*b = -5*g - 40, b - 2*g - 3 = 0 for b.\"\>", 
   ",", "\<\"4\"\>", 
   ",", "\<\"Solve -5*u - 11 + 23 = 3*x, -20*x - 17 = u for x.\"\>", 
   ",", "\<\"Solve 81*t - 77*t + 16 = -3*r, -2*r - 3*t - 9 = 0 for r.\"\>", 
   ",", "\<\"Solve 424 = 2*j + 434, 2*a + 3*j = -25 for a.\"\>", 
   ",", "\<\"Solve 5*a + 3*f + 10 = -2*f, 0 = -a + 2*f - 2 for a.\"\>", 
   ",", "\<\"Solve 4*l - 15 = v, 2223*l + 4*v = 2226*l - 8 for l.\"\>", 
   ",", "\<\"Solve 4*s = -14 - 6, 2*s = y - 14 for y.\"\>", 
   ",", "\<\"Solve 4*a - 6 = 2*k, 7131*k - 7136*k + 13 = -3*a for k.\"\>", 
   ",", "\<\"Solve w + 2*b = -673 + 671, 3*b = -15 for w.\"\>", 
   ",", "\<\"Solve -23 = -5*j + 4*w - 15, 3*w + 25 = -j for j.\"\>", 
   ",", "\<\"Solve 3*y - f + 4 = 0, 3*y - 37 = 7*y + 5*f for y.\"\>", 
   ",", "\<\"Solve -3*x - 5*k = -5 + 3, -4*k = -x - 5 for x.\"\>", 
   ",", "\<\"5\"\>", ",", "\<\"0\"\>", 
   ",", "\<\"Solve 3*t = 5*l - 41 + 28, 20 = 4*l for t.\"\>", 
   ",", "\<\"Solve 5*y - 4*u + 15 = 0, 112*y - 15 = 56*y + 61*y - u for \
y.\"\>", ",", "\<\"Solve -c = -5*h - 5 + 25, -5*c = -3*h + 34 for c.\"\>", 
   ",", "\<\"26\"\>", 
   ",", "\<\"Solve 0 = -169*r + 171*r - 4*i - 4, -2*i - 10 = r + 2*i for r.\"\
\>", ",", "\<\"Solve 5*u = -x + 23, 5*x + u - 1 = 18 for x.\"\>", 
   ",", "\<\"Solve 3*r - 9 = -2*p, 0 = -4*p - 9383*r + 9387*r - 22 - 10 for \
p.\"\>", ",", "\<\"1\"\>", 
   ",", "\<\"Solve 0 = u - 3*x + x - 4, 8 = 2*u + 4*x for u.\"\>", 
   ",", "\<\"Solve -4*n = -4*l + 12, 69*n - 70*n = 4*l - 7 for l.\"\>", 
   ",", "\<\"Solve -1055*x + 1067*x = 5*t - 123, -3 = -x - 4*t for x.\"\>", 
   ",", "\<\"Solve -2*s = v - 15, 5*v + 259 = -32*s + 466 for s.\"\>", 
   ",", "\<\"Solve -16 = 4*a + 4*h, -h - 5 = 34*a - 32*a for a.\"\>", 
   ",", "\<\"Solve 3*h - 115 = -5*k - 128, 10*h + 3*k = -16 for h.\"\>", 
   ",", "\<\"5\"\>", 
   ",", "\<\"Solve -3*i + 4*x - 38 = 0, 19*x - 23*x = -i - 26 for i.\"\>", 
   ",", "\<\"54\"\>", ",", "\<\"5\"\>", 
   ",", "\<\"Solve -2*w + w + 5*f + 4 = 0, 2*f + 7 = -5*w for w.\"\>", 
   ",", "\<\"-2\"\>", 
   ",", "\<\"Solve -2*z - 6 = 4*u, 4*u + 5*z + 0 + 3 = 0 for u.\"\>", 
   ",", "\<\"Solve -7*b = 3*s + 41, 53*s - 19 = 3*b + 54*s for b.\"\>", 
   ",", "\<\"Solve -2*o + 52*h - 47*h + 4 = 0, -2*o + 4 = -3*h for o.\"\>", 
   ",", "\<\"10\"\>", ",", "\<\"-4\"\>", 
   ",", "\<\"Solve 4*j + h + 8 = 0, -2*j - 4*h - 4 = -h for j.\"\>", 
   ",", "\<\"Solve -3 = -c - 4*a, 0*c - 24 = 4*c - 2*a for c.\"\>", 
   ",", "\<\"Solve 3*m = 5*l - 4, -22*m + 17*m + 2*l = 13 for m.\"\>", 
   ",", "\<\"Solve 3*j - 19 + 16 = -2*f, -3*f = -j - 10 for f.\"\>", 
   ",", "\<\"Solve 3*p - 5*t - 32 = -p, -3*t + 3 = 5*p for p.\"\>", 
   ",", "\<\"Solve v - 7*g = -5*g + 7, 2*v = -2*g - 4 for v.\"\>", 
   ",", "\<\"Solve 2 - 9 = -4*i - 5*u, -i - 4*u - 1 = 0 for i.\"\>", 
   ",", "\<\"Solve -5*j + 1 = f, f + 6*j = 5*j - 3 for f.\"\>", 
   ",", "\<\"-4\"\>", 
   ",", "\<\"Solve -28*a + 25 = 2*z - 33*a, 3*z - 5*a - 43 = -13 for z.\"\>", 
   ",", "\<\"Solve 0 = f + 6, -42*g + 46*g - 2*f = 20 for g.\"\>", 
   ",", "\<\"Solve -7*r + 5*x = -100, 18*r + 4*x = 17*r - 47 for r.\"\>", 
   ",", "\<\"-3\"\>", 
   ",", "\<\"Solve 5*g + 3*b = -18, -6*b + 11 = -5*g - 2*b for g.\"\>", 
   ",", "\<\"Solve 2*k + 21 = 7*k - 4*w, -3*k + w + 14 = 0 for k.\"\>", 
   ",", "\<\"-46\"\>", 
   ",", "\<\"Solve 3*g = 5*o - 25, -g - 6*o + 7*o - 5 = 0 for g.\"\>", 
   ",", "\<\"Solve 0 = 4*g + 3*c + 29, -4*g - 16 + 2 = -2*c for g.\"\>", 
   ",", "\<\"-25\"\>", 
   ",", "\<\"Solve -11 = -3*b + 4, -5*c + 2*b = 35 for c.\"\>", 
   ",", "\<\"-13\"\>", 
   ",", "\<\"Solve 4*h + 2*r - 4 = 0, -22*h - 3*r = -17*h - 6 for h.\"\>", 
   ",", "\<\"Solve 0 = -25*g + 3*c + 122, 3*g - 3*c - 2 = 2*g for g.\"\>", 
   ",", "\<\"Solve -12 = -5*b + 2*b + 3*c, 4*b - 14 = 2*c for b.\"\>", 
   ",", "\<\"9\"\>", ",", "\<\"-3\"\>", 
   ",", "\<\"Solve -5*s = 5*c - 30, -c - 3 = -2*s - 0 for s.\"\>", 
   ",", "\<\"14\"\>", ",", "\<\"-5\"\>", 
   ",", "\<\"Solve s + 4*s - 4*g - 18 = 0, -2*g = 3*s - 2 for s.\"\>", 
   ",", "\<\"Solve -4*l - 583*b = -581*b + 6, 4*b = 3*l + 21 for l.\"\>", 
   ",", "\<\"-68\"\>", 
   ",", "\<\"Solve -258*u + 260*u + 5*o = 11, -5 = -3*u + 4*o for u.\"\>", 
   ",", "\<\"Solve 0 = 3*p + 3*u + 12, p = -3*u + 8*u + 2 for p.\"\>", 
   ",", "\<\"Solve 5*i = 4*j - 17, 2*j - 5*i + 3 = 24 for j.\"\>", 
   ",", "\<\"Solve 2*f + 2*k + 401 = 409, 0 = 2*f - 5*k - 1 for f.\"\>", 
   ",", "\<\"5\"\>", ",", "\<\"1\"\>", ",", "\<\"22\"\>", 
   ",", "\<\"Solve 2*o = -44*h + 40*h + 16, 0 = -h + 5*o - 40 for h.\"\>", 
   ",", "\<\"-7\"\>", ",", "\<\"-4\"\>", 
   ",", "\<\"Solve -4*u - 79*f + 9 = -80*f, 2*u - 3 = f for u.\"\>", 
   ",", "\<\"-5\"\>", ",", "\<\"11\"\>", 
   ",", "\<\"Solve -2*g = h - 40, 3*h + 101 = -4*g + 179 for h.\"\>", 
   ",", "\<\"3\"\>", ",", "\<\"4\"\>", 
   ",", "\<\"Solve 35 = 4*a + 3*p, -p = -2*a - 4 + 9 for a.\"\>", 
   ",", "\<\"Solve 2*a + 16 = 4*i, -120*i = -121*i - 3*a + 4 for i.\"\>", 
   ",", "\<\"Solve -11*z - 23*z + 3*z - 62 = 0, p = 4*z + 10 for p.\"\>", 
   ",", "\<\"-5\"\>", ",", "\<\"-40\"\>", 
   ",", "\<\"Solve 0 = -4*b - 5*y + 3, -10*b + 5*b = 3*y - 7 for b.\"\>", 
   ",", "\<\"Solve 5*w = -5*v - 45, -323*w - 3*v = -327*w - 22 for w.\"\>", 
   ",", "\<\"-1\"\>", 
   ",", "\<\"Solve -2*n = -4*u + 2, u - 2*n - 13 = n for u.\"\>", 
   ",", "\<\"Solve 3*x = -10 - 2, 5*t = 2*x + 3 for t.\"\>", 
   ",", "\<\"Solve -f - 3*d - 6 = 0, -9*f = -6*f + 2*d + 4 for f.\"\>", 
   ",", "\<\"Solve v + 3*n = -18, 0 = -22*v + 19*v - 4*n - 29 for v.\"\>", 
   ",", "\<\"-27\"\>", 
   ",", "\<\"Solve -4*z + 17 = -5*w, -2*w + 3*z - 29 = 30 - 55 for w.\"\>", 
   ",", "\<\"7\"\>", ",", "\<\"5\"\>", ",", "\<\"-3\"\>", 
   ",", "\<\"Solve -2*t + 7 = -o + 2*o, 6*t = o + 1 for o.\"\>", 
   ",", "\<\"Solve -20 = 4*y - 4*s, -s + 16 = -5*y + 3 for y.\"\>", 
   ",", "\<\"7\"\>", 
   ",", "\<\"Solve 4*x - 4*m + 149 = 145, x = 3*m - 13 for x.\"\>", 
   ",", "\<\"Solve 0 = -0*j + 3*j + 5*c - 12, 19 = -4*j + 5*c for j.\"\>", 
   ",", "\<\"4\"\>", 
   ",", "\<\"Solve -825*x + 821*x + u - 26 = 0, 0 = x - 2*u + 3 for x.\"\>", 
   ",", "\<\"Solve -u + 2*y = 3, 0 = -4*u + 3*y - 6*y - 1 for u.\"\>", 
   ",", "\<\"Solve -6*j - 352 = -5*j - 116*c, -217*j = -218*j - c - 1 for \
j.\"\>", ",", "\<\"Solve -2*l + 1 = 4*w + 15, -12 = 4*w for l.\"\>", 
   ",", "\<\"Solve -4*l - 8 = 3*o - 0, 3*l - 11 = 2*o for l.\"\>", 
   ",", "\<\"Solve 0*c + j = -5*c - 23, 12 = -4*j for c.\"\>", 
   ",", "\<\"Solve -4*t = -6*t - 3*k - 2, -k + 1 = t for t.\"\>", 
   ",", "\<\"Solve 19 = -2*z + 3*i, -4 + 25 = -3*z + 2*i for z.\"\>", 
   ",", "\<\"Solve 0 = -3*t - 4722*f + 4719*f - 3, 4*t + 2*f = 0 for t.\"\>", 
   ",", "\<\"Solve 0 = -4*m - f - 217 + 227, 0 = 4*m + 2*f - 4 for m.\"\>", 
   ",", "\<\"Solve 56*s = -3*u + 52*s - 32, -u - 3*s - 19 = 0 for u.\"\>", 
   ",", "\<\"Solve 5*q + 6 + 14 = 0, -4*q = z + 13 for z.\"\>", 
   ",", "\<\"Solve -a + 29 = -5*y, 4*y + 18 = -a + 2 for y.\"\>", 
   ",", "\<\"Solve -158*q + 157*q = 8*s + 24, 2*s = -4*q - 6 for s.\"\>", 
   ",", "\<\"-1\"\>", 
   ",", "\<\"Solve 0 = 154*b - 149*b - o + 2, -6 = -2*b - 3*o for b.\"\>", 
   ",", "\<\"-12\"\>", 
   ",", "\<\"Solve 3*h = 4*b - 11, -5*h - 15 = -2*h for b.\"\>", 
   ",", "\<\"Solve 0 = -3*l - 7 + 4, 5 = -3*f - 2*l for f.\"\>", 
   ",", "\<\"Solve 0 = g + 5*l + 10, g + 0*l - 2*l = 4 for g.\"\>", 
   ",", "\<\"Solve -68*w - 4*i = -63*w + 2 + 28, 0 = -i - 5 for w.\"\>", 
   ",", "\<\"Solve 4*l + 13 = 128*h - 123*h, 3*l = -h + 14 for h.\"\>", 
   ",", "\<\"Solve -3*h = 33471*z - 33474*z + 18, 5*z - 36 = 2*h for h.\"\>", 
   ",", "\<\"Solve -4*k = -3*m + 7*m, 2*k = 4*m - 30 for k.\"\>", 
   ",", "\<\"Solve 7*a + 4*n - 453 + 419 = 0, 4*a + 4*n = 16 for a.\"\>", 
   ",", "\<\"0\"\>", 
   ",", "\<\"Solve 0 = 5*d + 809*s - 810*s - 2, 0 = -4*d - 3*s - 6 for \
d.\"\>", ",", "\<\"Solve -5*p - 3*u + 5 = 0, -9 = 4*p + u - 6 for p.\"\>", 
   ",", "\<\"Solve 3*c + 2*q + 8 = 0, 2*q = 3*c - q + 3 for c.\"\>", 
   ",", "\<\"Solve -4*y + 29 = -2*o + 3, -5*o = 4*y - 5 for y.\"\>", 
   ",", "\<\"4\"\>", 
   ",", "\<\"Solve 0 = -z - 2*o, 0 = -8*z + 3*z + 5*o - 30 for z.\"\>", 
   ",", "\<\"Solve m = 3*w + 4, -9*w - 14 = 4*m - 6*w for m.\"\>", 
   ",", "\<\"Solve 0 = -2*v - 5*h - 4, -120*v + 121*v + 2 = -5*h for v.\"\>", 
   ",", "\<\"-1\"\>", ",", "\<\"20\"\>", 
   ",", "\<\"Solve 2161*u - 2160*u = 5*a - 7, 5*a - 16 = -2*u for u.\"\>", 
   ",", "\<\"Solve 2*s = s - 5*j + 26, 4*j = -s + 21 for s.\"\>", 
   ",", "\<\"Solve 5*p + 11 = 2*f, -4*p = -2*f - 1 + 11 for f.\"\>", 
   ",", "\<\"Solve 5*m - 2*a + 17 = 0, -128 = 2*m + 4*a - 126 for m.\"\>", 
   ",", "\<\"Solve -5*w + 26 = -y, -4*w - y - 609 + 610 = 0 for w.\"\>", 
   ",", "\<\"-4\"\>", 
   ",", "\<\"Solve 0 = s - r, -116*s + 112*s - 20 = r for s.\"\>", 
   ",", "\<\"-5\"\>", 
   ",", "\<\"Solve 8*r - 3*g = 2018 - 1940, 3*r = 4*g + 35 for r.\"\>", 
   ",", "\<\"Solve 3*k + 13 = -2*l, -3*l - 12 = -2*k + 5*k for l.\"\>", 
   ",", "\<\"Solve 4*p = -4*v, v = 5*p + 4 + 20 for p.\"\>", 
   ",", "\<\"Solve -4*l = -o + 2*o + 15, l + 5*o = 1 for l.\"\>", 
   ",", "\<\"Solve 73*q + 4*o = 75*q - 8, 5*o + 32 = -3*q for q.\"\>", 
   ",", "\<\"Solve 2*o - 2*h - 2 = -0*o, -2*o - 7 = -5*h for o.\"\>", 
   ",", "\<\"6\"\>", ",", "\<\"1\"\>", ",", "\<\"-24\"\>", 
   ",", "\<\"Solve 1060*x - 1062*x = -5*d + 13, -5*x - 46 = d for d.\"\>", 
   ",", "\<\"Solve -12*x - 41*c = -39*c - 16, 0 = -5*x + 4*c + 26 for x.\"\>",
    ",", "\<\"Solve 0 = 3*s - 3*m - 1771 + 1792, 5*s + 2*m = 0 for s.\"\>", 
   ",", "\<\"Solve 0 = -4*v - 20, -4 = 3*g - 4*g + v for g.\"\>", 
   ",", "\<\"2\"\>", ",", "\<\"5\"\>", 
   ",", "\<\"Solve 4*h - 5*d = -80, -3*h + 525*d - 522*d = 57 for h.\"\>", 
   ",", "\<\"-5\"\>", 
   ",", "\<\"Solve 5*j = -5*b + 10, b + 3 = 4*j + 5 for j.\"\>", 
   ",", "\<\"Solve -5*d - 5*y = -10, -2*d + 14*y - 17*y + 11 = 0 for d.\"\>", 
   ",", "\<\"18\"\>", ",", "\<\"-3\"\>", 
   ",", "\<\"Solve 4*l - 3 = l, -3*a - 4*l + 4 = 0 for a.\"\>", 
   ",", "\<\"Solve 2*g + 5*z - 12 = 0, 13 = 3*g - 0*z + 5*z for g.\"\>", 
   ",", "\<\"-10\"\>", 
   ",", "\<\"Solve -6 = 3*k + 5*z, -2*k - 24 = -5*k + 5*z for k.\"\>", 
   ",", "\<\"0\"\>", 
   ",", "\<\"Solve 2*q - 9 = -3*p, 0*p + 5*p - 5*q - 15 = 0 for p.\"\>", 
   ",", "\<\"Solve 2*t + 4*d = -2 + 18, 5*t + 16 = 4*d for t.\"\>", 
   ",", "\<\"Solve 0 = -4*d + l, 4*d + 5*l + 0*l = 0 for d.\"\>", 
   ",", "\<\"Solve 5*s = -22*z + 24*z - 8, 3*s + 6*z = 24 for s.\"\>", 
   ",", "\<\"7\"\>", 
   ",", "\<\"Solve 0 = -4*b + 4*r - 32, 0 = 23*b - 20*b - r + 18 for b.\"\>", 
   ",", "\<\"-3\"\>", 
   ",", "\<\"Solve a + 4*r = -8, 3*a + 2*r = 13 - 7 for a.\"\>", 
   ",", "\<\"-11\"\>", 
   ",", "\<\"Solve -2*y + j + 1 - 7 = 0, 2*y + 22 = 5*j for y.\"\>", 
   ",", "\<\"Solve -2*s - 2*z = -40444 + 40432, 3*s + 4*z - 23 = 0 for \
s.\"\>", ",", "\<\"-5\"\>", 
   ",", "\<\"Solve -3*u - 2*t = 8, 7*u = 4*u + 5*t - 1 for u.\"\>", 
   ",", "\<\"Solve -27 = g + 5*q, 99*q - 31 = 3*g + 104*q for g.\"\>", 
   ",", "\<\"Solve -22 = 6*t - t + 2*u, -t + 1 = -5*u for t.\"\>", 
   ",", "\<\"Solve -4*v + 5*a - 6 = -27, 20 = 4*v - 4*a for v.\"\>", 
   ",", "\<\"Solve -3*r - 2*x = 16, -37 = 6*r - 16*x + 21*x for r.\"\>", 
   ",", "\<\"Solve 2*n = -2*j - 9 + 7, -7 = -n + j for n.\"\>", 
   ",", "\<\"Solve 4*g + 78*x - 83*x + 9 = 0, -5*g - 10 = -5*x for g.\"\>", 
   ",", "\<\"Solve 48 = -5*w - 3*i + 66, -5*w + 3*i = -12 for w.\"\>", 
   ",", "\<\"Solve -4*x = 10*p + 54, 2 = -48*x + 51*x - p for x.\"\>", 
   ",", "\<\"36\"\>", ",", "\<\"4\"\>", 
   ",", "\<\"Solve -4*x + 4*j + 12 = x, 8 = 3*x - 2*j for x.\"\>", 
   ",", "\<\"13\"\>", 
   ",", "\<\"Solve -2*w - 3*g - 11 = 0, -6*g + 14 = -4*w - 4*g for w.\"\>", 
   ",", "\<\"Solve 0 = -5*a - 2*n, 3*a - 266*n + 268*n = 4 for a.\"\>", 
   ",", "\<\"Solve 21 = 2*x + 3*f, -x + 2*x + 6 = 4*f for x.\"\>", 
   ",", "\<\"Solve 5*l - 26 = -2*r, -1410*r + 1409*r + 7 = l for r.\"\>", 
   ",", "\<\"Solve 23*o + 2*n = 22*o + 4, 0 = -4*o - n - 5 for o.\"\>", 
   ",", "\<\"Solve w - 8 + 3 = 0, -2*u = 3*w - 17 for u.\"\>", 
   ",", "\<\"Solve -4*m - 2*d - 24 = 0, 0*d = d + 2 for m.\"\>", 
   ",", "\<\"1\"\>", ",", "\<\"-1\"\>", 
   ",", "\<\"Solve -6*i + 8*w = 13*w - 50, 2*i - 5*w = -10 for i.\"\>", 
   ",", "\<\"Solve -13 = -s - 3*m, 3*m - 15 = -3*s + 2*m for s.\"\>", 
   ",", "\<\"Solve 645*b - 643*b + 3*p = -4, -5*p = -b - 2 for b.\"\>", 
   ",", "\<\"3\"\>", 
   ",", "\<\"Solve -2*b = -4*v + 8, 3*b - 16 + 8 = v for v.\"\>", 
   ",", "\<\"3\"\>", ",", "\<\"-4\"\>", ",", "\<\"-1\"\>", 
   ",", "\<\"Solve 3*b + 4*j + 8 = 3*j, 2*b + 2*j = -4 for b.\"\>", 
   ",", "\<\"5\"\>", 
   ",", "\<\"Solve -2 = -a + 524*z - 525*z, -10 = -2*z for a.\"\>", 
   ",", "\<\"Solve 0*a + 8 = -2*i - 2*a, 5 = -5*a for i.\"\>", 
   ",", "\<\"Solve 7*j = 3*j + 3*z, -7*z + 8*z + 4 = 0 for j.\"\>", 
   ",", "\<\"Solve 4*u = -4*x + 4, -2*u - u = -5*x + 5 for x.\"\>", 
   ",", "\<\"42\"\>", 
   ",", "\<\"Solve -i = -4*f - 25, 38 = 2*i - 42*f + 37*f for i.\"\>", 
   ",", "\<\"Solve 2587*i = 2584*i - 5*w + 64, 6*w - 66 = 0 for i.\"\>", 
   ",", "\<\"Solve -2*p + 1 - 10 = z, -3*p + 5*z = 7 for p.\"\>", 
   ",", "\<\"16\"\>", 
   ",", "\<\"Solve -5*f + 18 = m, -23*m + 19*m = 2*f for f.\"\>", 
   ",", "\<\"Solve 6 = 2*v + 173*g - 169*g, 0 = 5*v - 3*g + 37 for v.\"\>", 
   ",", "\<\"Solve k - 3*a = -15, 40 = -4*k + 3*a + 16 for k.\"\>", 
   ",", "\<\"Solve 6*b - 3*b - 1 = 2*p + 7, 2*p + 2 = 0 for b.\"\>", 
   ",", "\<\"Solve y = -4*s - 16, 3*y + 2*s + 222 = 204 for y.\"\>", 
   ",", "\<\"Solve -3*x = 15, -152 = -p - 4*x - 166 for p.\"\>", 
   ",", "\<\"Solve 0 = -6*s + 2*s + w - 7, -2*w = 2*s + 16 for s.\"\>", 
   ",", "\<\"Solve 182*w - 181*w - 311 = 15*u, -46 = 2*u + w for u.\"\>", 
   ",", "\<\"Solve -6*t = 18, 3515*k + t - 13 = 3511*k for k.\"\>", 
   ",", "\<\"Solve 19*d - 3 = 18*d, 5 = 51*p - 46*p - 5*d for p.\"\>", 
   ",", "\<\"3\"\>", 
   ",", "\<\"Solve 0*g + 12 = -4*g, -2*l - 5*g - 23 = 0 for l.\"\>", 
   ",", "\<\"Solve -2*i = 5*d - 44, i + 5*d - 713 = -681 for i.\"\>", 
   ",", "\<\"Solve 3*w + 31*q - 19 = 36*q, -3*w - 3*q = -3 for w.\"\>", 
   ",", "\<\"Solve z - t = 10, 2*z + 144*t - 145*t = 15 for z.\"\>", 
   ",", "\<\"Solve 5*z = 5*u - 20, -21 = 132*u - 136*u + 5*z for u.\"\>", 
   ",", "\<\"5\"\>", ",", "\<\"-1\"\>", 
   ",", "\<\"Solve 3*r + 7 = 2*i + 4*r, 0 = -3*i + 4*r - 6 for i.\"\>", 
   ",", "\<\"Solve -l + 2*l - 5*c = -23, -4*c = 4*l - 4 for l.\"\>", 
   ",", "\<\"-1\"\>", 
   ",", "\<\"Solve -2*f = k + 8, 0 = -5*k - 3*f - 1 - 18 for k.\"\>", 
   ",", "\<\"Solve -5*m + 2634*s + 25 = 2633*s, 4*m + 3*s - 1 = 0 for m.\"\>",
    ",", "\<\"Solve 3*i = 2*o + 20, 26*i - 25*i = -4*o - 26 for o.\"\>", 
   ",", "\<\"0\"\>", 
   ",", "\<\"Solve -2*b - 8 = -4*c, 0 = 14*c - 18*c + 4 for b.\"\>", 
   ",", "\<\"Solve -20 = 2*q - 6*q + l, 4*q = -3*l + 20 for q.\"\>", 
   ",", "\<\"Solve -31*l - 4*d = -29*l + 24, 0 = -l + 2*d + 4 for l.\"\>", 
   ",", "\<\"-33\"\>", ",", "\<\"1\"\>", 
   ",", "\<\"Solve -23 = -5*m - 3*a, -2*a = -91*m + 98*m - 30 for m.\"\>", 
   ",", "\<\"-5\"\>", 
   ",", "\<\"Solve -5*j - 2*o = 3, -16 = -3*j + o - 20 for j.\"\>", 
   ",", "\<\"Solve -234*w = -5*c - 229*w - 10, -5*w + 25 = 0 for c.\"\>", 
   ",", "\<\"37\"\>", 
   ",", "\<\"Solve 0*z = -2*z + j, -j = 3*z + 5 for z.\"\>", ",", "\<\"4\"\>",
    ",", "\<\"3\"\>", 
   ",", "\<\"Solve -4*l = -4*x + 4, 7 = -13*x + 10*x + l for x.\"\>", 
   ",", "\<\"-49\"\>", 
   ",", "\<\"Solve 3*v = 6*v - 3*u - 3, -4*v = -2*u - 2 for v.\"\>", 
   ",", "\<\"Solve -5*q + 112 - 133 = h, 0 = -5*h - 7*q - 33 for h.\"\>", 
   ",", "\<\"Solve -3*f = 43*t - 39*t - 15, -f = -t - 5 for t.\"\>", 
   ",", "\<\"3\"\>", ",", "\<\"-11\"\>", 
   ",", "\<\"Solve 0 = 4*c - 3*q + 14, 13 = -45*c + 42*c + q for c.\"\>", 
   ",", "\<\"-8\"\>", ",", "\<\"2\"\>", 
   ",", "\<\"Solve -m + 31*s - 4 = 28*s, 0 = -4*m + s + 17 for m.\"\>", 
   ",", "\<\"20\"\>", 
   ",", "\<\"Solve -2*n + 40 = 35*i - 39*i, 5*n = 5*i + 75 for i.\"\>", 
   ",", "\<\"Solve 3*u - m + 8 = 0, 38*u + 8 = 40*u - 4*m for u.\"\>", 
   ",", "\<\"Solve -3*j = -l - 17, 19*j - 3*l - 23 = 17*j for j.\"\>", 
   ",", "\<\"-7\"\>", 
   ",", "\<\"Solve 5*u - 5*o = -38 + 58, 0 = -4*u + 5*o + 24 for u.\"\>", 
   ",", "\<\"Solve -4*o - 7*f + 2*f = 0, -5*o - 5*f = 0 for o.\"\>", 
   ",", "\<\"Solve -3*c - 11 = -2*t, -3*t - 196 = 3*c - 205 for t.\"\>", 
   ",", "\<\"Solve 3*y + 0 = -2*d - 3, 5*d - 3*y = -39 for d.\"\>", 
   ",", "\<\"Solve 3*w - l = -3, 54 = -3*w + 2*l + 48 for w.\"\>", 
   ",", "\<\"Solve 1 = -2*a + c - 8, 5*a + 5*c = 0 for a.\"\>", 
   ",", "\<\"Solve 13 = 4*c - x, -5*x - 5 - 16 = 2*c for c.\"\>", 
   ",", "\<\"Solve 4*d - 7 = 4*i + 9, i + 5*d = 26 for i.\"\>", 
   ",", "\<\"Solve -3*p + 15 = 0, b + p = -3*p + 24 for b.\"\>", 
   ",", "\<\"-3\"\>", ",", "\<\"-12\"\>", 
   ",", "\<\"Solve 4*r + 5*y = -33, 5*r + 126*y - 123*y = -25 for r.\"\>", 
   ",", "\<\"-10\"\>", ",", "\<\"-5\"\>", ",", "\<\"-4\"\>", 
   ",", "\<\"Solve -b - 1 = 2*y, 0 = 2*b + y - 5*y + 2 for b.\"\>", 
   ",", "\<\"Solve -4*n + 2*l = -2, 3*n - 4857*l - 5 = -4859*l for n.\"\>", 
   ",", "\<\"-27\"\>", ",", "\<\"-1\"\>", 
   ",", "\<\"Solve -926*s + 931*s + 5 = -q, 3*s - 3*q + 21 = 0 for s.\"\>", 
   ",", "\<\"Solve -2*c = 4*r + 63 - 95, -c + 18 = 3*r for r.\"\>", 
   ",", "\<\"Solve -2*y - 4*t = -8, -3*y - t + 4 = -8 for y.\"\>", 
   ",", "\<\"Solve -2*x + 19 = 3*u, -18*x + 14*x = 3*u - 23 for u.\"\>", 
   ",", "\<\"Solve -2*f - 3*q - 5 = 0, 48 = -2*f - q + 49 for f.\"\>", 
   ",", "\<\"-24\"\>", 
   ",", "\<\"Solve f + 50 = -3*v + 36, -4*v - 10 = -3*f for v.\"\>", 
   ",", "\<\"3\"\>", 
   ",", "\<\"Solve -4*i + 5*n - 7 = 30, i + 18 = 3*n for i.\"\>", 
   ",", "\<\"Solve 5*u - 4 = -q, -4 = 6*u - 9*u - q for u.\"\>", 
   ",", "\<\"Solve -5*k + 6 = 2*a - 6*a + 23, -4*k - 13 = -3*a for a.\"\>", 
   ",", "\<\"1\"\>", 
   ",", "\<\"Solve -104562 = -2*t + 6*c - 104596, 5*t + 35 = 5*c for t.\"\>", 
   ",", "\<\"Solve 2*b + 3*s = -5, -4*s + 34 = 4*b + 46 for b.\"\>", 
   ",", "\<\"Solve -4*q - 16 = 0, -3*q + 2 - 17 = 3*m for m.\"\>", 
   ",", "\<\"Solve 110*y - 113*y = -3*g - 6, g = -5*y + 16 for y.\"\>", 
   ",", "\<\"Solve 2*z + 4*c = 14, -351*c - 10 = -z - 356*c for z.\"\>", 
   ",", "\<\"Solve 5*s = 4*d + 18 + 22, 23 = -3*d + 2*s for d.\"\>", 
   ",", "\<\"Solve -c + 15 = 5*j, -35*j + 28 = -4*c - 33*j for c.\"\>", 
   ",", "\<\"0\"\>", 
   ",", "\<\"Solve 0 = 2*b + 4*r + 10, -3*r - 26 = b - 16 for b.\"\>", 
   ",", "\<\"Solve -13*n = -2*k - 4, 3085*k = 3083*k + 2*n - 26 for k.\"\>", 
   ",", "\<\"2\"\>", 
   ",", "\<\"Solve f = -n - 6, -6 = 5*f - 26 + 75 for n.\"\>", 
   ",", "\<\"2\"\>", 
   ",", "\<\"Solve 66*p - 65*p + 16 = 5*l, -3*p - l + 16 = 0 for p.\"\>", 
   ",", "\<\"85\"\>", 
   ",", "\<\"Solve 3*b - 3*o = 54, 10*b - 9*b + 8*o = -9 for b.\"\>", 
   ",", "\<\"0\"\>", 
   ",", "\<\"Solve -3*u = 3*l + 27, -173*u + 5*l - 5 = -168*u for u.\"\>", 
   ",", "\<\"Solve n = -3*i + 5*i - 5, -4*n + 2*i - 8 = 0 for n.\"\>", 
   ",", "\<\"Solve -2*v = -0*v + 2*z - 4, -5*v + 16 = 2*z for v.\"\>", 
   ",", "\<\"5\"\>", 
   ",", "\<\"Solve -2 = i - 5, -2*n - 11*i + 12 = -37 for n.\"\>", 
   ",", "\<\"Solve 2*p - 5*h = -15, -p - 44429*h + 44425*h = -25 for p.\"\>", 
   ",", "\<\"Solve -8 = -w - 12, 5*k = 5*w + 35 for k.\"\>", 
   ",", "\<\"Solve 32 = z + 5*j + 41, -2*z + j + 15 = 0 for z.\"\>", 
   ",", "\<\"Solve 9 = 3*i - 3*v, 15 = -4*i - v + 27 for i.\"\>", 
   ",", "\<\"3\"\>", 
   ",", "\<\"Solve h - 2*s = -5 + 9, 0 = 4*h + 4*s + 32 for h.\"\>", 
   ",", "\<\"Solve 9*g = 5*f - 85, g - 3*f + 8*f - 85 = 0 for g.\"\>", 
   ",", "\<\"4\"\>", 
   ",", "\<\"Solve -q + 23 - 12 = 0, 4*i = 2*q - 38 for i.\"\>", 
   ",", "\<\"Solve -2*g - 5*h - 3 - 10 = 0, h + 6 = 3*g for g.\"\>", 
   ",", "\<\"Solve -12 = 4*w, 2*w = 5*k + w - 28 for k.\"\>", 
   ",", "\<\"Solve 5*i + 7*h - 35 = 0, -4*i + 5*h = -497 + 522 for i.\"\>", 
   ",", "\<\"1\"\>", 
   ",", "\<\"Solve -61*s - 3*d + 15 = -57*s - 14, -3*d + 21 = 0 for s.\"\>", 
   ",", "\<\"Solve 0 = r + 468 - 462, 0 = b + 3*r - 13 + 32 for b.\"\>", 
   ",", "\<\"Solve -4*c + 5*g + 32 = -c, 4 = -2*c - 3*g for c.\"\>", 
   ",", "\<\"2\"\>", ",", "\<\"-12\"\>", 
   ",", "\<\"Solve 0 = -3*r - 4*k + 14, -4512*k = -4*r - 4497*k + 39 for r.\"\
\>", ",", "\<\"Solve 5*z = 0, j + 3*z - 16 = -3*j for j.\"\>", 
   ",", "\<\"Solve t - 5*y = 3 - 6, t + 3*y - 5 = 0 for t.\"\>", 
   ",", "\<\"-5\"\>", ",", "\<\"18\"\>", ",", "\<\"5\"\>", 
   ",", "\<\"Solve -4*k + 20 = 7*w - 3*w, 0 = w + 3*k - 13 for w.\"\>", 
   ",", "\<\"Solve -5*y = 5*c + 45, -2*y - c + 2 = 15 for y.\"\>", 
   ",", "\<\"Solve 5*d + 20 = l + 47, -l + d - 7 = 0 for l.\"\>", 
   ",", "\<\"-26\"\>", 
   ",", "\<\"Solve -5*i - 5*h = -9*h + 17, -4*i - 4*h = 28 for i.\"\>", 
   ",", "\<\"Solve -22 = -5*o - 4 + 2, 0*o - 19 = -5*w - o for w.\"\>", 
   ",", "\<\"Solve 6*a + 45 = x, -18*a + 33 = -21*a - 3*x for a.\"\>", 
   ",", "\<\"Solve d = 2*t + 32 - 31, -11 = -3*t + 4*d for t.\"\>", 
   ",", "\<\"Solve 7*x + 31 = b, -x = 2*b + 3639 - 3641 for x.\"\>", 
   ",", "\<\"Solve w + 18 = -5*n, -3*n + w = -4*n - 2 for n.\"\>", 
   ",", "\<\"8\"\>", 
   ",", "\<\"Solve 5*l + 2*g + 9 = 0, 0*l + 5*l - 546*g + 541*g = -30 for \
l.\"\>", ",", "\<\"Solve 2097*c - 2096*c + 16 = 4*a, 0 = -4*a - 3*c + 16 for \
a.\"\>", ",", "\<\"-5\"\>", 
   ",", "\<\"Solve 141*s = -5*o + 135*s - 88, 46 = 3*o - 4*s for o.\"\>", 
   ",", "\<\"3\"\>", ",", "\<\"3\"\>", 
   ",", "\<\"Solve -6*z = n + 2, -143*z - 2 = -138*z + n for z.\"\>", 
   ",", "\<\"59\"\>", 
   ",", "\<\"Solve -36*a + 31*a - 2*w = -15, -5*w + 6 = 2*a for a.\"\>", 
   ",", "\<\"Solve -5*i + 22 = 3*x, 16*x - 7*x - i - 34 = 0 for x.\"\>", 
   ",", "\<\"0\"\>", 
   ",", "\<\"Solve -5*u + 67 - 112 = -4*n, -n - 15 = 4*u for u.\"\>", 
   ",", "\<\"Solve 4*h + 2 + 4 = -2*k, -3*k = -h - 12 for k.\"\>", 
   ",", "\<\"4\"\>", 
   ",", "\<\"Solve -t - 30*g + 8 = -28*g, 24 = -2*t + 4*g for t.\"\>", 
   ",", "\<\"-1\"\>", ",", "\<\"-3\"\>", 
   ",", "\<\"Solve 5*b = -25, 6 = -i + 2423*b - 2424*b for i.\"\>", 
   ",", "\<\"-3\"\>", 
   ",", "\<\"Solve -g + 2*t = -5, -2*t + 4*t + 4 = 0 for g.\"\>", 
   ",", "\<\"Solve 4*x - 14 = i, 54*x + 3*i + 6 = 57*x for x.\"\>", 
   ",", "\<\"0\"\>", ",", "\<\"-16\"\>", 
   ",", "\<\"Solve -5*f = -0*s + 3*s - 20, 0 = -5*f - 4*s + 25 for f.\"\>", 
   ",", "\<\"-4\"\>", ",", "\<\"-5\"\>", 
   ",", "\<\"Solve 5*v + 3*x = 13, -39*v = 22*x - 20*x - 80 for v.\"\>", 
   ",", "\<\"Solve 4*f - 5 - 2 = n, 4*n - 3*f + 2 = 0 for n.\"\>", 
   ",", "\<\"Solve -j + 0*j + 3*o = 11, 5*o - 13 = -j for j.\"\>", 
   ",", "\<\"30\"\>", 
   ",", "\<\"Solve 8*n = 10*n + 2*z + 2, -2 = -4*n - z for n.\"\>", 
   ",", "\<\"5\"\>", ",", "\<\"-4\"\>", ",", "\<\"-30\"\>", 
   ",", "\<\"Solve -3*b = q - 13 + 2, 8 = 3*b + 4*q for b.\"\>", 
   ",", "\<\"Solve 2*u - 3*q - 239 = -236, 4*q + 4 = -4*u for u.\"\>", 
   ",", "\<\"-4\"\>", 
   ",", "\<\"Solve -9*h - 3 = 15, -5*y - h = -18 for y.\"\>", 
   ",", "\<\"Solve 5*o - x + 14 = 0, 9*o = 11*o + x for o.\"\>", 
   ",", "\<\"Solve 2*g + 17 = 3*b, 372*b + 3*g = 369*b + 12 for b.\"\>", 
   ",", "\<\"Solve 3 = 3*k - t - 2, 3 = -k + 5*t for k.\"\>", 
   ",", "\<\"Solve -5*a = 4*r - 7, r - 5*a + 62 = 70 for r.\"\>", 
   ",", "\<\"Solve 4*r - 2*i = 49 - 43, -3*r - 12 = 4*i for r.\"\>", 
   ",", "\<\"Solve 0 = -2*w + 6, -q - 4360*w - 20 = -4365*w for q.\"\>", 
   ",", "\<\"4\"\>", ",", "\<\"5\"\>", 
   ",", "\<\"Solve -15*r = -12*r + 2*p - 24, 52 = 4*r - 4*p for r.\"\>", 
   ",", "\<\"Solve 7 = -3*r - 3*s + 5*s, -3*r + 7 = 2*s + 18 for r.\"\>", 
   ",", "\<\"Solve 0 = i + 3*s - 18 + 1, 2*i + 6 = 4*s for i.\"\>", 
   ",", "\<\"Solve 5*j - 9*j + 8 = 0, -4*j + 13 = k for k.\"\>", 
   ",", "\<\"Solve k - 7 = l, -45*l - 8 = -2*k - 41*l for k.\"\>", 
   ",", "\<\"Solve 2*i = 4*o + 6, 0 = -2*o - 363*i + 362*i - 1 for o.\"\>", 
   ",", "\<\"Solve -15*j = -15, -j - 69 + 28 = -3*n for n.\"\>", 
   ",", "\<\"-17\"\>", ",", "\<\"-1\"\>", 
   ",", "\<\"Solve -5*n - 4313 = 3*x - 4316, 0 = -n - 4*x + 4 for n.\"\>", 
   ",", "\<\"Solve -4*u = 7*p - 6*p + 31, -5*p = -11*u - 62 for p.\"\>", 
   ",", "\<\"Solve -2*v - 2*h = -3*h - 8, 2*v - 3*h = 12 for v.\"\>", 
   ",", "\<\"Solve -2*b - 10*p + 7*p + 3 = 0, 5*p = -2*b + 1 for b.\"\>", 
   ",", "\<\"-6\"\>", ",", "\<\"2\"\>", 
   ",", "\<\"Solve -q = -34*y - 65, -q + 3*y = -0 - 3 for q.\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.877889749389336*^9, 3.877889780108269*^9}},
 CellLabel->"Out[32]=",ExpressionUUID->"58e50a80-17e4-440b-8b75-b784ccf15c1a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedNet", "[", 
  RowBox[{
   RowBox[{"bert", "[", 
    RowBox[{"\"\<Solve 3x **  minus 11x minus 13 equals 0\>\"", ",", " ", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}], ",", " ", 
   RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877874941889069*^9, 3.8778751096951284`*^9}, {
   3.87787515811155*^9, 3.8778751771383367`*^9}, {3.8778752099367075`*^9, 
   3.8778752272721024`*^9}, {3.8778752591156597`*^9, 3.877875266851926*^9}, {
   3.8778753804720926`*^9, 3.877875381208109*^9}, {3.8778763381403933`*^9, 
   3.877876413299713*^9}, {3.8778973642363677`*^9, 3.8778973762072787`*^9}, 
   3.877897948050848*^9, {3.8778979836821156`*^9, 3.877897983954115*^9}, {
   3.8778981267633686`*^9, 3.8778981567153587`*^9}, {3.87789880497901*^9, 
   3.8778988060500755`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"df83bdce-7ed8-4b47-92b9-74afce65e808"],

Cell[BoxData["\<\"arithmetic__mixed\"\>"], "Output",
 CellChangeTimes->{{3.8778749590551815`*^9, 3.8778749703041444`*^9}, {
   3.877875003002527*^9, 3.8778750315937223`*^9}, {3.8778750917010145`*^9, 
   3.8778751117331796`*^9}, {3.8778751614299674`*^9, 
   3.8778751776682563`*^9}, {3.8778752141236935`*^9, 3.8778752277765913`*^9}, 
   3.877875267349996*^9, 3.877875381805662*^9, 3.8778764137449408`*^9, 
   3.8778893562177877`*^9, 3.877897377655716*^9, 3.8778979495152283`*^9, 
   3.8778979845578594`*^9, {3.8778981529307804`*^9, 3.8778981580602922`*^9}, 
   3.8778988067132616`*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"8736e4ea-fcb2-4495-ac95-939f80525054"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"TextRecognize", "[", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzs3fufzvXi//t12/t727f94/75PcZhJONQIyPlVCEth2iWkMhhHLPIOaeW
KJYQOZVIooNCIaeiqFSIUBHGWZjvGmN91+fwF+xrr+u27dnpxWVch3nMPO4/
rFu1uK6XeWqa1+N2zaXWgFFdh/xvf/rTn8b9n7H/6Vo4sfXYsYWTn/y/Yn/T
feS4YUNHDh7UYeT4wUMHj31wwP8e+4cr/sef/tT8//jTn/6fv/7vSu2f//zn
//yf//O//uu/Mn0QlVN8wf/8z//M9EFUTi5IF1/wP/7jPzJ9EJXT//pf/8sF
0VyQLrbgP/7xj3/961+ZPojKyQXpXJAutl1swdiOmT6IyskFQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
4O9cunRp165dK1as+Pjjj8+fP5/p49yarYPOBUOsVXS2DjoXpLNW0dk66FyQ
zpsynQvSuWDsI3D48OHVq1ePHTu2Xbt2d911V/RvTZo02bp1a6ZPd2u2Dro7
WfBflVppaWlxcXHsI5Ppg6icXJAutmDsnuWCXPEF//nPf2b6IConF6RzQbr4
gteuXcv0QVROse1cEK1qLlhUVLRp06aXX365R48e9evXj/5IXl7exo0bM33S
W6uaC1Ymse3+8Y9/xP5rWI6fWyxJkiRJkrAOHTq0cuXK4cOHN2/evEaNGn9Y
qGJq1qz50EMPDRs2bOPGjWfPns30qaWbSXo6q1B8ZQ6dC9L52io6X9dB54J0
Lkjna6vofF0HXeVe8MSJEx999NHYsWMffvjhWrVqhQpV48aNn3nmmTlz5nz2
2WcXL17M9KlvT+VesCq4k9dWJf3bEisU37eKznc9onNBOt+3is53PaJzQTrf
M4fOBekq34Jnz57dsGHDpEmT2rZtm5OT84d5Kjc3t3PnzlOmTFm7du3x48fR
b/r0L9+3Cs4FQ6xVdLYOOheks1bR2TroXJCu8t2UqxoXpKscC8a+lv7hhx9e
ffXVzp07X3+b9BsLVdeuXV955ZXdu3fH/sOR6SMnja2DzgVDrFV0tg46F6Sz
VtHZOuhckK5y3JSrMhekQy946dKlzZs3jxs3rmnTptWqVbuxUN19991dunSZ
OXPmzp07r1y5kunzpoStg84FQ6xVdLYOOheks1bR2TroXJAOfVPWf7sgH3HB
Y8eOvfXWW3369PnDP84vJyenU6dO06dP3759++XLlzN92JSzddC5YIi1is7W
QeeCdNYqOlsHnQvSEW/KKssF6UALHjp0aO7cue3bt//Dd6Nq3Ljx0KFD16xZ
c/78+UyfNK1sHXQuGGKtorN10LkgnbWKztZB54J0oJuy/pAL0lX8BY8cOfLa
a6916NDhDyNV69atX3zxxV27dlWmt6K6LbYOOhcMsVbR2TroXJDOWkVn66Bz
QbqKf1PWzbkgXYVd8NixY6+//nqXLl1ufNf03Nzcnj17vvHGG0ePHq2AJ08z
WwedC4ZYq+hsHXQuSGetorN10LkgXYW9KStBLkhX0RY8ceLE8uXLn3zyyTp1
6vwuUtWvX79///4ffvjhxYsXM33MCsTWQeeCIdYqOlsHnQvSWavobB10LkhX
0W7Kul0uSFdBFiwpKfn0008HDBhw4xun161bt3fv3qtXr65qb0iVIFsHnQuG
WKvobB10LkhnraKzddC5IF0FuSmr3FyQLuMLHjhwYPr06U2aNLnxj/br3r37
ihUrzp49m6mzIdg66FwwxFpFZ+ugc0E6axWdrYPOBekyflPWHXJBukwtePbs
2ZUrVxYUFNSuXbtspMrOzn7iiSeWLl16+vTpNB8JytZB54Ih1io6WwedC9JZ
q+hsHXQuSGfroHNBuvQv+N133z3//PONGjX63YupWrRoMW3atEOHDvnb6bbY
OuhcMMRaRWfroHNBOmsVna2DzgXpbB10LkiXtgUvXbr0wQcfdO3a9Xd/xl9u
bm5hYeHGjRuvXLmS6jNUSrYOOhcMsVbR2TroXJDOWkVn66BzQTpbB50L0qVh
wR9//HH69On5+fm/ezHVY489tnDhwlOnTqXuqasCWwedC4ZYq+hsHXQuSGet
orN10Lkgna2DzgXpUrdg7JG3bt3at2/funXr/u7FVEOGDPn8889LSkqS/qRV
kK2DzgVDrFV0tg46F6SzVtHZOuhckM7WQeeCdKlY8Ny5c8uXL2/btm316tXL
dqpHHnlk7ty5RUVFSXwu2TroXDDEWkVn66BzQTprFZ2tg84F6WwddC5Il9wF
Dx06NG3atMaNG5eNVDk5Ob17996wYYPvTJUKtg46FwyxVtHZOuhckM5aRWfr
oHNBOlsHnQvSJWvBL774YvDgwfXq1SvbqZo0aTJ58uSffvrJr3VTx9ZB54Ih
1io6WwedC9JZq+hsHXQuSGfroHNBujtcsLi4eM2aNY8//njNmjXLdqp27dot
WbLk7NmzyT2tbmTroHPBEGsVna2DzgXprFV0tg46F6SzddC5IF25Fzx9+vSS
JUuaN29eNlJVr169Z8+eGzZsKC4uTsVpdSNbB50Lhlir6GwddC5IZ62is3XQ
uSCdrYPOBenKseCRI0deeuml/Pz8sp0qLy9v7NixP/zwg78Z0szWQeeCIdYq
OltHssRuOpcuXTp79mzsf9N563FBOmsVna2DzgXpbB10Lkh3Wwt+++23I0eO
bNiwYdlO1aJFi1deecU/6S9TbB10LhhiraKzdSTLpUuXSktLY38R+9/YX6ft
eV2QzlpFZ+ugc0E6WwedC9IluODnn3/ep0+fu+++u2yn+vOf/7x8+fLz58+n
56j6Q7YOOhcMsVbR2TqSpeybQKbzDSFdkM5aRWfroHNBOlsHnQvS3XzB2P+7
YcOGgoKCnJycsp3qySefXL9+/ZUrV9J8Wt3I1kHngiHWKjpbR7L42iqVj7WK
ztZB54J0tg46F6QLLVhcXPzee++1a9euevXq1yNV7dq1Bw0atHv37viXzaoI
bB10LhhiraKzdSSL71ul8rFW0dk66FyQztZB54J0Ny544cKFZcuWtWjRIisr
63qnatiw4dixY48cOeJXrRWNrYPOBUOsVXS2DjoXpLNW0dk66FyQztZB54J0
ZRc8efLkvHnzmjZtWvab/vLz86dOnXr8+PFMn1R/zNZB54Ih1io6WwedC9JZ
q+hsHXQuSGfroHNBuviCR44cmTFjRn5+ftlO1bx589mzZ/uH/VVwtg46Fwyx
VtHZOuhckM5aRWfroHNBOlsHnQvS/fjjj1OmTGnUqFHZTtWmTZslS5acO3cu
06fTrdk66FwwxFpFZ+ugc0E6axWdrYPOBelsHXQuyHXo0KHJkyfn5eWV7VQd
OnR45513Ll68mOnTKVG2DjoXDLFW0dk66FyQzlpFZ+ugc0E6WwedCxIdOHBg
/Pjx9957b9lO1blz5w8//PDy5cuZPp1uj62DzgVDrFV0tg46F6SzVtHZOuhc
kM7WQeeCLHv37h09enTDhg1/16nWrVtXXFyc6dOpPGwddC4YYq2is3XQuSCd
tYrO1kHngnS2DjoXpPj222+HDx9ev379sp2qW7duH3/88ZkzZ1yQy9ZB54Ih
1io6WwedC9JZq+hsHXQuSGfroHPBiu+77767sVP16NFj27ZtJSUlLkhn66Bz
wRBrFZ2tg84F6axVdLYOOhek86ZM54IV2Y2dKisrq1evXjt37iwtLY3/GBek
s3XQuWCItYrO1kHngnTWKjpbB50L0nlTpnPBium7774bMWJEgwYNrneqatWq
9enTZ/fu3deuXSv7I12QztZB54Ih1io6WwedC9JZq+hsHXQuSOdNmc4FK5rv
v//+ueeeK9upsrKynnnmmRs7VZwL0tk66FwwxFpFZ+ugc0E6axWdrYPOBem8
KdO5YMWxd+/ekSNH3tipdu3a9YedKs4F6WwddC4YYq2is3XQuSCdtYrO1kHn
gnTelOlcsCLYv3//qFGjftepevfu/eWXX96kU8W5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC2bWwYMHx48ff88995T98/569er1xRdfXH8f9ZtzQTpb
B50Lhlir6GwddC5IZ62is3XQuSCdN2U6F8yUw4cPT548OS8vr2ynevrpp8v+
eX+JcEE6WwedC4ZYq+hsHXQuSGetorN10LkgnTdlOhdMv6NHj06fPv2+++4r
26meeuqpHTt23FaninNBOlsHnQuGWKvobB10LkhnraKzddC5IJ03ZToXTKfj
x4///e9/z8/PL9upunXrtm3btpKSkvI9pgvS2TroXDDEWkVn66BzQTprFZ2t
g84F6bwp07lgepw6dWru3LlNmjQp26kKCgo2bNgQ+xx4J4/sgnS2DjoXDLFW
0dk66FyQzlpFZ+ugc0E6b8p0Lphq58+fX7hwYdOmTct2qs6dO69du/bKlSt3
/vguSGfroHPBEGsVna2DzgXprFV0tg46F6TzpkzngqkT++T29ttvN2/evGyn
6tChw/vvv3/58uVkPYsL0tk66FwwxFpFZ+ugc0E6axWdrYPOBem8KdO5YCrE
PqetW7eubdu22dnZ1ztVu3bt3n777YsXLyb3uVyQztZB54Ih1io6WwedC9JZ
q+hsHXQuSOdNmc4Fk27Lli0FBQW1atW63qkefvjhpUuXXrhwIRVP54J0tg46
FwyxVtHZOuhckM5aRWfroHNBOm/KdC6YRLt27erTp0+dOnWud6oHHnhg9uzZ
p0+fTt2TuiCdrYPOBUOsVXS2DjoXpLNW0dk66FyQzpsynQsmxY8//jhmzJiG
DRte71R5eXlTp049ceJEqp/aBelsHXQuGGKtorN10LkgnbWKztZB54J03pTp
XPAOnTlzZs6cOfn5+dc7Vd26dceMGXP06NH0HMAF6WwddC4YYq2is3XQuSCd
tYrO1kHngnTelOlcsNyuXbu2evXqFi1alP0j//r16/fDDz+k8ytDF6SzddC5
YIi1is7WQeeCdNYqOlsHnQvSeVOmc8Hy2b59e5cuXWrWrHm9UxUUFGzevLmk
pCTNJ3FBOlsHnQuGWKvobB10LkhnraKzddC5IJ03ZToXvF2HDx8ePXp0/fr1
r3eqRx555K233rp48WJGzuOCdLYOOhcMsVbR2TroXJDOWkVn66BzQTpvynQu
mLji4uI33njjgQceuN6pGjVq9PLLLxcVFWXwVC5IZ+ugc8EQaxWdrYPOBems
VXS2DjoXpPOmTOeCCdq6dWvHjh2rV69+PVUNGjTop59+yvS5XBDP1kHngiHW
KjpbB50L0lmr6GwddC5I502ZzgVv6ejRo+PGjWvQoMH1TvX4449v2rQp/W9R
9YdckM7WQeeCIdYqOlsHnQvSWavobB10LkjnTZnOBW/uo48+atmy5fVOlZ+f
P3fu3LNnz2b6XP8fF6SzddC5YIi1is7WQeeCdNYqOlsHnQvSeVOmc8GQgwcP
Dh06tG7dutdT1eDBg3/++edMn+v3XJDO1kHngiHWKjpbB50L0lmr6GwddC5I
502ZzgVvFPuMtHLlygcffPB6p2rbtu2HH35YXFyc6aP9AReks3XQuWCItYrO
1kHngnTWKjpbB50L0nlTpnPB3zly5Mizzz579913xztVzZo1x44de/z48Uyf
K8gF6WwddC4YYq2is3XQuSCdtYrO1kHngnTelOlcsKwNGzY8/PDDZd9NfevW
raWlpZk+1824IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC8b99ttvM2fO
zMvLi3eqGjVqTJw48eTJk5k+1625IJ2tg84FQ6xVdLYOOheks1bR2TroXJDO
mzKdC8Z88803Tz75ZI0aNeKp6pFHHlm7dm3sw5LpcyXEBelsHXQuGGKtorN1
0LkgnbWKztZB54J03pTpXHDVqlVl31C9sLDwyJEjmT7UbXBBOlsHnQuGWKvo
bB10LkhnraKzddC5IJ03ZbqqvOCxY8dGjRqVm5sb71T33HPPq6++ev78+Uyf
6/ZU5QUrB1sHnQuGWKvobB10LkhnraKzddC5IJ03Zboqu+CWLVtat259/SVV
TzzxxO7du4kfhyq7YKVh66BzwRBrFZ2tg84F6axVdLYOOhek86ZMVwUXjH3O
efXVV++77754p8rKyho9evTx48czfa5yqoILVjK2DjoXDLFW0dk66FyQzlpF
Z+ugc0E6b8p0VW3Bn376acCAAbVr146nqpYtW7777rvFxcWZPlf5VbUFKx9b
B50Lhlir6GwddC5IZ62is3XQuSCdN2W6KrXgrl27Hnvssevf/denT59Dhw5l
+lB3qkotWCnZOuhcMMRaRWfroHNBOmsVna2DzgXpvCnTVZ0F165d27Jly3in
ysnJefnll8+ePZvpQyVB1VmwsrJ10LlgiLWKztZB54J01io6WwedC9J5U6ar
CgvGvk5bsmRJfn5+PFU1bdp09erVsc88mT5XclSFBSs3WwedC4ZYq+hsHXQu
SGetorN10LkgnTdlukq/4Llz5yZMmFCvXr14qurQocPu3bsr0+ecSr9gpWfr
oHPBEGsVna2DzgXprFV0tg46F6TzpkxXuRc8cOBAz549a9asGU9Vffv2rQRv
VPU7lXvBqsDWQeeCIdYqOlsHnQvSWavobB10LkjnTZmuEi+4ffv2tm3bXn9P
9TFjxpw4cSLTh0q+SrxgFWHroHPBEGsVna2DzgXprFV0tg46F6TzpkxXWRd8
9913mzVrFu9Uubm58+bNu3DhQqYPlRKVdcGqw9ZB54Ih1io6WwedC9JZq+hs
HXQuSOdNma7yLVhaWjpnzpxGjRrFU1XLli3Xr19/9erVTJ8rVSrfglWNrYPO
BUOsVXS2DjoXpLNW0dk66FyQzpsyXSVb8MyZM6NGjapbt248VT3xxBP79u3L
9KFSq5ItWAXZOuhcMMRaRWfroHNBOmsVna2DzgXpvCnTVaYFjxw58swzz1x/
T/VBgwb99NNPmT5UylWmBasmWwedC4ZYq+hsHXQuSGetorN10LkgnTdlukqz
4LffftuxY8esrKx4qpo0adKpU6cyfah0qDQLVlm2DjoXDLFW0dk66FyQzlpF
Z+ugc0E6b8p0lWPBsn/8X+3atefMmVNZ31P9RpVjwarM1kHngiHWKjpbB50L
0lmr6GwddC5I502ZrhIsuG7dulatWsVTVaNGjVasWFFcXJzpQ6VPJViwirN1
0LlgiLWKztZB54J01io6WwedC9J5U6ajL7hy5coHHnggnqpatWq1cePGa9eu
ZfpQaUVfULYOOhcMsVbR2TroXJDOWkVn66BzQTpvynToBRctWnTffffFU1WH
Dh2+/vrrKvglGXpB/betg88FQ6xVdLYOOheks1bR2TroXJDOmzIddMHY540X
X3yxQYMG8VTVo0ePAwcOZPpQmQFdUNfZOuhcMMRaRWfroHNBOmsVna2DzgXp
vCnTERc8d+7c6NGj69atG09VAwYM+OmnnzJ9qIwhLqiybB10LhhiraKzddC5
IJ21is7WQeeCdN6U6XALHjt2rLCwMCcnJ56qRo4c+euvv2b6UJmEW1C/Y+ug
c8EQaxWdrYPOBemsVXS2DjoXpPOmTMda8MCBA127ds3Ozo6nqkmTJp06dSrT
h8ow1oK6ka2DzgVDrFV0tg46F6SzVtHZOuhckM6bMh1owa+++urPf/5zvFPV
rFlz1qxZ58+fz/ShMg+0oP6QrYPOBUOsVXS2DjoXpLNW0dk66FyQzpsyHWXB
bdu2tWnTJp6q6tev/8Ybb1y+fDnTh6oQKAsqxNZB54Ih1io6WwedC9JZq+hs
HXQuSOdNmQ6x4Pr161u1ahVPVU2aNPnggw9KSkoyfaiKArGgbsLWQeeCIdYq
OlsHnQvSWavobB10LkjnTZmu4i/43nvvNW/ePJ6qHn744S1btsT+253pQ1Ug
FX9B3Zytg84FQ6xVdLYOOheks1bR2TroXJDOmzJdBV9wxYoVTZs2jaeqDh06
7Nmzx4vP71TwBXVLtg46FwyxVtHZOuhckM5aRWfroHNBOm/KdBV5wddffz0/
Pz+eqgoKCvbt25fpE1VEFXlBJcLWQeeCIdYqOlsHnQvSWavobB10LkjnTZmu
Yi4Yu93Mnz+/UaNG8VTVs2fPgwcPZvpQFVTFXFCJs3XQuWCItYrO1kHngnTW
KjpbB50L0nlTpquAC167dm3GjBn33HNPPFX169fv8OHDmT5UxVUBF9RtsXXQ
uWCItYrO1kHngnTWKjpbB50L0nlTpqtoC8Y+IUyePLlevXrxVDV48OCff/45
04eq0Cragrpdtg46FwyxVtHZOuhckM5aRWfroHNBOm/KdBVqwcuXLz///PO5
ubnxVDVixIhff/0104eq6CrUgioHWwedC4ZYq+hsHXQuSGetorN10LkgnTdl
uoqz4MWLF8eMGXP33XfHU9W4ceNOnjyZ6UMBVJwFVT62DjoXDLFW0dk66FyQ
zlpFZ+ugc0E6b8p0FWTBc+fOPffcc3Xq1ImnqgkTJhQVFWX2SBQVZEGVm62D
zgVDrFV0tg46F6SzVtHZOuhckM6bMl1FWPDMmTPDhg2766674qlq8uTJp0+f
zuB5WNK/4Pnz51euXLlx48bLly+n7UkrMVsHnQuGWKvobB10LkhnraKzddC5
IF1FaB26Exlf8Ny5c88++2zt2rXjqepvf/vbmTNnMnUYojQvGLt4jh49umbN
mnXq1NmwYUN6nrRys3XQuWCItYrO1kHngnTWKjpbB50L0mW8degOZXbBixcv
jhw58vo3AE6bNu3s2bMZOQlXmhcsLi7u27dvbKycnJyPP/44PU9audk66Fww
xFpFZ+ugc0E6axWdrYPOBemsVXQZXPDKlSvjxo2rW7duPFVNnz793Llz6T8G
XZoXLCoqeuqpp2J7NW/efMeOHel50srN1kHngiHWKjpbB50L0lmr6GwddC5I
Z62iy9SCsSedNGlSbm5uPFVNnTrVV1WVT5oX3L17d/v27WOT9ezZ84cffkjP
k1Zutg46FwyxVtHZOuhckM5aRWfroHNBOmsVXaYWnDlzZoMGDeKpasqUKb6t
ermlecGFCxfed999sdWef/75kydPpudJKzdbB50Lhlir6GwddC5IZ62is3XQ
uSCdtYouIwsuXry4cePG8VQ1YcKEoqKidD57JZPOBWO3ziFDhmRlZcWGmzdv
3pUrV9LwpJWerYPOBUOsVXS2DjoXpLNW0dk66FyQzlpFl/4FV61a9eCDD8ZT
1ciRI48fP562p66U0rngtWvXCgsLY8NlZWW9//77fgGcFLYOOhcMsVbR2Tro
XJDOWkVn66BzQTprFV2aF9y2bVubNm3iqap///5HjhxJz/NWYulc8MqVK336
9Ilt16hRo61bt6bhGasCWwedC4ZYq+hsHXQuSGetorN10LkgnbWKLp0Lnjhx
4i9/+Us8VXXt2tX36E6KdC64d+/ezp07x+br1KnTnj170vCMVYGtg84FQ6xV
dLYOOheks1bR2TroXJDOWkWXzgWnT59er169KIqaNWu2a9euNDxjVZDOBRct
WhR/w7EhQ4b89NNPaXjGqsDWQeeCIdYqOlsHnQvSWavobB10LkhnraJL24L7
9+/v2LFj/IVVCxcu9A26kyWd/w4OHTo0/hbrs2bNunjxYhqesSqwddC5YIi1
is7WQeeCdNYqOlsHnQvSWavo0rbg9T8HcNCgQT///HOqn67qSOe/g7Ht4m+x
vmbNGr/6TRZbB50Lhlir6GwddC5IZ62is3XQuSCdtYoubQsuWLCgUaNGURSN
GDHi119/TfXTVR3pr1UNGzbcvHlzGp6uirB10LlgiLWKztZB54J01io6Wwed
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
YMHSpUuXLVv25ptvvv7667FnWbhw4WuvvTZv3rw5c+a88sor06dPHz9+fOxn
FRYWdu/evWPHjq1atYo9Zt26dWvWrNmgQYOHHnqooKBg4MCBEydOnDt37sqV
Kzdt2vTtt98eP368pKTkJr+u2CPXq1cvdsj58+f/9ttvaft4VjX+O0gX2+4f
//hH7L+G5fi5xZIkSZIkpdjly5f37NmzYMGCESNGdOnS5b777qtRo8Zt9at0
qlatWm5ubsuWLbt37z5mzJjYsT/55JMffvjh/PnzsV/LwIEDYz8g9sMWLVoU
/yeSkivp6axC8ZU5dC5I52ur6HxdB50L0rkgna+tovN1Hal2+fLlgwcPfvzx
x/Pnz58wYcKgQYO6devWtm3bxo0b5+Tk/OE7X2Vc7GDNmjXLzc2N/+1LL730
008/xb/fUEnnv4N0d/LaqqR/W2KF4vtW0fmuR3QuSOf7VtH5rkd0Lkjnux7R
uWBmlZSUFBUV7d+/f8eOHRs3bvzwww9XrVq1bNmyRYsWzZkz5+WXX37hhRfG
jRs3duzY8ePHT5gwYdKkSVOmTPnb3/724osvvvTSSzNmzJg1a9a8efPefvvt
9evXb9++fc+ePYcPHz516lRxcXHsEn3hwoVDhw7FHnzNmjWxx5w6depf//rX
p556qm3bto0aNbqt131lZWXVrFmzbt269957b5MmTVq0aNG6des///nPXbp0
6datW69evQoLC4cMGfLcc8/FDjx58uTp06fHz7ZkyZKlS5e+/vrr8+fPf+WV
V2LHjv0SYr+c2I8cOnRo7GfFfm737t1jj9O+ffvYY8Ye+f7778/Ly8vNzc3J
yYkdMvb/7t27N9Nbpcq/fN8qOBcMsVbR2TroXJDOWkVn66BzQTpbB50L0t3J
grHPvRcvXjxw4MAnn3zy2muvjRo16i9/+Uvjxo2rV6+emhdtlVN2dvZHH32U
9A9dBWHroHPBEGsVna2DzgXprFV0tg46F6SzddC5IF0qFiwuLl65cmWLFi2i
KMrPz3/00Uczm7C6devma6tUYblgiLWKztZB54J01io6WwedC9LZOuhckC5F
Cy5fvrxp06ZRFE2ZMuX06dOxfxL7cvfatWvFxcXnz58vKir65Zdffvzxx717
93711Vc7duzYsmXLxx9/vGbNmlWrVsV+7pIlS+bNmzdr1qxp06ZNnjz5+eef
nzRpUuyv//73v7/66quLFy9etmxZ7EfGfvz69es3b978+eefxx7n+++/P3jw
4M8//3zy5Mlz585dvny5tLS00n+Zbeugc8EQaxWdrYPOBemsVXS2DjoXpLN1
0LkgXYoWnDFjRv369aMomj179m+//ZbcB1dZtg46FwyxVtHZOuhckM5aRWfr
oHNBOlsHnQvSpWjB559/vnbt2lEUvfbaa8XFxcl9cJVl66BzwRBrFZ2tg84F
6axVdLYOOheks3XQuSBdihYcNmxYdnZ2FEWvv/56SUlJch9cZdk66FwwxFpF
Z+ugc0E6axWdrYPOBelsHXQuSJeKBWOfkwcOHBh/h/MVK1Zcu3YtiQ+u37F1
0LlgiLWKztZB54J01io6WwedC9LZOuhckC4VC8a+OiosLIzXqvfee89P0Sll
66BzwRBrFZ2tg84F6axVdLYOOheks3XQuSBdKhaMPWC/fv2iKMrKylq7dm0S
H1k3snXQuWCItYrO1kHngnTWKjpbB50L0tk66FyQLhULXrlypU+fPlEU1alT
Z+PGjUl8ZN3I1kHngiHWKjpbB50L0lmr6GwddC5IZ+ugc0G6VCx48eLF3r17
R1GUl5e3devWJD6ybmTroHPBEGsVna2DzgXprFV0tg46F6SzddC5IF0qFjx7
9uzTTz8dRVHz5s137tyZxEfWjWwddC4YYq2is3XQuSCdtYrO1kHngnS2DjoX
pEvFgidOnOjRo0cURe3atfvqq6+S+Mi6ka2DzgVDrFV0tg46F6SzVtHZOuhc
kM7WQeeCdKlY8MCBA0888UQURd26ddu3b18SH1k3snXQuWCItYrO1kHngnTW
KjpbB50L0tk66FyQLhULbtu27dFHH42iqLCw8PDhw0l8ZN3I1kHngiHWKjpb
B50L0lmr6GwddC5IZ+ugc0G6VCy4cuXKBx98MIqiUaNG/frrr0l8ZN3I1kHn
giHWKjpbB50L0lmr6GwddC5IZ+ugc0G6VCw4Z86ce+65J4qiF1544cyZM0l8
ZN3I1kHngiHWKjpbB50L0lmr6GwddC5IZ+ugc0G6VCw4bty4nJycKIpmz579
22+/JfGRdSNbB50Lhlir6GwddC5IZ62is3XQuSCdrYPOBemSvmDsajlo0KDo
35YsWRJ78GQ9sv6QrYPOBUOsVXS2DjoXpLNW0dk66FyQztZB54J0SV8w9lAD
BgyI16rVq1f7eyPVbB10LhhiraKzddC5IJ21is7WQeeCdLYOOhekS/qCsQcs
LCyMoqh69err169P1sMqxNZB54Ih1io6WwedC9JZq+hsHXQuSGfroHNBuqQv
ePXq1X79+kVRVL9+/U8//TRZD6sQWwedC4ZYq+hsHXQuSGetorN10Lkgna2D
zgXpkr5g7HNy3759oyhq1qzZjh07kvWwCrF10LlgiLWKztZB54J01io6Wwed
C9LZOuhckC7pCx47dqxbt25RFLVv3/6bb75J1sMqxNZB54Ih1io6WwedC9JZ
q+hsHXQuSGfroHNBuqQvuG3btkcffTSKoh49euzfvz9ZD6sQWwedC4ZYq+hs
HXQuSGetorN10Lkgna2DzgXpkr7g66+/np+fH0XR8OHDjx49mqyHVYitg84F
Q6xVdLYOOheks1bR2TroXJDO1kHngnRJX3D8+PE5OTlRFL344otnz55N1sMq
xNZB54Ih1io6WwedC9JZq+hsHXQuSGfroHNBuqQvOGjQoOjfFi9eHHvkZD2s
QmwddC4YYq2is3XQuSCdtYrO1kHngnS2DjoXpEtRrcrKylqzZo1f4qaBrYPO
BUOsVXS2DjoXpLNW0dk66FyQztZB54J0KapVd91114YNG5L1mLoJWwedC4ZY
q+hsHXQuSGetorN10Lkgna2DzgXpUlSrGjVqtHXr1mQ9pm7C1kHngiHWKjpb
B50L0lmr6GwddC5IZ+ugc0G65C54+vTpnj17RlHUqlWrL774IimPqZuzddC5
YIi1is7WQeeCdNYqOlsHnQvS2TroXJAuuQt++umnrVu3jqKoS5cu3333XVIe
Uzdn66BzwRBrFZ2tg84F6axVdLYOOheks3XQuSBdchecNWtWw4YNoygaPnz4
0aNHk/KYujlbB50Lhlir6GwddC5IZ62is3XQuSCdrYPOBemSu+DQoUOzsrKi
KJozZ86lS5eS8pi6OVsHnQuGWKvobB10LkhnraKzddC5IJ2tg84F6ZK74JAh
Q7L+7YMPPvDr2/SwddC5YIi1is7WQeeCdNYqOlsHnQvS2TroXJAuFbUqJyfn
k08+ScoD6pZsHXQuGGKtorN10LkgnbWKztZB54J0tg46F6RL4oKxL2gHDhwY
RVGDBg02b9585w+oRNg66FwwxFpFZ+ugc0E6axWdrYPOBelsHXQuSJfEBY8c
OfKXv/wliqImTZps3779zh9QibB10LlgiLWKztZB54J01io6WwedC9LZOuhc
kC6JC86bNy8vLy+KooKCgu+///7OH1CJsHXQuWCItYrO1kHngnTWKjpbB50L
0tk66FyQLokLjho1qmbNmlEULViwoLi4+M4fUImwddC5YIi1is7WQeeCdNYq
OlsHnQvS2TroXJAuWQvGPg/H37SqRo0a69evT8rZlAhbB50Lhlir6GwddC5I
Z62is3XQuSCdrYPOBemSteC2bdseffTRKIpyc3M3bdqUlLMpEbYOOhcMsVbR
2TroXJDOWkVn66BzQTpbB50L0iVrwenTp9erVy+KohEjRhw7diwpZ1MibB10
LhhiraKzddC5IJ21is7WQeeCdLYOOhekS9aCI0aMqF69ehRFH374obfLdLJ1
0LlgiLWKztZB54J01io6WwedC9LZOuhckC4pCx49erRbt27Rv61duzZZZ1Mi
bB10LhhiraKzddC5IJ21is7WQeeCdLYOOhekS8qCq1atatasWRRFbdu23b17
d7LOpkTYOuhcMMRaRWfroHNBOmsVna2DzgXpbB10LkiXlAWnTp1at27dKIqW
LFkSe7RknU2JsHXQuWCItYrO1kHngnTWKjpbB50L0tk66FyQ7s4XvHr1amFh
YVZWlm9alRG2DjoXDLFW0dk66FyQzlpFZ+ugc0E6WwedC9Ld+YL79u3r3Llz
FEXZ2dnr1q1L4tmUCFsHnQuGWKvobB10LkhnraKzddC5IJ2tg84F6e58wfff
f79FixZRFPXo0WP//v1JPJsSYeugc8EQaxWdrYPOBemsVXS2DjoXpLN10Lkg
3Z0v+PLLL9erVy+KogULFhQXFyfxbEqErYPOBUOsVXS2DjoXpLNW0dk66FyQ
ztZB54J0d7hg7CcOHDgw/qZV77zzjjfu9LN10LlgiLWKztZB54J01io6Wwed
C9LZOuhckO4OFzx69Gi3bt2iKKpevfratWu9V6afrYPOBUOsVXS2DjoXpLNW
0dk66FyQztZB54J0d7jgtm3bHn300SiKOnbsuGfPnuSeTYmwddC5YIi1is7W
QeeCdNYqOlsHnQvS2TroXJDuDhecP39+Xl5eFEV/+9vfzpw5k9yzKRG2DjoX
DLFW0dk66FyQzlpFZ+ugc0E6WwedC9LdyYKxr2CfffbZatWqRVH0+uuvl5SU
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
g84F6axVdLYOOheks3XQuSDdzReMfY06YMCA+Fusv/baa1euXEnz8XRLtg46
FwyxVtHZOuhckM5aRWfroHNBOlsHnQvS3XzB8+fPP/3001EU5eTk+BbrFZOt
g84FQ6xVdLYOOheks1bR2TroXJDO1kHngnQ3X3DWrFkNGzaMoqhbt2779u1L
89mUCFsHnQuGWKvobB10LkhnraKzddC5IJ2tg84F6W6yYOyza58+faIoysrK
Wrx4cexv03883ZKtg84FQ6xVdLYOOheks1bR2TroXJDO1kHngnQ3WXDixIl3
3XVXFEXt2rX7+uuv0382JcLWQeeCIdYqOlsHnQvSWavobB10Lkhn66BzQbrQ
gl988cVjjz0WRVF2dvabb75ZUlKSkePplmwddC4YYq2is3XQuSCdtYrO1kHn
gnS2DjoXpPvDBWOfV/v375+VlRVFUe/evQ8ePJip4+mWbB10LhhiraKzddC5
IJ21is7WQeeCdLYOOheku3HB2GfU5557rkaNGlEU5ebmbty40dtiRWbroHPB
EGsVna2DzgXprFV0tg46F6SzddC5IN3vFox9UTp+/PjatWvH31x91apVXqIr
OFsHnQuGWKvobB10LkhnraKzddC5IJ2tg84F6couWFpaOmzYsPirqmL8cwAR
bB10LhhiraKzddC5IJ21is7WQeeCdLYOOheku77gpUuXCgsLs7Oz46lqwoQJ
RUVFmT6dbs3WQeeCIdYqOlsHnQvSWavobB10Lkhn66BzQbrrC27btq1t27ZR
FFWrVm3atGlnz57N9NGUEFsHnQuGWKvobB10LkhnraKzddC5IJ2tg84F6a4v
+Ntvvw0ZMqRhw4aLFy++fPlyps+lRNk66FwwxFpFZ+ugc0E6axWdrYPOBels
HXQuSOeCdLYOOhcMsVbR2TroXJDOWkVn66BzQTpvynQuSOeCdLYOOhcMsVbR
2TroXJDOWkVn66BzQTpvynQuSOeCdLYOujtZ8F+VWmlpaXFxcewjk+mDqJxc
kC62YOye5YJc8QX/+c9/ZvogKicXpHNBuviC165dy/RBVE6x7VwQzQXpXJAu
tt0//vGP2H8Ny/FziyVJkiRJkqQKI+nprELxlTl0Lkjna6vofF0HnQvSuSCd
r62i83UddC5I54J0d/LaqqR/W2KF4vtW0fmuR3QuSOf7VtH5rkd0Lkjne+bQ
uSCdC9L9y/etgnPBEGsVna2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsV
na2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6Tz
pkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsV
na2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6Tz
pkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsV
na2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6Tz
pkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsV
na2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsVna2DzgXprFV0to5kiX0k
f/vtt2PHju3bt2/Hjh0ff/zx6tWrly5dOm/evBkzZrzwwgvPP//8mDFjhg8f
PnTo0AEDBvTp0+fpp5/u1q1b165dn3zyydhfdO/evUePHk899VTPnj179eoV
+wGDBg0aMWLE+PHjp06dOnPmzPnz57/xxhvvvvvu5s2bv/3229hzXb58ubS0
1AXRvCnTuSCdC9LZOuhcMMRaRWfroHNBOmsVnbUqEcXFxceOHduzZ8/GjRvf
fvvtuXPnTp48ediwYT179mzfvv0DDzxQt27datWqRZlQvXr1Bg0atG7dulev
XuPHj58/f/5HH330zTffnD592i/8ELwp07kgnQvS2TroXDDEWkVn66BzQTpr
FZ21Kib2NdKvv/76zTfffPLJJ8uWLZs5c+bo0aP79OnToUOH+++/PycnJysr
KyMl6g7VqlWradOmBQUFw4YNmzFjxttvv719+/YjR46UlJT4lU/F4U2ZzgXp
XJDO1kHngiHWKjpbB50L0lmr6KpIrYp9FXT06NHdu3evXbt28eLFU6dOHTp0
aNeuXVu2bJmsl0VVr169fv36DzzwwKOPPhp75P79+w8fPvz555+fNm3a7Nmz
Fy1atHTp0hUrVqxevXrNmjXr16/fuHHj1q1bd+zY8cUXX+zcuTP2F59//vn2
7du3bdsW++ebN2/etGlT7LSrVq168803FyxY8Morr7z44osTJ04cNmzY008/
fYev6brnnnsef/zxkSNHLly4MPZcx44di/27nOmVqihvynQuSOeCdLYOOhcM
sVbR2TroXJDOWkVXaWpV7EudM2fOfP/99xs3bly2bNlLL700fPjw7t27P/TQ
Q7m5uXfYo+rUqdO0adP27dv37t37ueeemzZt2qJFi959990tW7Z8++23R48e
vXz5cqY+hrEv8GK/6q+++mrDhg1LliyZMmVKYWHhn//853vvvTc7OzvxX+Nd
d93VunXrgQMHzpw588MPP/zhhx+uXr2akV9RVeNNmc4F6VyQztZB54Ih1io6
WwedC9JZq+hYtaq0tPTEiRNff/312rVrFy5cOHny5AEDBnTq1KlJkyY1atQo
d4zKycmJPUKHDh369OkzevTov//978uXL9+4ceO33357/PjxkpKSivw56iYL
xk7+yy+/7NixY9WqVbFf1IgRI7p27dqsWbOaNWsm8mHJzs5u2rRpz549p0yZ
smLFiu+++85+lQrelOlckM4F6WwddC4YYq2is3XQuSCdtYquAtaq+Kuk9uzZ
s27duoULF06aNKl///7t27fPy8urXr16uXtU06ZNH3/88QEDBkycOHH+/Pnv
vffeZ599dujQoUuXLlWoX/7tKseCsU+5p06d2rFjx9KlS8ePH9+1a9f77rsv
kY9t7MPYrl27UaNGvfXWW99//73xKim8KdO5IJ0L0tk66FwwxFpFZ+ugc0E6
axVdBmtVaWnpsWPHdu7c+c4778ycOXPYsGFdunS5//77y/cqqaysrHvuuadt
27a9evUaPXr0rFmzVq5cuXXr1gMHDly8eLES/xZN1oKXLl367rvv3n333WnT
pvXp06dFixa3fAlW7dq1jVd3zpsynQvSuSCdrYPOBUOsVXS2DjoXpLNW0aWn
Vv3222979+5du3btq6+++txzzz3xxBP5+fnleKFUjRo1Gjdu3LFjx8LCwkmT
Ji1YsODDDz/cvXv38ePHq+ybhKduwdLS0iNHjnzyySdz584dPHhwy5Ytb96v
ysarffv2xX560o9UKXlTpnNBOheks3XQuWCItYrO1kHngnTWKrpUtI6TJ09u
27Zt8eLFo0eP7tKlS8OGDW/rTc7jr5J67LHH+vXrN3HixIULF65du/abb74p
KiryK5kbpfPVcRcvXvzyyy8XLVo0ZMiQW8ar2O5PP/30vHnzvv7665KSkjQc
D8qbMp0L0rkgna2DzgVDrFV0tg46F6SzVtHdeeuIfYGxd+/ed955Z8KECU88
8UTdunWzsrISfKFUkyZNunTpMmzYsJkzZ8YeYceOHceOHauyr5Iqnwx+L2c8
Xi1cuHDw4ME3/87BevXqdevWbfbs2bEfH/sNk/6jVmTelOlckM4F6WwddC4Y
Yq2is3XQuSCdtYquHK3jzJkz27dvX7BgwdChQx9++OFE/oC5u++++5FHHunb
t+8LL7ywfPnyzz777Ndff/XLkqSoOO+Tf+HChS+++CIer5o0aZKdnR36zVBQ
UDBz5szPP/88dvJMnzrzvCnTuSCdC9LZOuhcMMRaRWfroHNBOmsVXSKt48yZ
M1u3bp09e3bfvn0Teb+pvLy8goKCMWPGvP7665999tmpU6e8BaROxalVv3P0
6NF33333ueeea968eeid82vXrt2pU6dp06bt3Lmzyr7mypsynQvSuSCdrYPO
BUOsVXS2DjoXpLNW0f1h6zh16tTmzZtfeeWVPn365Ofnh14kExf7f1u2bDlw
4MBXX311y5Ytp0+f9vdDOlXYWlXW8ePH16xZM3bs2Ju8GC8vL2/AgAErV66M
/RaqUv9R8KZM54J0Lkhn66BzwRBrFZ2tg84F6axVdPHWcf78+Z07d86bN69/
//63zFN169bt1KnTuHHj3nrrrT179ly9ejXTv4gqDVGryjp16tT69esnTJjQ
tm3bWrVq/eHvsccee2zGjBlfffVVVXh7dm/KdC5I54J0tg46FwyxVtHZOuhc
kM5aBXX16tW9e/cuW7Zs2LBhrVq1uvl7T+Xm5nbu3HnixInvvffeoUOHfBf0
CgVXq8o6d+7cpk2bJkyY0Lx58z/8DtPGjRsPGTLk/fffP3/+fGX9as2bMp0L
0rkgna2DzgVDrFV0tg46F6SzVoEcPXp0zZo1EydO7NixY05Ozk3yVP369bt0
6TJp0iTzVMWHrlVl/fjjj4sWLerevXudOnVu/D1ZvXr1Tp06vfLKK99//31p
aWmmD5tM3pTpXJDOBelsHXQuGGKtorN10LkgnbWqIvu/2bvv96rLfN///8dN
Cx1pAaRIgFCCOjQRBCtYQFEsCFiwIXaRpqAzY0FUGLDMAAIqgmgQkSI1gAQ0
lFCuocy1f9h/wXd99/JEBrhDCEk+67nW8/HDuc7Ze4R7fGng/TxJOHHixHff
fTdr1qw777wzPz+/fv36sTyVl5d37bXXTpo0acGCBdu2bTNPgWRNrapw9OjR
f/3rXxMnTuzSpctFvyi1oKDgqaee+v7777Pjq1C9lOlckM4F6WwddC4YY62i
s3XQuSCdtSrTlJSULFq06PHHH7/uuuti3xQorUePHuPGjXvzzTe/+eabnP3j
2LJA9tWqc23evHnWrFk33nhjs2bNLvrP8DPPPFNcXIzOVl7KdC5I54J0tg46
F4yxVtHZOuhckM5albhTp06lrvU5c+bceeed7du3r+QTqFL/21tvvfX1119f
tWrV0aNH0//eZXfryAU5smBZWdmnn3760EMPtWvXrl69euf9s92zZ89nn312
/fr1xC8S9FKmc0E6F6SzddC5YIy1is7WQeeCdNaqRPz+++/Lly9//vnnhwwZ
0rRp01ieql+/ft++fR999NEFCxbs2LHjol/flyOtI4vl2oKpf4xXr149efLk
du3aXfjPfK9evZ577rkNGzaAspWXMp0L0rkgna2DzgVjrFV0tg46F6SzVtWZ
nTt3LliwYMKECal7vFGjRrFClZ+ff/vtt7/xxhupi/7kyZOX/AUu11pH9snZ
Bc+ePfv1119PmjSpbdu2F/6LUFhY+Pzzz//000+Zn628lOlckM4F6WwddC4Y
Y62is3XQuSCdtar2pP7epm7tuXPn3nXXXe3atavkS/x69er1yCOPfPjhhzt3
7rzcX+tztnVkDRc8ffr0V1999eijj140W/Xv33/27Nm//fZbxv5mz0uZzgXp
XJDO1kHngjHWKjpbB50L0lmratbJkyfXrFnz+uuvjxw58qLfVjot9b8aMmTI
1KlTly5deuTIkSv5N8jWQeeCFU6dOrVq1aoJEyZcmK2aNm161113pf59Sf0r
lvQzz+elTOeCdC5IZ+ugc8EYaxWdrYPOBemsVVfu8OHDX3755fPPPz948OAm
TZrEClWHDh1Gjx49Z86cH374oQb/BDRbB50LXujUqVMrV6585JFH2rRpc96/
RwUFBdOmTduxY0fmXKZeynQuSOeCdLYOOheMsVbR2TroXJDOWlU9Bw4c+PTT
T5944ol+/frl5eXFClXqsn7wwQfnz59fjS/xqyJbB50LVuLo0aMLFy686Gcq
Dhs2bMGCBeXl5Um/0UsZzwXpXJDO1kHngjHWKjpbB50L0lmrqu7XX39dvHjx
pEmTCgsLK/k26X379n3sscdS/8kDBw7Uwd9YWwedC1bFL7/88tJLL3Xu3Lle
vXrn/uuWn58/ceLE4uLiBL8Zu5cynQvSuSCdrYPOBWOsVXS2DjoXpLNWVW7v
3r0LFy589NFHe/ToEStUeXl5AwYMePbZZ5ctW3b06NE6/tfB1kHnglV39uzZ
5cuXjxkzplWrVuf9a3j99dfPmzfv0KFDdf8qL2U6F6RzQTpbB50Lxlir6Gwd
dC5IZ626UElJyccff/zwww937969YcOGFy1UzZs3HzZs2Kuvvrp69epTp04l
+FpbB50LVsPevXvfeuutoqKi8xpyhw4dnn766d27d9fl308vZToXpHNBOlsH
nQvGWKvobB10LkhnrUrbs2dPulB17do1Vqhatmw5YsSI6dOnr1u3rga/TfoV
snXQueCV+P777ydOnHjenyGYl5d3zz33rFmzpm7+PfVSpnNBOheks3XQuWCM
tYrO1kHngnS5XKt+/fXXRYsWTZgwoZLPoWrTps0tt9wyc+bMmv2D/GqQrYPO
Ba/c4cOH33///Wuvvfa8T7UaOnToJ598cuzYsVr92b2U6VyQzgXpbB10Lhhj
raKzddC5IF2u1arS0tIlS5ZMmjSpZ8+ese9D1bZt29tvv3327Nk//vhjgt+6
uYpsHXQuWINWrVo1atSo5s2bn/tvdGFh4cyZM8vKymrpJ/VSpnNBOheks3XQ
uWCMtYrO1kHngnS5UKt+++23zz///PHHH+/du3esULVp0+a2226bPXv2hg0b
Mr9QncvWQeeCNW7jxo2PPfbYeV8e2K5du9T/cNu2bTV+0nop07kgnQvS2Tro
XDDGWkVn66BzQbpsrVWpXzS/+eabqVOn9u/fPy8vL/Z9qG6++eYZM2YUFxez
CtW5bB10LlhL9u3bl/q3++qrrz733/oGDRqMGjVq9erVNfiFvV7KdC5I54J0
tg46F4yxVtHZOuhckC7LatWWLVvmzp176623NmvW7KKFKvU/Hz58eKZ9p/Qr
Yeugc8Falfp7u3DhwkGDBjVu3PjcDwWpjxJff/11jfyBnl7KdC5I54J0tg46
F4yxVtHZOuhckC4LalVpaemiRYsefPDBTp061a9f/8JC1aRJkxtuuOGVV15Z
u3ZtdhSqc9k66Fywbqxevfqee+5p2bLluR8cbrnllq+++uoKm5WXMp0L0rkg
na2DzgVjrFV0tg46F6SD1qrUmy/5hX59+/Z96qmnvvzyy9QvoEm/txbZOuhc
sC5t2bJl8uTJbdq0Oa9ZrVq1qtrNykuZzgXpXJDO1kHngjHWKjpbB50L0rFq
1ebNm998883UaRn7Qr+OHTved999CxYsKC0tpfyXukK2DjoXrHtbt26twWbl
pUzngnQuSGfroHPBGGsVna2DzgXpMr9W7d+/f+HChQ8++GDHjh0v+oV+TZs2
HT58+MyZMzdu3Hj27Nmk31vXbB10LpiUrVu3Pv744+c1q9tvv339+vWpD4xV
/3G8lOlckM4F6WwddC4YY62is3XQuSBdZtaqii/0KyoqqvwL/VasWJHdX+h3
SbYOOhdM1i+//HJes2rYsOHDDz/866+/VvFH8FKmc0E6F6SzddC5YIy1is7W
QeeCdBlVqy75hX6dOnUaN27cRx99lDtf6HdJtg46F8wEv/zyyxNPPNG2bduK
jzbt27d/+eWXf//990v+tV7KdC5I54J0tg46F4yxVtHZOuhckC7xWpX+Qr/x
48d36NDhol/o16xZs5tuumnWrFm5+YV+l2TroHPBzLFhw4Z77723RYsWFR9/
CgsL33333fLy8kr+Ki9lOhekc0E6WwedC8ZYq+hsHXQuSJdIrTp58uRXX331
3HPPVf6Ffk8//fTKlStz/Av9LsnWQeeCmSb1YeeGG24490NT6v+5bNmy2Mci
L2U6F6RzQTpbB50Lxlir6GwddC5IV5e1atOmTXPmzBk5cmQlX+iX/hP9Dhw4
4PFeRbYOOhfMQKnfeH/yySfXXHPNuR+gHnjggX379l34H/ZSpnNBOheks3XQ
uWCMtYrO1kHngnS1Xauq8oV+I0aMmDVr1s8//+wX+lWDrYPOBTPW4cOHZ86c
2bFjx4qPV926dXvnnXfO+8JAL2U6F6RzQTpbB50Lxlir6GwddC5IVxu1KvUD
fv3115V/oV+/fv2eeeYZv9Dvytk66Fwww+3atWvSpEmtW7eu+PB12223bdy4
seI09lKmc0E6F6SzddC5YIy1is7WQeeCdDVYq0pLSxcsWHD33Xc3b978ooXq
6quvvv/++z/++OODBw96m9cUWwedCyJ8+eWXRUVFFZ8g2qpVq2nTpqX/xEAv
ZToXpHNBOlsHnQvGWKvobB10Lkh35bVqy5Yts2bNGjx4cOPGjWNf6Dd79uxN
mzb5hX61wdZB54IU5eXl06dP79ChQ8XHtwEDBixbtuz48eNeymi2DjoXpLN1
0LlgjLWKztZB54J01atVqb9q9erVTz/9dI8ePRo2bOgX+iXI1kHngizFxcW3
3nprkyZN0h/r6tev//jjj+/atctLmcvWQeeCdLYOOheMsVbR2TroXJDusmrV
4cOHlyxZcv/997dq1erCQtWoUaObbrpp7ty5Hm51ydZB54I4qV/yPvzwwy5d
ulR89LvhhhuKi4v9uAdl66BzQTpbB50Lxlir6GwddC5IV5VatWvXrrfffnvE
iBFNmza9MFK1a9fuvvvuW7Ro0bFjx/xoXPdsHXQuCJX6wPjAAw+0aNEi/ZGw
bdu2s2fPPnLkSNLv0mWzddC5IJ2tg84FY6xVdLYOOhekq6RWrV+//sUXX4z9
uX49e/acMmXKN998c/r06bp/tirYOuhcEO3999/v3LlzxQfGu+++u6SkJOlH
6fLYOuhckM7WQeeCMdYqOlsHnQvSnVerTpw4sXz58okTJ3bo0KHiT78618CB
A994440tW7ak/sJkX640WwedC9KtW7fuxhtvrKj6PXv2XLRoUWrTpN+lqrJ1
0Lkgna2DzgVjrFV0tg46F6RLL7hnz5758+ePHj26WbNmFxaqFi1ajBo16oMP
Pvjtt9/cOtPYOuhckC614MGDB1988cX27dtXfNh89tlnf//996SfpiqxddC5
IJ2tg84FY6xVdLYOOhdE27Rp0+uvvz5w4MDGjRtfGKm6dOkyYcKEpUuX+uf6
ZTJbB50L0lVcysuXL+/Vq1fFh9D77rtvz549Sb9Ol2broHNBOlsHnQvGWKvo
bB10LoiTmuybb76ZMmVK9+7dGzZseGGk6t+//wsvvFBcXHz27NmkH6tLs3XQ
uSDduZfyvn37xo8fX/Gt14cNG7Zt27akH6hLsHXQuSCdrYPOBWOsVXS2DjoX
pCgrK/vHP/5x3333tWzZ8sJClZeXN3LkyLfffrukpMTf77HYOuhckO68Szn1
/3zjjTfy8/PTH12vv/76H3/80V8lM5mtg84F6WwddC4YY62is3XQuWCG27Fj
x7x582666aamTZteGKnat28/duzYDz/8sLy83A+kULYOOheku+il/PHHH3fr
1i39kbZXr16rVq3yT6bIWLYOOheks3XQuWCMtYrO1kHnghko9SGxuLj4hRde
6Nu3b6NGjS6MVKnT6emnn/72229Pnz593p8JKBxbB50L0sUu5c8//7ygoCD9
Ubdr167Lli3zy6szk62DzgXpbB10LhhjraKzddC5YOY4fvz40qVLJ0yY0L59
+3r16l0YqQYPHjxz5sytW7ee+//Fb62is3XQuSBdJZfyqlWrCgsL0x+BO3fu
/MUXX5w5c6buX6jK2TroXJDO1kHngjHWKjpbB50LZoh333333D88vUKrVq1G
jx49f/78srKyi85kraKzddC5IF3ll/J3333Xt2/f9Afkjh07Llmy5PTp03X8
QlXO1kHngnS2DjoXjLFW0dk66FwwQwwdOrRBgwYVkapbt24TJ05cvnz5qVOn
Kv8LrVV0tg46F6S75KX8ww8/9OvXr+K7BRqsMo2tg84F6WwddC4YY62is3XQ
uWCGePfddwsKCgYMGPDSSy+tX7++6t8dxVpFZ+ugc0G6qlzKqQ/LRUVF6WDV
qVOnf/7zn35JYOawddC5IJ2tg84FY6xVdLYOOheks1bR2TroXJCuipfyhg0b
+vfvnw5WXbp0Wb58ud90PUPYOuhckM7WQeeCMdYqOlsHnQvSWavobB10LkhX
9Uu5uLi44jOsrrnmmlWrVvl7+0xg66BzQTpbB50Lxlir6GwddC5IZ62is3XQ
uSDdZV3K69atq/geVj179lyzZo3TJ87WQeeCdLYOOheMsVbR2TroXJDOWkVn
66BzQbrLvZTXrFnTp0+fdLAqKirauHFjrT5Pl2TroHNBOlsHnQvGWKvobB10
LkhnraKzddC5IF01LuWvv/66d+/e6WA1aNCgLVu21N7zdEm2DjoXpLN10Llg
jLWKztZB54J01io6WwedC9JV71JetmxZr1690sFq+PDh27Ztq6Xn6ZJsHXQu
SGfroHPBGGsVna2DzgXprFV0tg46F6Sr9qX86aefFhQUpIPVHXfcsXPnztp4
ni7J1kHngnS2DjoXjLFW0dk66FyQzlpFZ+ugc0G6K7mUP/roo65du6aD1bhx
4/bu3Vvjz9Ml2TroXJDO1kHngjHWKjpbB50L0lmr6GwddC5Id4WX8t/+9rer
r746HawmTZpUWlpas8/TJdk66FyQztZB54Ix1io6WwedC9JZq+hsHXQuSHfl
l/KMGTPat2+fDlZTp04tKyurwefpkmwddC5IZ+ugc8EYaxWdrYPOBemsVXS2
DjoXpKuRS/mFF15o3bp1OljNmDGjvLy8pp6nS7J10Lkgna2DzgVjrFV0tg46
F6SzVtHZOuhckK5GLuXUjzBp0qQWLVqEEJo2bfrBBx+k/qmoqReqcrYOOhek
s3XQuWCMtYrO1kHngnTWKjpbB50L0tXUpfz777+PHj06Ly8vhNCpU6dly5al
Pj7XyAtVOVsHnQvS2TroXDDGWkVn66BzQTprFZ2tg84F6WrwUt6xY8fAgQPr
1asXQujdu/eGDRv8LW4dsHXQuSCdrYPOBWOsVXS2DjoXpLNW0dk66FyQrmYv
5eLi4qKiovQ3sBoyZMjWrVtr5IdVJWwddC5IZ+ugc8EYaxWdrYPOBemsVXS2
DjoXpKvxS3nFihWFhYXpYHXnnXfu2rWrpn5kXZStg84F6WwddC4YY62is3XQ
uSCdtYrO1kHngnS1cSkvWrTommuuSQerCRMm7N+/vwZ/cJ3H1kHngnS2DjoX
jLFW0dk66FyQzlpFZ+ugc0G6WrqU582b17Fjx3Swev7558vKymr2x1cFWwed
C9LZOuhcMMZaRWfroHNBOmsVna2DzgXpau9Sfumll9q0aZMOVrNnzz527FiN
/xT6X1sHnwvS2TroXDDGWkVn66BzQTprFZ2tg84F6WrvUj516tSjjz7avHnz
EELr1q2XLFly5syZGv9ZZOugc0E6WwedC8ZYq+hsHXQuSGetorN10LkgXa1e
yqWlpbfcckvDhg1DCD169Pjhhx/8TW+Ns3XQuSCdrYPOBWOsVXS2DjoXpLNW
0dk66FyQrrYv5U2bNl133XXprwccMmTI1q1ba+knylm2DjoXpLN10LlgjLWK
ztZB54J01io6WwedC9LVwaX81Vdf9e7dOx2s7rrrrt27d9fez5WDbB10Lkhn
66BzwRhrFZ2tg84F6axVdLYOOhekq5tLedGiRddcc006WE2cOLG0tLRWf7qc
Yuugc0E6WwedC8ZYq+hsHXQuSGetorN10LkgXZ1dynPnzu3YsWM6WL3yyiuH
Dx+u7Z8xR9g66FyQztZB54Ix1io6WwedC9JZq+hsHXQuSFeXl/K0adNat24d
QsjLy3vvvfdS/+TUwU+a9WwddC5IZ+ugc8EYaxWdrYPOBemsVXS2DjoXpKvL
S/nYsWPjxo1r0qRJCKFz585ff/21F/qVs3XQuSCdrYPOBWOsVXS2DjoXpLNW
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
Y9LP+ZML0rkgna2DzgVjrFV0tg46F6SzVtHZOuhckM5LuYoWLlzYvXv3EMI9
99yze/fupJ/zJxekc0E6WwedC8ZYq+hsHXQuSGetorN10LkgnZdyFb300ktt
2rQJIbzwwguHDh1K+jl/ckE6F6SzddC5YIy1is7WQeeCdNYqOlsHnQvSeSlX
0ZgxYxo0aBBC+Pjjj8+ePZv0c/7kgnQuSGfroHPBGGsVna2DzgXprFV0tg46
F6TzUq6K/fv3p7/Fert27dasWZP0c/6LC9K5IJ2tg84FY6xVdLYOOheks1bR
2TroXJDOS7kqVq5c2adPnxDC4MGDN2/enPRz/osL0rkgna2DzgVjrFV0tg46
F6SzVtHZOuhckM5LuSpefvnl9Detmjx5cmlpadLP+S8uSOeCdLYOOheMsVbR
2TroXJDOWkVn66BzQTov5Us6efLkzTffHP5Ppn3Tqv91QT4XpLN10LlgjLWK
ztZB54J01io6WwedC9J5KV/S8uXLCwsLQwh9+vT58ccfk37O+VyQzgXpbB10
LhhjraKzddC5IJ21is7WQeeCdF7Kl/TUU0+1bNkyhPD4448fOHAg6eeczwXp
XJDO1kHngjHWKjpbB50L0lmr6GwddC5I56VcuR07dgwaNCiE0KhRo2XLlmXg
bxhckM4F6WwddC4YY62is3XQuSCdtYrO1kHngnReypV76623OnbsGEK4+eab
t23blvRzLsIF6VyQztZB54Ix1io6WwedC9JZq+hsHXQuSOelXIkjR44MHz48
/f3V582bd+LEiaRfdBEuSOeCdLYOOheMsVbR2TroXJDOWkVn66BzQTov5Uos
XLjwmmuuCSH079//p59+Svo5F+eCdC5IZ+ugc8EYaxWdrYPOBemsVXS2DjoX
pPNSjkn9+nLXXXc1aNAghPDCCy8cOnQo6RddnAvSuSCdrYPOBWOsVXS2DjoX
pLNW0dk66FyQzks55osvvujZs2cIoWvXrt9//33Sz4lyQToXpLN10LlgjLWK
ztZB54J01io6WwedC9J5KV9U6jfn48ePz8vLCyFMmTLl4MGDSb8oygXpXJDO
1kHngjHWKjpbB50L0lmr6GwddC5I56V8UV9++WVhYWEIIT8//7vvvkv6OZVx
QToXpLN10LlgjLWKztZB54J01io6WwedC9J5KV/Uww8/3KRJkxDCpEmTSktL
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
tYrO1kHngnTWKjpbB50L0mXIpXzkyJEHH3ywWbNm6e+s/vrrrx89ejTZJ1Fk
yIKqNheks3XQuWCMtYrO1kHngnTWKjpbB50L0mXCpXz8+PEJEyY0b948nape
fvnlw4cPJ/gelkxYUFfCBelsHXQuGGOtorN10LkgnbWKztZB54J0iV/KqX9+
Jk+e3KJFi3SqeuGFFw4dOpTUY4gSX1BXyAXpbB10LhhjraKzddC5IJ21is7W
QeeCdMleyidOnJg8eXLLli3Tqer5558vKytL5CVctg46F6SzddC5YIy1is7W
QeeCdNYqOlsHnQvSJXgpHzt2bOLEiRWfVfXss8/+/vvvdf8MOlsHnQvS2Tro
XDDGWkVn66BzQTprFZ2tg84F6ZK6lMvLyydMmFCRqp5++unffvutjt+QHWwd
dC5IZ+ugc8EYaxWdrYPOBemsVXS2DjoXpEvkUj5y5MjDDz9c8W3V/ayqK2Hr
oHNBOlsHnQvGWKvobB10LkhnraKzddC5IF3dX8qHDx8eP358s2bN0qlq6tSp
fq+qK2HroHNBOlsHnQvGWKvobB10LkhnraKzddC5IF0dX8qHDh26//77K1KV
31b9ytk66FyQztZB54Ix1io6WwedC9JZq+hsHXQuSFeXl/KBAwfGjBnTtGnT
dKp64YUXDh06VAc/b3azddC5IJ2tg84FY6xVdLYOOheks1bR2TroXJCuzi7l
vXv33nHHHY0bN06nqhdffNFUVSNsHXQuSGfroHPBGGsVna2DzgXprFV0tg46
F6Srm0t5x44dI0aMaNiwYTpVvfLKK4cPH67VnzF32DroXJDO1kHngjHWKjpb
B50L0lmr6GwddC5IVweX8pYtWwYPHly/fv0QQqNGjWbOnFleXl57P12usXXQ
uSCdrYPOBWOsVXS2DjoXpLNW0dk66FyQrrYv5R9//LF///7pT6lq1qzZvHnz
jh8/Xks/V26yddC5IJ2tg84FY6xVdLYOOheks1bR2TroXJCuVi/ldevW9evX
L52qWrdu/cEHH5w8ebI2fqJcZuugc0E6WwedC8ZYq+hsHXQuSGetorN10Lkg
Xe1dyqtXr+7Tp086VeXn53/yySepn6jGfxbZOuhckM7WQeeCMdYqOlsHnQvS
WavobB10LkhXS5fysmXLevbsmU5VXbp0+eKLL06fPl2zP4XSbB10Lkhn66Bz
wRhrFZ2tg84F6axVdLYOOhekq41LefHixd27d0+nqoKCghUrVqQ+Vtfgj69z
2TroXJDO1kHngjHWKjpbB50L0lmr6GwddC5IV+OX8vz587t06ZJOVUVFRevW
rfMMr1W2DjoXpLN10LlgjLWKztZB54J01io6WwedC9LV7KX8zjvvdOrUKZ2q
Bg8evGXLlhr5YVUJWwedC9LZOuhcMMZaRWfroHNBOmsVna2DzgXpavBSnjlz
Zn5+fjpVjRw5cvv27Vf+Y+qSbB10Lkhn66BzwRhrFZ2tg84F6axVdLYOOhek
q5FL+ezZs9OmTWvTpk06VY0ePXrXrl019UJVztZB54J0tg46F4yxVtHZOuhc
kM5aRWfroHNBuiu/lMvLyydPntyyZct0qho3btzevXtr8IWqnK2DzgXpbB10
LhhjraKzddC5IJ21is7WQeeCdFd4Kf/6669jxoxp2rRpOlVNnDixtLS0Zl+o
ytk66FyQztZB54Ix1io6WwedC9JZq+hsHXQuSHcll/LWrVuHDx/esGHDdKp6
6qmnfvvttxp/oSpn66BzQTpbB50Lxlir6GwddC5IZ62is3XQuSBdtS/lH374
oaioKN2p6tWr9/LLLx8+fLg2XqjK2TroXJDO1kHngjHWKjpbB50L0lmr6Gwd
dC5IV71LecWKFYWFhelU1apVq7fffvv48eO19EJVztZB54J0tg46F4yxVtHZ
OuhckM5aRWfroHNBumpcykuWLOnevXs6VXXu3Pkf//hH6keovReqcrYOOhek
s3XQuWCMtYrO1kHngnTWKjpbB50L0l3upfz+++937tw5nap69+799ddfpz4O
1+oLVTlbB50L0tk66FwwxlpFZ+ugc0E6axWdrYPOBeku61KeM2dOhw4d0qlq
0KBBP//8s7+JTZytg84F6WwddC4YY62is3XQuSCdtYrO1kHngnRVvJRT/5mp
U6e2adMmnapuueWWHTt21M0LVTlbB50L0tk66FwwxlpFZ+ugc0E6axWdrYPO
BemqcikfPHhw/PjxzZs3T6eqsWPH7tmzp64eqEuwddC5IJ2tg84FY6xVdLYO
Oheks1bR2TroXJDukpfyL7/8MnLkyEaNGqVT1cSJE0tLS+vyhaqcrYPOBels
HXQuGGOtorN10LkgnbWKztZB54J0lV/K69at69evX/h/nn/++bKysjp+oSpn
66BzQTpbB50Lxlir6GwddC5IZ62is3XQuSBdJZfy0qVLe/bsme5ULVq0mDt3
7rFjx+r+haqcrYPOBelsHXQuGGOtorN10LkgnbWKztZB54J0sUv5o48+6tq1
azpVdenSZfHixadOnUrkhaqcrYPOBelsHXQuGGOtorN10LkgnbWKztZB54J0
F72U33zzzQ4dOqRTVf/+/deuXetv4zOWrYPOBelsHXQuGGOtorN10LkgnbWK
ztZB54J0513Kp06dmjp1aps2bdKpavjw4du2bUv2haqcrYPOBelsHXQuGGOt
orN10LkgnbWKztZB54J0517KpaWl999/f7NmzdKp6u677969e3fSD9Ql2Dro
XJDO1kHngjHWKjpbB50L0lmr6GwddC5IV3Epb9q06cYbb2zYsGE6VT366KP7
9+9P+nW6NFsHnQvS2TroXDDGWkVn66BzQTprFZ2tg84F6dKX8ooVK3r37h3+
n+eff76srCzpp6lKbB10Lkhn66BzwRhrFZ2tg84F6axVdLYOOhekSy24YMGC
bt26pTtV69at//rXvx4/fjzpd6mqbB10Lkhn66BzwRhrFZ2tg84F6axVdLYO
OhekmzdvXseOHdOpqqCgYOnSpWfOnEn6UboMtg46F6SzddC5YIy1is7WQeeC
dNYqOlsHnQtynT59etq0aRV//N/gwYM3btzoL4g4tg46F6SzddC5YIy1is7W
QeeCdNYqOlsHnQtCpf/4v+bNm6dT1ahRo3bt2pX0o1Qdtg46F6SzddC5YIy1
is7WQeeCdNYqOlsHnQsSbd68eejQoRV//N8DDzywb9++pB+larJ10Lkgna2D
zgVjrFV0tg46F6SzVtHZOuhcEGfVqlWFhYUVf/zfM888s2fPHi9lLlsHnQvS
2TroXDDGWkVn66BzQTprFZ2tg84FWT755JPz/vi/w4cPeymj2TroXJDO1kHn
gjHWKjpbB50L0lmr6GwddC4IMmfOnPz8/HSq6tmz57Jly86cOeOlTOeCdC5I
Z+ugc8EYaxWdrYPOBemsVXS2DjoXRDhy5Mjjjz/eqlWrdKoaOnToli1b0r//
9FKmc0E6F6SzddC5YIy1is7WQeeCdNYqOlsHnQtmvu3bt992222NGzdOp6ox
Y8bs2bOn4n/rpUzngnQuSGfroHPBGGsVna2DzgXprFV0tg46F8xwa9as6dOn
T8X3VH/iiScOHjx47n/AS5nOBelckM7WQeeCMdYqOlsHnQvSWavobB10LpjJ
lixZ0r1793Snatq06axZs44ePXref8ZLmc4F6VyQztZB54Ix1io6WwedC9JZ
q+hsHXQumLHefvvtTp06pVNVt27dlixZkvrd+IX/MS9lOhekc0E6WwedC8ZY
q+hsHXQuSGetorN10LlgBjp+/PgzzzzTunXrdKoaOHDg+vXrYxt5KdO5IJ0L
0tk66FwwxlpFZ+ugc0E6axWdrYPOBTPN9u3bR40a1aRJk3SqSv3fd+/eXcl/
3kuZzgXpXJDO1kHngjHWKjpbB50L0lmr6GwddC6YUVavXt27d++K76k+ceLE
0tLSyv8SL2U6F6RzQTpbB50Lxlir6GwddC5IZ62is3XQuWDm+Pjjj7t161bx
PdWnT59+5MiRS/5VXsp0LkjngnS2DjoXjLFW0dk66FyQzlpFZ+ugc8FMkPpI
OH369Pbt26dT1TXXXBP7nuoX8lKmc0E6F6SzddC5YIy1is7WQeeCdNYqOlsH
nQsmbv/+/ePHj2/evHk6VQ0dOnTTpk1V/3XNS5nOBelckM7WQeeCMdYqOlsH
nQvSWavobB10Lpis4uLiAQMG1K9fP52q7rvvvr17917Wj+ClTOeCdC5IZ+ug
c8EYaxWdrYPOBemsVXS2DjoXTNDnn39eUFBQ8T3Vn3vuubKyssv9QbyU6VyQ
zgXpbB10LhhjraKzddC5IJ21is7WQeeCSXn77bc7deqU7lT5+fnvv//+iRMn
qvHjeCnTuSCdC9LZOuhcMMZaRWfroHNBOmsVna2DzgXr3pEjR5544omrrroq
naquvfbaNWvWVPu32V7KdC5I54J0tg46F4yxVtHZOuhckM5aRWfroHPBOrZ1
69aRI0fm5eWlU9WoUaN27dp1JT+glzKdC9K5IJ2tg84FY6xVdLYOOheks1bR
2TroXLAurVy5slevXhXfqGry5MkHDhy4wh/TS5nOBelckM7WQeeCMdYqOlsH
nQvSWavobB10Llhn5s+f37lz53SnatGixZtvvlleXn7lP6yXMp0L0rkgna2D
zgVjrFV0tg46F6SzVtHZOuhcsA6cPn36xRdfbNu2bTpV9ezZc+nSpWfOnKmR
H9xLmc4F6VyQztZB54Ix1io6WwedC9JZq+hsHXQuWNtKSkrGjBnTrFmzdKq6
6aabtm/fXoM/vpcynQvSuSCdrYPOBWOsVXS2DjoXpLNW0dk66FywVn399deF
hYUV36hq/Pjxv/76a83+FF7KdC5I54J0tg46F4yxVtHZOuhckM5aRWfroHPB
2vP+++9XfKOqhg0bvvTSS4cOHarxn8VLmc4F6VyQztZB54Ix1io6WwedC9JZ
q+hsHXQuWBuOHDkyZcqU1q1bp1PVNddcs3jx4tTvpWvj5/JSpnNBOheks3XQ
uWCMtYrO1kHngnTWKjpbB50L1riNGzcOHz68UaNG6VQ1YsSIbdu21d7vFb2U
6VyQzgXpbB10LhhjraKzddC5IJ21is7WQeeCNevzzz/v3r17xTeqmjhxYmlp
aa3+jF7KdC5I54J0tg46F4yxVtHZOuhckM5aRWfroHPBmpL63fKsWbPy8/PT
nap169Zz584tLy+v7Z/XS5nOBelckM7WQeeCMdYqOlsHnQvSWavobB10Llgj
9u7dO27cuObNm6dT1bXXXvvNN9+kPr7VwU/tpUzngnQuSGfroHPBGGsVna2D
zgXprFV0tg46F7xy3377bd++fevVq5dOVXfffXdJSUmd/exeynQuSOeCdLYO
OheMsVbR2TroXJDOWkVn66BzwSs0f/78Ll26pDtVvXr1nnvuubKysrp8gJcy
nQvSuSCdrYPOBWOsVXS2DjoXpLNW0dk66Fyw2o4dO/bss8+2adMmnaq6du26
cOHC1N/MOn6GlzKdC9K5IJ2tg84FY6xVdLYOOheks1bR2TroXLB6Nm/efPPN
Nzdu3DidqoYNG5b6nyTyi5GXMp0L0rkgna2DzgVjrFV0tg46F6SzVtHZOuhc
sBr++c9/FhQUhP/n4Ycf3r9/f1KP8VKmc0E6F6SzddC5YIy1is7WQeeCdNYq
OlsHnQteltQvN2+++WaHDh3Snaply5azZ88+evRogk/yUqZzQToXpLN10Llg
jLWKztZB54J01io6WwedC1bd3r17x48f36JFi3SqKioqWrVq1dmzZ5N9lZcy
nQvSuSCdrYPOBWOsVXS2DjoXpLNW0dk66FywilatWlVYWFjx1X933nlnSUlJ
0o/6/3kp07kgnQvS2TroXDDGWkVn66BzQTprFZ2tg84Fq+Kdd97p2LFjRap6
+umnf//996Qf9QcvZToXpHNBOlsHnQvGWKvobB10LkhnraKzddC5YOX27Nlz
//33N2/ePN2punfvvmjRotTfsaTf9ScvZToXpHNBOlsHnQvGWKvobB10Lkhn
raKzddC5YCVWrlzZq1evik+puv3223ft2pX0o87npUzngnQuSGfroHPBGGsV
na2DzgXprFV0tg46F7yo1C8r8+bNq/jqv3r16mXUV/+dy0uZzgXpXJDO1kHn
gjHWKjpbB50L0lmr6GwddC54od27d48bN67iq/8KCgoWL16c+p1w0u+6OC9l
Ohekc0E6WwedC8ZYq+hsHXQuSGetorN10LngeVasWNGzZ88M/+q/c3kp07kg
nQvS2TroXDDGWkVn66BzQTprFZ2tg84FK6T+Jrz11lsdOnRId6r69es/++yz
mfnVf+fyUqZzQToXpLN10LlgjLWKztZB54J01io6WwedC6bt2rVr7NixzZo1
S6eqHj16LFmyJGO/+u9cXsp0LkjngnS2DjoXjLFW0dk66FyQzlpFZ+ugc8GU
5cuX9+jRo+Kr/0aNGrV79+6kH1VVXsp0LkjngnS2DjoXjLFW0dk66FyQzlpF
Z+ugy/EFU7/FnTNnTsVX/zVo0GDq1KllZWVJv+syeCnTuSCdC9LZOuhcMMZa
RWfroHNBOmsVXY63jiyQywvu3LlzzJgxFV/916tXr88++wzx1X/n8lKmc0E6
F6SzddC5YIy1is7WQeeCdNYqulxuHdkhZxdctmzZuV/9N3r06JKSkqQfVR1e
ynQuSOeCdLYOOheMsVbR2TroXJDOWkWXs60ja+TggqdOnXrjjTfy8/PTnaph
w4bTpk1jffXfubyU6VyQzgXpbB10LhhjraKzddC5IJ21ii4HW0eWybUFN27c
eMsttzRu3DidqgoLC7/44otTp04l/a7q81Kmc0E6F6SzddC5YIy1is7WQeeC
dNYqulxrHdknpxb8+OOPu3btWvHVf3feeSf0q//O5aVM54J0Lkhn66BzwRhr
FZ2tg84F6axVdDnVOrJSjix44MCBSZMmtWrVKt2pWrRoMX369CNHjiT9rhrg
pUzngnQuSGfroHPBGGsVna2DzgXprFV0OdI6slguLPjVV1/16dOnXr166VQ1
aNCgNWvWpD74JP2umuGlTOeCdC5IZ+ugc8EYaxWdrYPOBemsVXS50DqyW3Yv
mPoIM3v27A4dOlR89d+jjz5aWlqa9LtqkpcynQvSuSCdrYPOBWOsVXS2DjoX
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
SOeCdLYOOhcMsVbR2TroXJDOWkVnraLLXfChL/0rV67chAkTrl69GusH1F/w
UqZzQToXpLN10LlgiLWKztZB54J01io6axVdtOD27ds7duyY90v/unbtmpaW
5vGF4KVM54J0Lkhn66BzwRBrFZ2tg84F6axVdNYqtMuXL48dO7Zy5cq5napp
06arVq26c+dOrB9N+eWlTOeCdC5IZ+ugc8EQaxWdrYPOBemsVXTWKq5Vq1bl
/dK/ChUq+KV/RF7KdC5I54J0tg46FwyxVtHZOuhckM5aRWetItqzZ0/Hjh3L
li2bm6q6det27Ngxry0iL2U6F6RzQTpbB50Lhlir6GwddC5IZ62is1ax/P77
7+PGjcv7pX+vvvrq0qVLb9++HetH01PyUqZzQToXpLN10LlgiLWKztZB54J0
1io6axXI119/Xbt27dxOlZiYOHny5EuXLrkgmpcynQvSuSCdrYPOBUOsVXS2
DjoXpLNW0VmrEHbv3v3WW2+VKVMmN1W9++67J0+ejIZzQTovZToXpHNBOlsH
nQuGWKvobB10LkhnraKzdRRxFy9eHDNmTFJSUm6nSk5O/u6776LVcv4BF6Tz
UqZzQToXpLN10LlgiLWKztZB54J01io6W0eRFf3GuHz58lq1auV2qkqVKk2Z
MuXatWt5/zEXpPNSpnNBOheks3XQuWCItYrO1kHngnTWKjpbR9G0Y8eOdu3a
5f3Svx49eqSnp/95KRek81Kmc0E6F6SzddC5YIi1is7WQeeCdNYqOltHUXPq
1KkPPvigYsWKuZ0qJSVl7dq1uV/69xAXpPNSpnNBOheks3XQuWCItYrO1kHn
gnTWKjpbR9GRmZn5+eefV69ePbdTJSUlTZs27fr164/5t1yQzkuZzgXpXJDO
1kHngiHWKjpbB50L0lmr6GwdRURqamqjRo1KliyZm6r69u175syZv/zt0QXp
vJTpXJDOBelsHXQuGGKtorN10LkgnbWKztYRc/v37+/atWu5cuVyO1WbNm02
b958//79/PzrLkjnpUzngnQuSGfroHPBEGsVna2DzgXprFV0to4Y+u2338aO
HVu5cuXcTlWvXr2FCxdmZGTk/xtxQTovZToXpHNBOlsHnQuGWKvobB10Lkhn
raKzdcREVlbW4sWLa9asmdupypYtO3r06D/++ONJvykXpPNSpnNBOheks3XQ
uWCItYrO1kHngnTWKjpbR+H76aefWrZsGR8fn5uqunfvnpaW9nS3kgvSeSnT
uSCdC9LZOuhcMMRaRWfroHNBOmsVna2jMKWlpfXr169ChQq5napFixapqanR
BE/9bbognZcynQvSuSCdrYPOBUOsVXS2DjoXpLNW0dk6CsfVq1enTZtWpUqV
3E5Vo0aNmTNn3rx58xm/ZRek81Kmc0E6F6SzddC5YIi1is7WQeeCdNYqOltH
IVi9enWdOnVyO1WJEiUGDx58+fLlAvnGXZDOS5nOBelckM7WQeeCIdYqOlsH
nQvSWavobB3P1Y4dO9q1a1emTJncVNWxY8c9e/ZkZ2cX1HfhgnReynQuSOeC
dLYOOhcMsVbR2TroXJDOWkVn63hOjh8/PnDgwMTExNxO1aRJkxUrVty5c6dg
vyMXpPNSpnNBOheks3XQuWCItYrO1kHngnTWKjpbR4G7fPnylClT8r5FVVJS
UvS/XLt27Xl8dy5I56VM54J0Lkhn66BzwRBrFZ2tg84F6axVdLaOApSVlbVk
yZKaNWv+PY/+/fufPXv2+f0u54J0Xsp0LkjngnS2DjoXDLFW0dk66FyQzlpF
Z+soKD/++GNycnKpUqVyO1WHDh1+/vnnrKys5/r9uiCdlzKdC9K5IJ2tg84F
Q6xVdLYOOheks1bR2Tqe3d69e7t06ZKQkJDbqZKTk9esWXP37t1C+N5dkM5L
mc4F6VyQztZB54Ih1io6WwedC9JZq+hsHc/i1KlTw4YNq1SpUm6nql279uzZ
s2/dulVoz+CCdF7KdC5I54J0tg46FwyxVtHZOuhckM5aRWfreDo3btz49NNP
q1atmtupypYtO2rUqD/++KOQn8QF6byU6VyQzgXpbB10LhhiraKzddC5IJ21
is7W8aSiz6lWrlxZp06dvG+l3qtXrxMnTsTk2HFBOi9lOhekc0E6WwedC4ZY
q+hsHXQuSGetorN1PJGffvqpdevWpUuXzu1U7dq127Jly/3792P1SC5I56VM
54J0Lkhn66BzwRBrFZ2tg84F6axVdLaOfPrll1969uxZvnz53E7VuHHjZcuW
ZWZmxvbBXJDOS5nOBelckM7WQeeCIdYqOlsHnQvSWavobB1/6cyZM6NHj05K
SsrtVFWrVp0+ffqNGzdi/Wj/Lxek81Kmc0E6F6SzddC5YIi1is7WQeeCdNYq
OlvHY1y9enXGjBl530o9Li5uyJAhly9fjvWj/f9ckM5Lmc4F6VyQztZB54Ih
1io6WwedC9JZq+hsHY8U/ZwsWLCgRo0aed9KvVu3bocOHYp+zcf66f4PF6Tz
UqZzQToXpLN10LlgiLWKztZB54J01io6W8dDok8J1qxZ07Bhw5IlS+Z2qrZt
227cuPHevXuxfrpHcEE6L2U6F6RzQTpbB50Lhlir6GwddC5IZ62is3XktXHj
xof+yr+UlJRVq1bduXMn1o8W5IJ0Xsp0LkjngnS2DjoXDLFW0dk66FyQzlpF
Z+vIsXv37s6dOyckJOR2qnr16s2bNy8jIyPWj/YXXJDOS5nOBelckM7WQeeC
IdYqOlsHnQvSWavobB1paWnvvfdeYmJi3r/yb+rUqdevX4/1o+WLC9J5KdO5
IJ0L0tk66FwwxFpFZ+ugc0E6axXdi9w6zp49O2bMmMqVK+d2qrJly44YMeLK
lSuxfrQn8CIvWDx4KdO5IJ0L0tk66FwwxFpFZ+ugc0E6axXdi9k6rl69OmPG
jKpVq+b9K//69u2bnp6O+6l4MRcsTryU6VyQzgXpbB10LhhiraKzddC5IJ21
iu5Fax3Rp0OLFy+uWbNm3k7VuXPnvXv3Zmdnx/rpnsaLtmDx46VM54J0Lkhn
66BzwRBrFZ2tg84F6axVdC9O64g+F1qzZs0rr7wSFxeX26natm27cePG6HOk
WD/d03txFiyuvJTpXJDOBelsHXQuGGKtorN10LkgnbWK7gVpHWvXrk1JSYmP
j8/tVM2aNfv666/v3LkT60d7Vi/IgsWYlzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bRFfvWsX79+latWpUuXTq3U9WtW3fu3Lm3bt2K9aMVjGK/YLHnpUzngnQu
SGfroHPBEGsVna2DzgXprFV0xbh1bN68uV27dmXKlMntVDVr1pw+ffqNGzdi
/WgFqRgv+ILwUqZzQToXpLN10LlgiLWKztZB54J01iq6Ytk6tm/f3qlTp4SE
hNxOVaVKlcmTJ1+7di3Wj1bwiuWCLxQvZToXpHNBOlsHnQuGWKvobB10Lkhn
raIrZq1jz5493bt3L1++fG6nqlSp0rhx465evRrrR3teitmCLyAvZToXpHNB
OlsHnQuGWKvobB10LkhnraIrNq3j4MGDffv2rVChQm6nSkhIGDFixO+//168
/5QvNgu+sLyU6VyQzgXpbB10LhhiraKzddC5IJ21iq4YtI4DBw7069cvMTEx
t1PFx8cPHjz4zJkz6B9XPhWDBV9wXsp0LkjngnS2DjoXDLFW0dk66FyQzlpF
h24d+/fvf+j1VJF+/fodP378xbk70Avqf72U+VyQzgXpbB10LhhiraKzddC5
IJ21ig7aOvbt29e7d++HOlWvXr0OHToU/ZqM9dMVKuiCyuWlTOeCdC5IZ+ug
c8EQaxWdrYPOBemsVXS41rF3795evXo91Kl69+59+PDhF61T5cAtqId4KdO5
IJ0L0tk66FwwxFpFZ+ugc0E6axUdqHXs3bu3Z8+eef++vxIlSvTp0+eF7VQ5
QAvqkbyU6VyQzgXpbB10LhhiraKzddC5IJ21ig7ROvbs2dOjR4+8napkyZJ9
+/Y9cuSIn9sgFtRjeCnTuSCdC9LZOuhcMMRaRWfroHNBOmsVXRFvHTt37uzW
rVu5cuXydqp+/fodPXrUz2pyFPEF9Ze8lOlckM4F6WwddC4YYq2is3XQuSCd
tYquyLaOzZs3d+zYMSEhIbdTxcXF9e/f/9ixY34+k1eRXVD55KVM54J0Lkhn
66BzwRBrFZ2tg84F6axVdEWwdaxfv75NmzZlypTJ7VSlSpUaMGDA8ePH/Uzm
z4rggnoiXsp0LkjngnS2DjoXDLFW0dk66FyQzlpFV3RaR/Qk3377bYsWLeLj
43M7VUJCwpAhQ3799VfviJCis6CejpcynQvSuSCdrYPOBUOsVXS2DjoXpLNW
0RWF1nHv3r0VK1Y0btw4Li4ut1MlJSV9+OGHv/32m78/PF5RWFDPwkuZzgXp
XJDO1kHngiHWKjpbB50L0lmr6GLbOjIyMhYtWlS3bt2SJUvmdqrq1atPmjTp
6tWrMXkkHGsVnZcynQvSuSCdrYPOBUOsVXS2DjoXpLNW0cWqdVy7du3zzz+v
Xr363/N4+eWXp0+ffuPGjUJ+GDRrFZ2XMp0L0rkgna2DzgVDrFV0tg46F6Sz
VtEVfus4f/78tGnTqlatmrdTNWjQ4PPPP79161ahPUaxYa2i81Kmc0E6F6Sz
ddC5YIi1is7WQeeCdNYqusJsHceOHRs1alRSUlLeTvXqq68uWrTo9u3bhfAA
xZK1is5Lmc4F6VyQztZB54Ih1io6WwedC9JZq+gKp3Xs27fvvffeS0xMzNup
WrRosWLFiszMzOf6XRd71io6L2U6F6RzQTpbB50Lhlir6GwddC5IZ62ie96t
Y9u2bV26dClXrlzeTtWuXbu1a9dG3+9z+k5fKNYqOi9lOhekc0E6WwedC4ZY
q+hsHXQuSGetontOrSP6BlNTU994440yZcrk7VRdu3bdvn37/fv3C/a7e5FZ
q+i8lOlckM4F6WwddC4YYq2is3XQuSCdtYquwFtH9K0tW7asSZMmpUqVyo1U
8fHx/fv3P3ToUPQLpqC+I+WwVtF5KdO5IJ0L0tk66FwwxFpFZ+ugc0E6axVd
AbaOa9euzZkzp1atWiVKlMjtVElJSaNGjTp79qy/SJ4TaxWdlzKdC9K5IJ2t
g84FQ6xVdLYOOheks1bRFUjrOH369OTJk1966aW8X/RXu3btqVOnXr9+vaAe
VY9kraLzUqZzQToXpLN10LlgiLWKztZB54J01iq6Z2wdhw4dGjJkSMWKFfN2
qkaNGs2dO/fWrVsF+6h6JGsVnZcynQvSuSCdrYPOBUOsVXS2DjoXpLNW0T11
69i+fXu3bt0e+sv+XnvttRUrVmRmZj6PR9UjWavovJTpXJDOBelsHXQuGGKt
orN10LkgnbWK7klbR/TPf//9961bt37oL/vr0KHD+vXro082nuvT6s+sVXRe
ynQuSOeCdLYOOhcMsVbR2TroXJDOWkWX/9Zx8+bNhQsX1q9fPy4uLjdSlSpV
qnfv3vv27cvOzi6Ep9WfWavovJTpXJDOBelsHXQuGGKtorN10LkgnbWKLj+t
48yZM1OmTHnoTdQrVao0cuTI06dPu35sWavovJTpXJDOBelsHXQuGGKtorN1
0LkgnbWK7vGt4+DBg4MHD37oTdTr1q07Y8aMGzduFPKj6pGsVXReynQuSOeC
dLYOOhcMsVbR2TroXJDOWkUXah2bN2/u3LnzQ2+i3rx58yVLlty+fTsmj6pH
slbReSnTuSCdC9LZOuhcMMRaRWfroHNBOmsV3UOt4+7duytWrEhJSYmPj3/o
TdR//PFH30S9CLJW0Xkp07kgnQvS2TroXDDEWkVn66BzQTprFV1u67hw4cKM
GTOqVauWN1LFx8f37dt3//79vol6kWWtovNSpnNBOheks3XQuWCItYrO1kHn
gnTWKrroc4Ndu3YNGTKkUqVKeTtVtWrVxo4de+7cOcct4qxVdF7KdC5I54J0
tg46FwyxVtHZOuhckM5ahfbTTz916tTpoTenatKkydy5czMyMmL9dMoXaxWd
lzKdC9K5IJ2tg84FQ6xVdLYOOheks1YR3bhxY/HixU2aNClVqlTeTtWuXbvv
vvvu7t27sX5APQFrFZ2XMp0L0rkgna2DzgVDrFV0tg46F6SzVrGcPHlywoQJ
lStXzhupSpUq1bt37z179mRlZcX6AfXErFV0Xsp0LkjngnS2DjoXDLFW0dk6
6FyQzlpFsW3btp49e5YvXz5vp6pZs+bYsWOPHz8e7RjrB9RTslbReSnTuSCd
C9LZOuhcMMRaRWfroHNBOmtVEXfjxo0lS5Y0a9YsPj4+b6dq0aLF4sWLb9++
beugc0E6L2U6F6RzQTpbB50Lhlir6GwddC5IZ60qstLS0saOHfvQF/1FunTp
smnTpnv37uX8Y7YOOhek81Kmc0E6F6SzddC5YIi1is7WQeeCdNaqoiY7O/uH
H37o2LFjQkJC3khVvXr10aNHp6enP/QJua2DzgXpvJTpXJDOBelsHXQuGGKt
orN10LkgnbWq6Dh9+vT06dNr1apVsmTJR37R3yP/LVsHnQvSeSnTuSCdC9LZ
OuhcMMRaRWfroHNBOmtVzGVlZa1bt65z587lypXLG6lKly7du3fv7du3379/
/zH/uq2DzgXpvJTpXJDOBelsHXQuGGKtorN10LkgnbUqhtLS0iZOnFi9evUS
JUrk7VQNGzacPn365cuX8/ORZeugc0E6L2U6F6RzQTpbB50Lhlir6GwddC5I
Z60qfBcuXFiwYEHLli3LlCmTN1KVLFmyc+fOP/zwQ7RI/r81WwedC9J5KdO5
IJ0L0tk66FwwxFpFZ+ugc0E6a1WhOXfu3IIFC958882H3j4958VUH3/88W+/
/fYUQ9g66FyQzkuZzgXpXJDO1kHngiHWKjpbB50L0lmrnrf09PS5c+e2adOm
bNmyD0WqihUr9u/ff8uWLffu3Xvqb9/WQeeCdF7KdC5I54J0tg46FwyxVtHZ
OuhckM5a9Tzcv39/x44dY8aMadiwYXx8/EORKvpfOnbsuHz58tBf8/dEbB10
LkjnpUzngnQuSGfroHPBEGsVna2DzgXprFUF6MKFCytXruzZs2eFChX+/iel
S5d+++23ly1bdvPmzQL8Y8vWQeeCdF7KdC5I54J0tg46FwyxVtHZOugKasFt
27aNGzdu8uTJS5YsOXjwYHZ2doE8nv6SteoZZWRkbNq0afTo0Y0bN/7zy6gi
L730Uq9evVauXBn9k8/jAWwddC5I56VM54J0Lkhn66BzwRBrFZ21iq5AFty/
f3/t2rXzHvjly5dv3779nDlz0tPT/a3vubJWPYXop+vw4cOzZs1q167dn98y
PUejRo3Gjh27Y8eOZ3lPqvywddC5IJ2XMp0L0rkgna2DzgVDrFV01iq6Alnw
yJEjderUeeTJH6lfv/7o0aN3796dlZVVUI+tXNaq/Dtx4sTChQu7d+9eqVKl
EiVK/PnXamJiYqdOnebNm3fq1KlC+yPb1kHngnReynQuSOeCdLYOOhcMsVbR
WavoCmTB6Pe3nj17lilTJhSscrz88sujRo3avXu3XydYgKxVj3f69OmlS5f2
7t27SpUqJUuWfOSvzJSUlEmTJu3cufN5v4zqkWwddC5I56VM54J0Lkhn66Bz
wRBrFZ21iq4AF5w1a1aNGjUe+ZKVhyQnJ3/xxRcF+1bVLyxr1Z+dOXNm5cqV
7733Xq1ateLi4h75i7Bu3bqDBg369ttvr1+/HtvfwWwddC5I56VM54J0Lkhn
66BzwRBrFZ21iq5gF4y+tbVr13bo0KFs2bI5TeBvf/tbqFmVKVOmX79+v/76
q1fes7BW5Th9+vSyZcv69+//mEJVs2bNPn36LF269MyZM0XnT2RbB50L0nkp
07kgnQvS2TroXDDEWkVnraJ7TgumpaV9/PHHHTp0CL1BUF61a9ceP378/v37
/QrBp/Ai16r09PQvv/yyT58+1atXD32VX9WqVbt3775w4cITJ05EP1exfuRH
sHXQuSCdlzKdC9K5IJ2tg84FQ6xVdNYqukJY8Pz586mpqRMmTOjQoUPVqlVD
VSFSqVKlnj17rl69+vbt2/62kE8vVK2KfphHjx5dsGBB9OvkMe9DFf0y69q1
6xdffHHkyJGin0BtHXQuSOelTOeCdC5IZ+ugc8EQaxWdtYqu8Be8evXq9u3b
Z86c2aZNm3Llyj3ylVdxcXHt27dfvHhxRkaGvz88XrGvVffu3du/f//s2bM7
d+6cmJgYeqletWrVunfvPn/+/KNHjxb9QpWXrYPOBem8lOlckM4F6WwddC4Y
Yq2is1bRxXzBNWvWpKSkxMfHPzJBlClTplevXlu3br1//36snrCIK5a16vbt
2zt27Jg2bVq7du0SEhJCL8arUaNGz549Fy1aVGS/yi8/bB10LkjnpUzngnQu
SGfroHPBEGsVXcxbh55REVlw27ZtHTp0KFOmTKhLtGzZcuXKldGjxvY5i6Bi
U6suX768bt26sWPHRls/5lfCP/7xj379+n311Vfp6encQpWXrYPOBem8lOlc
kM4F6WwddC4YYq2iKyKtQ0+tSC24bdu2bt26Pea1NM2bN//+++/v3bsX6yct
QtC16tdff12+fPmgQYPq1atXqlSp0O6vvPLKkCFDVq9efeHCheL32aytg84F
6byU6VyQzgXpbB10LhhiraIrUq1DT6EILnj48OEPP/wwKSkp1C4aNWo0bdq0
jIyMWD9pkcCqVZmZmbt37549e3aXLl2iiUNvQlWyZMnk5OTRo0f/8MMPV69e
pfzono6tg84F6byU6VyQzgXpbB10LhhiraIrgq1DT6TILnj//v21a9d27949
9FKr+Pj4pk2bTpw4ccOGDZcuXXphP8kp+rXq7Nmz33zzzciRI1NSUh7zJX4V
K1Zs167d1KlTt2zZkpmZ+eL8uWDroHNBOi9lOhekc0E6WwedC4ZYq+iKbOtQ
PhX9BTMzMzds2PD+++9XqVIl9FKcSPXq1Tt16jR16tQff/yxWH69WEgRrFW3
bt3atWvX7Nmzu3fvXq1atZIlS4ZWq1WrVo8ePebOnXvo0KGsrKxYP3hs2Dro
XJDOS5nOBelckM7WQeeCIdYquqLfOvR4rAXT0tImTZpUv379x7zHUY7KlSu/
+eabY8aM+frrr48ePZqdnR3rZ39eikKtysrKOnLkyJIlSwYNGtSoUaPQ3/AY
iYuLa9as2bBhw1atWnX27Fn/WPxfWwefC9J5KdO5IJ0L0tk66FwwxFpFx2od
+jPogufOnRs/fnz16tUf87qdvEqXLt2kSZMBAwbMmTNn+/btxemtkGJSq+7f
v5+WlrZ8+fLhw4e/9tprZcuWfcxPfrVq1d55553PPvts165d/ob/Z7YOOhek
81Kmc0E6F6SzddC5YIi1ig7aOpSLvuDOnTtHjhz5+C83CyWUf/7zn2PHjv36
66/T0tK4X4ZWOLXq1q1bBw4c+PLLL4cMGfL4t5/KaYPNmzcfPnz4qlWrTp8+
7Z99j2froHNBOi9lOhekc0E6WwedC4ZYq+jorUPFZsG0tLQ5c+Z07Ngx9K7s
j1eyZMmXX365W7duM2bMWL9+/blz5yi/Yz+PWhV9gydPnvz+++8/+uijLl26
RD8zf/mllw0bNuzfv/+CBQsOHDhw//79AnyYYs/WQeeCdF7KdC5I54J0tg46
FwyxVtEVm9bxwip+C2ZnZx87dmzZsmUffPBBcnJy6dKlnyJe/f3BOyy99NJL
TZo06dat25QpU3744YdTp05lZmYWtZ+rZ6lV0b97+fLlX375Zd26dfPnzx85
cmT79u1r1679l20qUr9+/d69e3/++ec7duzIyMgoaj8tILYOOhek81Kmc0E6
F6SzddC5YIi1iq74tY4XTbFfMPrt98yZM+vXr//ss8/69evXokWLpKSkJ/2y
wYcqVqVKlRo2bNixY8chQ4ZMnTp18eLFqampmzdv3rVr14EDB44dO3b69OmL
Fy9eu3YtMzMz+hl+rr/FhWpVVlZW9ADRk0SPFD3bt99+u2jRok8++WTUqFHd
unVr3rx5tWrVoh9LPn/UCQkJzZo1GzBgwLx58/bs2XPnzh1/3y4otg46F6Tz
UqZzQToXpLN10LlgiLWKrti3jmLvxVwwIyPj6NGjqamps2fPHj16dJ8+fd54
4406deokJCSUKFHiieLV3/72t4f+y5+VLFmybNmylSpVqlGjRt26dZs0adK8
efM2bdp06NCha9eu0fc+aNCg4cOHjx07dsqUKdMfmDZt2tQHov9l8uTJkyZN
mjhx4vjx48eNGxf9Y6NGjRoyZEi/fv169OjRqVOn6Jtq1apVcnLyK6+8Ev0o
qlatWqZMmSf9geRVunTphg0bduvWLXqAtWvXnjp1Kvp1EuvRii1bB50L0nkp
07kgnQvS2TroXDDEWkX3YraO4sQFH5KVlXX58uW0tLRvvvlmwoQJXbt2bdKk
yUsvvZSfL47DiYuLq169evPmzbt37z5q1Kh58+Zt2bLl/Pnz/mlVmGwddC5I
56VM54J0Lkhn66B7lgX/U6xFh+Hdu3ejn5lYP4iekgvSRQtGd5YL5sfFixe3
bt06c+bMnj17NmrU6PF/L17MRY9XtWrVBg0atGrVqlOnTv369Rs5cuRHH300
f/781NTUAwcORD+caP1Y/6Tq//sY/Pe//x3rB9FTckG6nAWzs7Nj/SB6StF2
LojmgnQuSBdt969//evp7oK7kqQi6eTJkz/88MOMGTP69OnTrFmzfL6j+0sv
vZSSktKtW7dhw4Z9/PHHCxcuXLJkyfz582fNmjV9+vSPHpg2bVr0f4r+M/pf
om//k08++fTTT2fOnDnrgblz5y5evHjFihXffPNN9ACbNm3atWvX/v37jxw5
kp6efu7cuRs3bty5cyfWPz2SJEmSiq0CT2dFiq/MoXNBOl9bVYCys7NPnz79
448/fvrpp3379m3atGk++1X16tXffPPN4cOHL1y4cOfOnZcvX87//3/K13XQ
uSCdC9L52io6X9dB54J0Lkj3LK+tKvAvSyxSfN8qOt/1iM4Fn6v/+Z//OXfu
3MaNG2fNmjVgwICUlJR8fv1glSpV3njjjaFDh86fP3/btm2XLl0K/XEQ+jsB
ReG7HtG5IJ3vmUPngnQuSPcf37cKzgVDrFV0tg46Fyxk0Ul7/vz5n376afbs
2e+9917z5s3LlSuXn7+/r1KlSi1bthw4cGD0L27cuPHs2bM5f6ZYq+hsHXQu
SOelTOeCdC5IZ+ugc8EQaxWdrYPOBWMu+g3w4sWLW7Zs+eKLL95///1WrVpV
rFgxP/2qbNmyTZo06dGjx8SJE7/77rvjx49nZWXF+kejJ2broHNBOi9lOhek
c0E6WwedC4ZYq+hsHXQuWDRduXJl586dCxcuHDZsWJs2bSpXrlyyZMm/7FfR
P1O3bt3OnTtPmDBh5cqVBw4cyMjIcNwiztZB54J0Xsp0LkjngnS2DjoXDLFW
0dk66FyQ4vr163v37l26dOmYMWM6duxYq1atUqVK5ectsKpVq9a2bdvct8D6
/fff/YSwSLF10LkgnZcynQvSuSCdrYPOBUOsVXS2DjoX5MrMzDx8+PDKlSvH
jx/frVu3Bg0axMfH56dflS9fvlmzZn379v3kk09SU1NPnjwZ/TKI9Y/mxWXr
oHNBOi9lOhekc0E6WwedC4ZYq+hsHXQuSJf3XdazsrJ+/fXXdevWffrpp/36
9UtJSUlISMhPv8r5EsJ33nln3LhxS5cu3bNnz7Vr17y+C4etg84F6byU6VyQ
zgXpbB10LhhiraKzddC5IN3j/07A6HfX33//ffv27QsWLBg2bFjbtm2rVq0a
FxeXn4RVuXLl1157beDAgbNmzVq/fv2pU6d8CdbzYOugc0E6L2U6F6RzQTpb
B50Lhlir6GwddC5I9/ha9Ug3b948ePDgypUrJ06c2KVLl3r16uXzSwhLlSoV
/cOdO3ceP3788uXL9+7d60uwnp2tg84F6byU6VyQzgXpbB10LhhiraKzddC5
IN1T1Ko/y8rKOnXq1Pr162fNmjVo0KBWrVpVqlQpP38LYSQpKally5YDBgz4
9NNPU1NTjx8/fu/ePX9Xzz9bB50L0nkp07kgnQvS2TroXDDEWkVn66BzQboC
qVWPdO3atb179y5btmzcuHHvvPNO3bp18/kSrEitWrXeeuutESNGLFiwYOvW
rRcuXPBPwBBbB50L0nkp07kgnQvS2TroXDDEWkVn66BzQbrnV6v+7N69e+np
6evWrZs5c+bAgQNfe+21/L8Eq2zZsq+88kq3bt0mTJjgVxHmZeugc0E6L2U6
F6RzQTpbB50Lhlir6GwddC5IV5i16pGuX7++f//+FStWTJw4sWvXrg0bNsz/
S7AqVqyYkpLSp0+fjz/++Jtvvjl06FBGRsaL9qvR1kHngnReynQuSOeCdLYO
OhcMsVbR2TroXJAu5rXqz6JHOnv27KZNm+bOnTt06NA333yzRo0a+fyLCP/+
37+LcMCAATNmzPjuu+8OHz58+/btYvxL1NZB54J0Xsp0LkjngnS2DjoXDLFW
0dk66FyQrgjWqke6c+fOsWPHUlNTP/300wEDBjzRVxFGqlSp0qpVq/feey8n
YR06dOjWrVtF/0edH7YOOhek81Kmc0E6F6SzddC5YIi1is7WQeeCdJRa9Ug3
btw4ePDgqlWrpkyZ0qtXr2bNmpUrV65EiRL5fxVW8+bNe/fuHf3rK1eu3LNn
z+XLl3Gf7to66FyQzkuZzgXpXJDO1kHngiHWKjpbB50L0qFr1SNdu3Zt3759
K1eunDx5co8ePZo2bZqQkJD/hBX9ww0bNuzUqdPIkSPnzZu3YcOG48eP37lz
p8j+Ird10LkgnZcynQvSuSCdrYPOBUOsVXS2DjoXpCt+teqRrl69unfv3hUr
VkyePLlnz57Jycnly5fPf8KKJCUlRf/Wu+++O3bs2AULFmzYsOHo0aM3b96M
+U+drYPOBem8lOlckM4F6WwddC4YYq2is3XQuSDdC1KrHun69esHDx5cs2bN
jBkzBgwY0Lp16ypVquT/7dxzlCtXrkGDBh06dHj//fc//vjjZcuWbd269cSJ
ExkZGYXzs2rroHNBOi9lOhekc0E6WwedC4ZYq+hsHXQuSPci16pHunv3bnp6
+saNG+fPn//hhx927ty5UaNGT/S1hLmif6tevXpt27bt27fv+PHj586d+913
3+3evfvs2bPR91JQHzW2DjoXpPNSpnNBOheks3XQuWCItYrO1kHngnTWqny6
fv36oUOHUlNT58yZM2rUqC5dujRt2rRixYr5/3sJH1K+fPn69eu3bdu2V69e
0Tf42WefrVixYvPmzUeOHLl8+XK0Sz4fzNZB54J0Xsp0LkjngnS2DjoXDLFW
0dk66FyQzlr1jO7cufPrr79u2bJl+fLlH3/88fvvv9+hQ4dGjRolJiY+dcjK
UbFixQYNGrzxxhs9evQYPnx49I0vWbIkNTV1z549p06dunXrVs5qtg46F6Tz
UqZzQToXpLN10LlgiLWKztZB54J01qrn5+7du2fOnPn555+/+eabL774YuzY
sX369GnTpk3dunWf7ksLHxIXF1elSpVXXnnl9ddff/fdd4cNGzZ16tQFCxZE
3922bdvS0tIuXbp07949/4gs4qxVdF7KdC5I54J0tg46FwyxVtHZOuhckM5a
FSt37tw5e/bs3r17U1NTFy5cOGXKlMGDB3fq1CklJaVmzZqlSpV6xpaVKyEh
oUaNGk2aNHnzzTd79uw5bNiwjz76aO7cuatWrdq0adMvv/xy7ty53FdqqfBZ
q+i8lOlckM4F6WwddC4YYq2is3XQuSCdtapoiv5cy8jIOH369N69e9etW7dk
yZLp06ePGDGiR48ebdq0adCgQVJS0pP+9YWPV6JEicTExDp16iQnJ7/11lu9
evUaNmzYlClTvvjii5UrV27YsGHPnj0nT568dOlSAb5FvP7XWsXnpUzngnQu
SGfroHPBEGsVna2DzgXprFVc0XbXr18/fvz41q1bU1NTv/rqq08//XT06NH9
+vXr0KFDcnJyrVq1ypYt++xfcvhncXFxFStWrFOnTtOmTd98883u3bsPHDgw
+q6nT58+f/78VatWbdiwYffu3ceOHfvtt99u3ryZlZXln9Qh1io6L2U6F6Rz
QTpbB50Lhlir6GwddC5IZ62i+8vWce/evStXrpw8eXL37t3r1q1bunTpzJkz
x40bN3DgwM6dO7dq1ap+/foF/kqtP4uPj69YsWKtWrUaNWr02muvtW/f/t13
342eYdSoUVOmTJk1a9bixYtXr169fv36nTt3Hjp0KHrgCxcuXL169e7du9GP
sRj/QW+tovNSpnNBOheks3XQuWCItYrO1kHngnTWKrqCah3RR/GdO3cuXrx4
7NixXbt2paamLl26dNasWRMmTHj//fe7devWtm3bJk2a1KpVq3z58s/41x0+
deyqUaNG/fr1mzZt+vrrr7dv37579+79+vUbOnTo6NGjp0yZ8sknn8yZM2fR
okXLly9fs2bNDz/8sGnTpp07d+7bt+/IkSPp6ennz5+/cuXKrVu3cu6aIvLJ
g7WKzkuZzgXpXJDO1kHngiHWKjpbB50L0lmr6GLSOqJPSzIzM3///ffjx4/v
2bNn48aNq1atWrBgwYwZM8aMGTN48ODu3bu3a9cuOTn5H//4x0svvVS6dOnn
8QWJzyguLi4hIaFSpUrVqlWrXbt2/fr1GzduHD1zq1at2rZt26FDh86dO/fo
0aNv374DBw784IMPRo4cGf3oJk6cOHXq1OhHOmvWrLlz5y5atOirr776+uuv
v/3229TU1PXr12/evHn79u0///zz3r17f/nll7S0tBMnTpw6der8+fPRz9iV
K1euX79++/btu3fv3r9/P/oAzM7O9mMQzUuZzgXpXJDO1kHngiHWKjpbB50L
0lmr6CivzImeMzMz8/Lly6dOnTp06NDOnTvXr1+/evXqxYsXz5o1a8qUKaNG
jRo4cOC7777bvn37Vq1avfrqq/Xq1atevXpiYmIB/g2JRVPJkiXj4+MTEhIq
VKiQlJRUpUqVmjVr1qlTp27dug0bNmzcuHGzZs1SUlJatmz5+uuvt23b9p//
/GeHDh06derUpUuX6GesV69effr06d+//6BBg4YMGTJs2LCRI0d++OGHY8aM
GT9+/KRJk6ZOnfrxxx/PmDHjs88+i36258yZM2/evIULF0Y/+V999dWyZctW
rFixatWqNWvWfPvtt99///0PP/zw448/btiwYdOmTVu2bNm2bVu0188//7xn
z559+/YdOHAgWvDIkSNpaWnHjh07ceJEenp6NOuZM2fOnTt34cKFixcvXrp0
6cqVK1evXr1+/fqNGzcyMjKi9e/evRv9Wr13715WVlZ2dnb0m0/0+W30S5f+
WZyXMp0L0rkgna2DzgVDrFV0tg46F6SzVtFRatUzin6Yd+7cuXr16vnz50+e
PHnw4MFdu3Zt3Ljx+++/X758+aJFi2bPnj19+vRJkyaNHj166NChAwcO7N27
d9euXTt06NCmTZsWLVo0adKkXr16NWvWfOmll8qXL1+qVKki+HKvF1a0RVxc
XDRKfHx8mTJlEhISypUrV6FChcTExIoVKyYlJUWrValSpWrVqtWqVatRo0a0
Y+3atevUqfPyyy//4x//qFu3bv369Rs0aPDKK680atSocePG0dxNmzZt1qxZ
cnJySkpK8+bNo18DLVu2fO2111q1atW6devXX389+oXRtm3bNx9o167dW2+9
1f6B6NfM22+/3emBd955p3Pnzl26dIl+LXV7oHv37u+++26PB3r27NmrV6/o
P3OaYd8H+vXr179//wH/9d577w18YNADgwcPfv+BIUOGfPDA0AeGDRs2fPjw
nP8c8cDIB0b9Xx/+1+j/GvNfY/9r3Lhxuf8lx/hHmRAwMSD64Ar9n0LfVOSR
33X0r8ycOXPp0qXr1q3bs2dPenr6tWvXoj+MYvjbi60DzQXpbB10LhhiraKz
ddC5IJ21iu4FqVXPQ/STdv/+/du3b1+/fv3SpUvnz58/derUsWPHDh06tHfv
3p07d27ZsmX9+vVr165ds2bNihUrvvzyywULFnzxxRfRoT19+vSPPvoourtH
jx49YsSI999//7333uvbt2/Pnj27du3aqVOn9u3bv/nmm61bt27RokWzZs0a
N25cv379l19+uVatWtWqVUtKSkpMTExISIiPjy/8NwGTiqby5cvXqVMnJSWl
Y8eOAwYMmDBhQvThFn30bd++/fjx49euXXtOp5Ctg84F6WwddC4YYq2is3XQ
uSCdtYrOWkWX87Kx+w9EU96+ffvGjRt//PHHpUuXfvvtt7Nnz546derEiRNH
jx49fPjwwYMH9+7d+/PPP+/cuXPbtm2bN2/esGHDunXr1q5d++23365evXrF
ihVLly798ssvFy1atGDBgnnz5s2ZM2fmzJmffPLJ9OnTp02bNmXKlEmTJo0b
N2706NGjRo0aMWLE0KFDP/jgg8GDB7/33nv9+/fv27dv7969c14v1LVr186d
O7/99tsdOnR466232rVr17Zt2zfeeKNVq1YtWrRo3rx5cnJy06ZNmzRp0rhx
41deeaVBgwb16tV7+eWXa9euXatWrRo1alSrVq1q1aqVK1euVKlShQoVypcv
n5CQULZs2TJlypQuXbpUqVJxcXG+yE35FP1qeemllxo1avTPf/4z+uU6efLk
6Nd59CEQfWhcuXLlqQ8lWwedC9LZOuhcMMRaRWfroHNBOmsVnbWKzgX/98Ff
SRn9DESf7ua87fz9+/fv3bsX/bTcvXs3MzMzIyPj1q1bN2/evH79+rVr165e
vfrHH39cuXLl8uXLv//++8WLF3/77bfz58+fPXv2zJkzp0+f/vXXX9PT00+e
PHnixInjx48fO3bs6NGjaWlpR44cOXz48KFDh3755ZcDBw7s379/3759ex/Y
s2fPzz//vOuBnTt37tixY9sDW7du3bJly+bNmzc98NNPP23cuHHDhg3r16//
8YGcVLhmzZrvv/9+7QPRf/nuu+++/fbbb/5rzQOrH1i1atXXD6x8YMWKFcsf
WLZs2dKlS3P+86sHvnxgyf+1+L8W/dfC/1rwX/Pnz8/9LznmBcwN+OIJhb6d
0Pc7fvz4MWPGDB069N13323btm3jxo2rVasWHx//jC2rVKlS1atXb968effu
3UePHh19R9FA0e7RL57Hf3zZOuhckM7WQeeCIdYqOlsHnQvSWavobB10Lkjn
pVwgok/m7969+9tvvx05cmTbtm2rV6+eM2fO+PHjBwwY0KFDh1dffbVKlSpP
/RcuVKhQoVGjRp06dRo+fPgXX3yxcePGU6dOZWVl5XzXLkjngnS2DjoXDLFW
0dk66FyQzlpFZ+ugc0E6L+VCE/1U37hxIz09fceOHatWrZo5c+aIESO6du3a
vHnzatWqPWnLiouLq1279ltvvfXBBx9E39SGDRvOnTuXnZ0d6x+lnpgfg3S2
DjoXDLFW0dk66FyQzlpFZ+ugc0E6L+UiIvrj7MqVK4cPH/7xxx/nzp07evTo
rl27vvrqq4mJifn/uwwqVKiQkpIyYMCA2bNn//TTT+fPn7dfFX1+DNLZOuhc
MMRaRWfroHNBOmsVna2DzgXpvJSLvtu3b584ceKnn35asGDBqFGj3n777Xr1
6pUuXTo//apixYqtW7eO/q2VK1ceP378/v37sf7R6GF+DNLZOuhcMMRaRWfr
oHNBOmsVna2DzgXpvJShsrKyzp07t3Xr1nnz5g0bNuyf//xnjRo1/vLLCcuX
L9+8efPon//666/PnDkT/Rka6x+H/BjEs3XQuWCItYrO1kHngnTWKjpbB50L
0nkp0+Vd8NatWwcOHFi+fPmYMWPat2//l/0q+ge6dev2+eef79u3L/pAjvUP
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
     "], {{0, 589.530295306842}, {797.0409590492844, 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{143.9926, 143.9926},
     SmoothingQuality->"High"],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{797.0409590492844, 589.530295306842},
   PlotRange->{{0, 797.0409590492844}, {0, 589.530295306842}}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877875426792283*^9, 3.8778754683219285`*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"fb1a0b49-a98d-4d34-b9f5-6779655374b2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expression", "[", 
  RowBox[{
   RowBox[{"questions", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.877875539827721*^9, 3.877875561659845*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"4250b12e-c05c-4d36-9a0b-d4f5acca6675"],

Cell[BoxData[
 RowBox[{"Expression", 
  "[", "\<\"Suppose -1382*k + 1464*k = 11972. Solve -32*w + 78 = -k for \
w.\"\>", "]"}]], "Output",
 CellChangeTimes->{3.8778755620613613`*^9},
 CellLabel->
  "Out[138]=",ExpressionUUID->"a56ea2bb-094c-47fd-9970-a7c8b0ef8626"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"TextRecognize", "[", "]"}], "//", "AbsoluteTiming"}]], "Input",
 CellChangeTimes->{{3.877875640387062*^9, 3.8778756486859636`*^9}, {
  3.8778756800761633`*^9, 
  3.8778757426652427`*^9}},ExpressionUUID->"de62ee23-4bf0-4541-ad5d-\
8782419857e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.0004229`", 
   ",", "\<\"Suppose -1382\[LeftGuillemet]k + 1464\[LeftGuillemet]k = 11972. \
Solve -32\[LeftGuillemet]w + 78 = -k for w.\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.877875649183498*^9, {3.8778756853938236`*^9, 3.8778757172904725`*^9}},
 CellLabel->
  "Out[142]=",ExpressionUUID->"160c8190-08d1-4081-a3ad-dcac2f0db2a7"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.877875010873147*^9, 
  3.8778750131081805`*^9}},ExpressionUUID->"08677157-a0d2-443e-b039-\
b83a0a834109"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToString", "[", 
  RowBox[{"ToExpression", "[", "\"\<n ^ 5\>\"", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.877875753987109*^9, 3.8778757638031645`*^9}, {
  3.8778780578835115`*^9, 3.8778780611835365`*^9}, {3.877878286307022*^9, 
  3.8778783818473997`*^9}},
 CellLabel->
  "In[183]:=",ExpressionUUID->"f13a1eeb-720a-446d-97b1-2c22fdbb2302"],

Cell[BoxData["\<\" 5\\nn\"\>"], "Output",
 CellChangeTimes->{{3.877875744194728*^9, 3.8778757642390604`*^9}, 
   3.877878185063648*^9, {3.877878309192008*^9, 3.877878382194456*^9}},
 CellLabel->
  "Out[183]=",ExpressionUUID->"03a7492d-ef67-4974-a307-4954b9c9eb35"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToString", "[", 
  RowBox[{"\"\<4n ^ 5\>\"", ",", " ", "StandardForm", ",", " ", 
   RowBox[{"CharacterEncoding", "->", "\"\<ASCII\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8778758505590906`*^9, 3.877875944923729*^9}, {
  3.8778784172945986`*^9, 3.8778784921193457`*^9}, {3.8778785507945614`*^9, 
  3.877878573096098*^9}},
 CellLabel->
  "In[189]:=",ExpressionUUID->"04bcf019-b83c-4ca1-a0b8-da7a033eff7d"],

Cell[BoxData["\<\"\\\\!\\\\(\\\\*RowBox[{\\\"\\\\\\\"4n ^ \
5\\\\\\\"\\\"}]\\\\)\"\>"], "Output",
 CellChangeTimes->{{3.877875856933762*^9, 3.877875879768348*^9}, 
   3.877875945454575*^9, {3.877878460532434*^9, 3.877878492839267*^9}, {
   3.877878553709402*^9, 3.877878573603177*^9}},
 CellLabel->
  "Out[189]=",ExpressionUUID->"cfe1bd64-bc4b-4e98-8729-42ec06847a22"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetDrop", "[", 
  RowBox[{"trainedNet", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.877903174602086*^9, 3.877903193517081*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"a99b7e89-c87f-424c-a749-968dc278541f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "NetBidirectional", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "ForwardNet" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 150, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    768, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1466040848], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> NeuralNetworks`TensorT[{150}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "BackwardNet" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 150, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    768, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1466040848], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> NeuralNetworks`TensorT[{150}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "Aggregation" -> Catenate, "DataReversed" -> Automatic, 
                    "$InputTensor" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT], "$ForwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT], "$BackwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 300}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "ForwardState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "ForwardCellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "BackwardState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "BackwardCellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 56, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    300, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1466040848], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 300}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 56}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{56}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {56}, "$OutputSize" -> 56, 
                    "$InputSize" -> 56, "$InputDimensions" -> {56}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1466040848], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{56}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{
                    "\"algebra__linear_1d_composed\"", 
                    "\"algebra__linear_1d\"", 
                    Skeleton[53], "\"probability__swr_p_sequence\""}, {
                    "algebra__linear_1d_composed", "algebra__linear_1d", 
                    "algebra__linear_2d_composed", "algebra__linear_2d", 
                    "algebra__polynomial_roots_composed", 
                    "algebra__polynomial_roots", 
                    "algebra__sequence_next_term", 
                    "algebra__sequence_nth_term", 
                    "arithmetic__add_or_sub_in_base", 
                    "arithmetic__add_or_sub", "arithmetic__add_sub_multiple", 
                    "arithmetic__div", "arithmetic__mixed", 
                    "arithmetic__mul_div_multiple", "arithmetic__mul", 
                    "arithmetic__nearest_integer_root", 
                    "arithmetic__simplify_surd", 
                    "calculus__differentiate_composed", 
                    "calculus__differentiate", "comparison__closest_composed",
                     "comparison__closest", 
                    "comparison__kth_biggest_composed", 
                    "comparison__kth_biggest", "comparison__pair_composed", 
                    "comparison__pair", "comparison__sort_composed", 
                    "comparison__sort", "measurement__conversion", 
                    "measurement__time", "numbers__base_conversion", 
                    "numbers__div_remainder_composed", 
                    "numbers__div_remainder", "numbers__gcd_composed", 
                    "numbers__gcd", "numbers__is_factor_composed", 
                    "numbers__is_factor", "numbers__is_prime_composed", 
                    "numbers__is_prime", "numbers__lcm_composed", 
                    "numbers__lcm", "numbers__list_prime_factors_composed", 
                    "numbers__list_prime_factors", 
                    "numbers__place_value_composed", "numbers__place_value", 
                    "numbers__round_number_composed", "numbers__round_number",
                     "polynomials__add", "polynomials__coefficient_named", 
                    "polynomials__collect", "polynomials__compose", 
                    "polynomials__evaluate_composed", "polynomials__evaluate",
                     "polynomials__expand", "polynomials__simplify_power", 
                    "probability__swr_p_level_set", 
                    "probability__swr_p_sequence"}], "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 56, "$Rank" -> 0, 
                    "$Version" -> "13.1.3"|>|>, 
                    "InteriorStates" -> <|{1, "ForwardState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "States", "ForwardState"], {
                    1, "ForwardCellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "States", "ForwardCellState"], {
                    1, "BackwardState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "States", "BackwardState"], {
                    1, "BackwardCellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "States", "BackwardCellState"], {
                    2, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "State"], {
                    2, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "CellState"]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetBidirectionalOperator", HoldForm], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"LongShortTermMemoryLayer", ",", 
                    "LongShortTermMemoryLayer"}], "}"}], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]300\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LongShortTermMemoryLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]56\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.877903177690802*^9, 3.877903194037141*^9}},
 CellLabel->"Out[53]=",ExpressionUUID->"67459dbc-3ed7-4b47-b1ca-9ac865f2e039"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<C:\\\\Users\\\\enego\\\\OneDrive\\\\Documents\\\\GitHub\\\\durhack22\\\
\\ML\\\\bert.onnx\>\"", ",", " ", "bert"}], "]"}]], "Input",
 CellChangeTimes->{{3.8778986024235077`*^9, 3.877898692225129*^9}, {
   3.877898724865379*^9, 3.8778987274793534`*^9}, {3.87789882147369*^9, 
   3.8778988281928635`*^9}, {3.877902447168808*^9, 3.877902463463405*^9}, {
   3.8779031195233955`*^9, 3.877903125439217*^9}, {3.8779031675198565`*^9, 
   3.8779031713513656`*^9}, 3.8779032019938593`*^9, {3.8779295463814964`*^9, 
   3.877929558899029*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"d1acbcf4-ef2f-4993-be45-cd2a0bc369cb"],

Cell[BoxData["\<\"C:\\\\Users\\\\enego\\\\OneDrive\\\\Documents\\\\GitHub\\\\\
durhack22\\\\ML\\\\bert.onnx\"\>"], "Output",
 CellChangeTimes->{{3.877898670527123*^9, 3.877898692963378*^9}, 
   3.877898728481472*^9, 3.877898828654718*^9, {3.877902454436676*^9, 
   3.877902475951379*^9}, 3.877903202874484*^9, {3.877929548170863*^9, 
   3.8779295705668716`*^9}},
 CellLabel->"Out[56]=",ExpressionUUID->"e60511ac-e831-4e33-81e9-23bb6f5a1248"]
}, Open  ]]
},
WindowSize->{1280, 732},
WindowMargins->{{-5.5, Automatic}, {Automatic, -5.5}},
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c19432a0-41f0-40d0-bfbe-004a0779d4b7"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 1927, 40, 124, "Input",ExpressionUUID->"471d7cd1-6d71-4f5e-8826-34cf5f21b09d"],
Cell[2510, 64, 448, 6, 32, "Output",ExpressionUUID->"de51d8ef-0641-4e59-81dd-a9151a363e08"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2995, 75, 325, 7, 28, "Input",ExpressionUUID->"9597b77d-1996-42c1-bc5a-354003f55ac8"],
Cell[3323, 84, 1248, 20, 289, "Output",ExpressionUUID->"2a013638-9da6-48bc-9ef0-0e9f1bbaba6b"]
}, Open  ]],
Cell[4586, 107, 1035, 21, 28, "Input",ExpressionUUID->"03aff200-9994-46bc-a879-99c07f969c2d"],
Cell[CellGroupData[{
Cell[5646, 132, 262, 5, 28, "Input",ExpressionUUID->"fd3e4d5b-6ada-400c-9ab4-810089ebef7b"],
Cell[5911, 139, 234, 3, 32, "Output",ExpressionUUID->"25be68ff-d067-40a1-9a07-a84e5444a311"]
}, Open  ]],
Cell[6160, 145, 606, 14, 28, "Input",ExpressionUUID->"cace77be-6530-4cd7-98b7-4f450b7d0339"],
Cell[CellGroupData[{
Cell[6791, 163, 549, 11, 28, "Input",ExpressionUUID->"33f330fe-adce-4e6c-ab9c-1f10a70c8c9f"],
Cell[7343, 176, 643, 12, 83, "Output",ExpressionUUID->"940072cb-06ac-44de-b8d8-dd51ffc84b3c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8023, 193, 1460, 27, 86, "Input",ExpressionUUID->"56f71839-db6a-4dab-ba8c-36be508ffc37"],
Cell[9486, 222, 1680, 30, 186, "Output",ExpressionUUID->"0619f7b2-2798-483f-8d4c-137b7e130472"]
}, Open  ]],
Cell[11181, 255, 497, 12, 28, "Input",ExpressionUUID->"c66fe4c7-e040-4a49-85ab-8a653c6ca362"],
Cell[CellGroupData[{
Cell[11703, 271, 803, 15, 28, "Input",ExpressionUUID->"261e89e9-bd9a-4027-8280-d8c38bdd0e2f"],
Cell[12509, 288, 1357, 23, 123, "Output",ExpressionUUID->"3f54892a-c6ee-4f9c-85c1-d3b3d73d58c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13903, 316, 374, 8, 28, "Input",ExpressionUUID->"ebf28abf-d7ca-412c-aa3b-a1980815223e"],
Cell[14280, 326, 178025, 2933, 52, "Output",ExpressionUUID->"812ac235-60dd-4d75-82c5-35e9bcc289d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192342, 3264, 718, 16, 28, "Input",ExpressionUUID->"e63e2566-a2b4-4a27-a622-1406c6a2809c"],
Cell[193063, 3282, 158, 2, 32, "Output",ExpressionUUID->"d6078748-d862-427e-8827-8d68a4fa561f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193258, 3289, 498, 11, 48, "Input",ExpressionUUID->"f56ccbb8-d6c0-4107-8439-99e9252c2473"],
Cell[193759, 3302, 175, 2, 32, "Output",ExpressionUUID->"be994978-bcd7-41c8-b45b-ff3f3832ed4d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193971, 3309, 302, 6, 28, "Input",ExpressionUUID->"171590db-393b-4491-835c-2fa13a7fa4f5"],
Cell[194276, 3317, 39131, 651, 89, "Output",ExpressionUUID->"8ac05b8c-2db6-4685-8535-6d8c33fe07b2"]
}, Open  ]],
Cell[233422, 3971, 580, 14, 28, "Input",ExpressionUUID->"942b293e-fe48-49a0-980f-838500c3d9b0"],
Cell[234005, 3987, 540, 13, 28, "Input",ExpressionUUID->"502d9ca2-67ee-485d-b875-42b07e10fc3a"],
Cell[CellGroupData[{
Cell[234570, 4004, 211, 3, 28, "Input",ExpressionUUID->"61e91e64-1b7b-4ed0-ad3f-185401845aa2"],
Cell[234784, 4009, 178, 2, 32, "Output",ExpressionUUID->"466f3cec-456f-4f51-8b9d-ef50e63a1897"]
}, Open  ]],
Cell[CellGroupData[{
Cell[234999, 4016, 1612, 34, 67, "Input",ExpressionUUID->"794910ec-5433-4c00-b4a3-be6fa2fd3f76"],
Cell[236614, 4052, 39777, 759, 52, "Output",ExpressionUUID->"696dc610-1fa0-4ff7-960c-1cfa567a2bab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[276428, 4816, 469, 8, 28, "Input",ExpressionUUID->"6d6f095f-ccc4-4031-8254-5d13df943736"],
Cell[276900, 4826, 38032, 725, 52, "Output",ExpressionUUID->"9ab8091e-c44a-47ff-9811-0f9f6d01e1f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[314969, 5556, 344, 6, 28, "Input",ExpressionUUID->"cf14139e-f989-406d-b0dc-2bc1a9eef062"],
Cell[315316, 5564, 190, 2, 32, "Output",ExpressionUUID->"1427638b-1624-4041-ae6a-307424187796"]
}, Open  ]],
Cell[CellGroupData[{
Cell[315543, 5571, 291, 5, 28, "Input",ExpressionUUID->"d4ed508c-b6ae-4480-b9c2-ff5c5e2f2bb6"],
Cell[315837, 5578, 2667, 52, 204, "Output",ExpressionUUID->"9d9a5a76-4289-4ad3-895d-6420788f1edc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[318541, 5635, 236, 3, 28, "Input",ExpressionUUID->"a85b926a-8ba7-41f9-8a15-b520e8c1cfd6"],
Cell[318780, 5640, 28097, 455, 2601, "Output",ExpressionUUID->"58e50a80-17e4-440b-8b75-b784ccf15c1a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[346914, 6100, 927, 15, 28, "Input",ExpressionUUID->"df83bdce-7ed8-4b47-92b9-74afce65e808"],
Cell[347844, 6117, 663, 9, 32, "Output",ExpressionUUID->"8736e4ea-fcb2-4495-ac95-939f80525054"]
}, Open  ]],
Cell[348522, 6129, 91655, 1508, 81, "Input",ExpressionUUID->"fb1a0b49-a98d-4d34-b9f5-6779655374b2"],
Cell[CellGroupData[{
Cell[440202, 7641, 326, 8, 28, InheritFromParent,ExpressionUUID->"4250b12e-c05c-4d36-9a0b-d4f5acca6675"],
Cell[440531, 7651, 265, 6, 32, "Output",ExpressionUUID->"a56ea2bb-094c-47fd-9970-a7c8b0ef8626"]
}, Open  ]],
Cell[CellGroupData[{
Cell[440833, 7662, 279, 6, 28, "Input",ExpressionUUID->"de62ee23-4bf0-4541-ad5d-8782419857e0"],
Cell[441115, 7670, 383, 9, 32, "Output",ExpressionUUID->"160c8190-08d1-4081-a3ad-dcac2f0db2a7"]
}, Open  ]],
Cell[441513, 7682, 154, 3, 28, "Input",ExpressionUUID->"08677157-a0d2-443e-b039-b83a0a834109"],
Cell[CellGroupData[{
Cell[441692, 7689, 367, 7, 28, "Input",ExpressionUUID->"f13a1eeb-720a-446d-97b1-2c22fdbb2302"],
Cell[442062, 7698, 264, 4, 52, "Output",ExpressionUUID->"03a7492d-ef67-4974-a307-4954b9c9eb35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[442363, 7707, 436, 8, 28, "Input",ExpressionUUID->"04bcf019-b83c-4ca1-a0b8-da7a033eff7d"],
Cell[442802, 7717, 368, 6, 32, "Output",ExpressionUUID->"cfe1bd64-bc4b-4e98-8729-42ec06847a22"]
}, Open  ]],
Cell[CellGroupData[{
Cell[443207, 7728, 237, 4, 28, "Input",ExpressionUUID->"a99b7e89-c87f-424c-a749-968dc278541f"],
Cell[443447, 7734, 36021, 687, 120, "Output",ExpressionUUID->"67459dbc-3ed7-4b47-b1ca-9ac865f2e039"]
}, Open  ]],
Cell[CellGroupData[{
Cell[479505, 8426, 667, 11, 28, "Input",ExpressionUUID->"d1acbcf4-ef2f-4993-be45-cd2a0bc369cb"],
Cell[480175, 8439, 441, 6, 32, "Output",ExpressionUUID->"e60511ac-e831-4e33-81e9-23bb6f5a1248"]
}, Open  ]]
}
]
*)

