(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    526188,       9128]
NotebookOptionsPosition[    520719,       9028]
NotebookOutlinePosition[    521116,       9044]
CellTagsIndexPosition[    521073,       9041]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{"path", " ", "=", " ", 
  "\"\<C:\\\\Users\\\\enego\\\\OneDrive\\\\Documents\\\\GitHub\\\\durhack22\\\
\\ML\\\\mathematics_dataset-v1.0\\\\train-easy\>\""}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allFiles", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<*.txt\>\"", ",", " ", "path"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"allData", "=", 
   RowBox[{"AssociationMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Import", "[", "#", "]"}], "<>", 
       RowBox[{"Import", "[", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"#", ",", 
          RowBox[{"\"\<train-easy\>\"", "->", "\"\<train-hard\>\""}]}], "]"}],
         "]"}], " ", "<>", 
       RowBox[{"Import", "[", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"#", ",", 
          RowBox[{"\"\<train-easy\>\"", "->", "\"\<train-medium\>\""}]}], 
         "]"}], "]"}]}], "&"}], ",", " ", "allFiles"}], "]"}]}], 
  ";"}], "\n"}], "Input",
 CellChangeTimes->{{3.8778676194934196`*^9, 3.877867619494424*^9}, {
  3.877867652790508*^9, 3.8778676796389017`*^9}, {3.8778677201826553`*^9, 
  3.877867737541868*^9}, {3.877867795579109*^9, 3.877867798733878*^9}, {
  3.877868010544079*^9, 3.877868092437383*^9}, {3.877868188077515*^9, 
  3.8778682321209707`*^9}, {3.8778685162850137`*^9, 3.8778685377268286`*^9}, {
  3.8778686643731728`*^9, 3.8778686801914*^9}, {3.877877266073909*^9, 
  3.8778772673527126`*^9}, {3.877877367652896*^9, 3.877877373172736*^9}, {
  3.8778778762332964`*^9, 3.8778779118933926`*^9}, {3.8778780112134557`*^9, 
  3.8778780205933304`*^9}},
 CellLabel->
  "In[172]:=",ExpressionUUID->"471d7cd1-6d71-4f5e-8826-34cf5f21b09d"],

Cell[BoxData["\<\"C:\\\\Users\\\\enego\\\\OneDrive\\\\Documents\\\\GitHub\\\\\
durhack22\\\\ML\\\\mathematics_dataset-v1.0\\\\train-easy\"\>"], "Output",
 CellChangeTimes->{
  3.877868681829983*^9, 3.8778772679428587`*^9, {3.877877349372833*^9, 
   3.877877374193051*^9}, 3.8778779127333727`*^9, 3.877878021083578*^9},
 CellLabel->
  "Out[172]=",ExpressionUUID->"e0782424-f996-477b-a7d5-8b4ccc573bde"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"allData", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.877877354268035*^9, 3.877877355762557*^9}, {
  3.8778779748236914`*^9, 3.877877978363596*^9}},
 CellLabel->
  "In[190]:=",ExpressionUUID->"9597b77d-1996-42c1-bc5a-354003f55ac8"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{
      "\"Let w be (-1 + 13)*3/(-6). Let b = w - -6. Let i = 2 - b. Solve -15 \
= 3*c + i*c for c.\\n-3\\nSuppose -c + 4*v + 2 = -24, -4*c - 3*v + 9 = 0. \
Solve 2*b - c = -b for b.\\n2\\nLet v(k) = k**3 + k**2 - k - 3. Let d be \
v(0). Let a be ((-15)/2)/d*4. Let x = a + -8. Solve -3 + 11 = x*p for \
p.\\n4\\nLet i(l) = l\"", "\[Ellipsis]", 
       "\"Solve -v*f + 0*f - 20 = 0 for f.\\n-4\\nLet s be -37 + (-4 - (0 + \
-3)). Let w = -27 - s. Let d = w + -11. Solve -b + d = -3 for \
b.\\n3\\nSuppose -s = -0*s - 4. Suppose s = -4*m + 24. Solve m = 4*o + 17 for \
o.\\n-3\\nLet o be 7/2 + (-8)/(-16). Let f be 1/(-2) + (-931)/(-38). Solve \
-o*j + f - 8 = 0 for j.\\n4\""}], Short[#, 5]& ], "line" -> 190, "sessionID" -> 
   25974417297526019872, "byteCount" -> 186816840, "size" -> 5, "stored" -> 
   False, "expr" -> Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, 
   "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.8778773561531725`*^9, 3.8778774234226885`*^9, 
  3.8778779806134524`*^9, 3.877883823368598*^9},
 CellLabel->
  "Out[190]=",ExpressionUUID->"0670287e-5c21-41b1-9661-6c7e2dfb3956"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"allData", " ", "=", " ", 
   RowBox[{"KeyMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringDelete", "[", 
       RowBox[{
        RowBox[{"StringDelete", "[", 
         RowBox[{
          RowBox[{"StringDelete", "[", 
           RowBox[{"#", ",", " ", "path"}], "]"}], ",", "\"\<.txt\>\""}], 
         "]"}], ",", "\"\<\\\\\>\""}], "]"}], "&"}], ",", " ", "allData"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.877867658395599*^9, 3.8778676604832783`*^9}, {
  3.8778683050991335`*^9, 3.877868352512296*^9}, {3.877868417089904*^9, 
  3.877868441382156*^9}, {3.8778684728626595`*^9, 3.877868485272497*^9}, {
  3.877868621808941*^9, 3.87786863637586*^9}, {3.8778688615371943`*^9, 
  3.877868909805746*^9}, {3.8778689637312818`*^9, 3.8778690226422677`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"03aff200-9994-46bc-a879-99c07f969c2d"],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.877868958520302*^9, 3.8778689596160145`*^9}, {
   3.8778690031116624`*^9, 3.877869004122608*^9}, {3.8778692625899525`*^9, 
   3.877869310649746*^9}, {3.8778693409289675`*^9, 3.8778693467777033`*^9}, 
   3.877869387016205*^9},ExpressionUUID->"5eea092a-d7d8-4819-9455-\
4290999c4249"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"{", 
       RowBox[{
        "\"Is 2022618131 prime?\"", ",", "\"Is 28388081507 a prime number?\"",
          ",", "\"Is 183707648003 a prime number?\"", ",", 
         "\"Is 1397858047 a prime number?\"", ",", 
         "\"Is 29804034305 composite?\"", ",", 
         "\"Is 1071924415 a composite number?\"", ",", 
         "\"Is 18434518303 a prime number?\"", ",", 
         "\"Is 1153523218 a prime number?\"", ",", 
         "\"Is 5300047465 a composite number?\"", ",", 
         "\"Is 43490939447 a prime number?\"", ",", 
         TemplateBox[{"666647"}, "OutputSizeLimit`Skeleton"], ",", 
         "\"Is 405806419 composite?\"", ",", "\"Is 21754461847 prime?\"", ",",
          "\"Is 642686599 prime?\"", ",", "\"Is 100254277 prime?\"", ",", 
         "\"Is 1154536319 a composite number?\"", ",", 
         "\"Is 2240503643 prime?\"", ",", 
         "\"Is 43032646511 a composite number?\"", ",", 
         "\"Is 16620129433 prime?\"", ",", "\"Is 13697041861 prime?\""}], 
       "}"}], Short[#, 5]& ], "line" -> 61, "sessionID" -> 
   25974417297526019872, "byteCount" -> 42212712, "size" -> 5, "stored" -> 
   False, "expr" -> Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, 
   "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{{3.8778690046186104`*^9, 3.8778690252982764`*^9}, {
   3.87786927465613*^9, 3.877869312288704*^9}, 3.877869347778366*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"2a1f8d78-d6a4-4b6c-b497-5ade158fa98e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"largeQuestion", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"StringSplit", "[", 
       RowBox[{"#", ",", " ", "\"\<\\n\>\""}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", ";;", "2"}], "]"}], "]"}], "&"}], "/@", " ", 
    "allData"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8778646110126433`*^9, 3.8778646383377028`*^9}, {
   3.877867446930006*^9, 3.8778674483206344`*^9}, {3.8778693623812475`*^9, 
   3.8778694020131445`*^9}, 
   3.8778694978331327`*^9},ExpressionUUID->"cace77be-6530-4cd7-98b7-\
4f450b7d0339"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       RowBox[{
         RowBox[{"\"algebra__linear_1d_composed\"", "\[Rule]", 
           RowBox[{"{", 
             
             RowBox[{"\"Suppose 1249 + 1001 = -7*l + 17*l. Solve -l = 338*n - \
313*n for n.\"", ",", 
               "\"Suppose -2*i + 20 = 5*o, 2*o - 4 = 3*i + o. Suppose -g + 2 \
= i, 4*g - 6*g = -5*u - 19. Let f be -6 + 3 + 2 + u/(-1). Solve -f*l = -l for \
l.\"", ",", 
               "\"Let s = 3 - 3. Suppose 20 = 8*t - 4. Let h = t - s. Solve \
4*a = h*a - 3 for a.\"", ",", 
               TemplateBox[{"666660"}, "OutputSizeLimit`Skeleton"], ",", 
               "\"Let k(s) = -s**3 - 9 - 6*s**2 + 3709*s - 3695*s - 1. Let x \
be k(-8). Solve 2*z + 16 = x*z for z.\"", ",", 
               "\"Let h be -39*(13/(-39) - 1). Solve 10 = 7*q + h for q.\"", 
               ",", "\"Let r be (-453)/1510 - 144729/(-30). Solve 7*g = -4845 \
+ r for g.\""}], "}"}]}], ",", 
         TemplateBox[{"54"}, "OutputSizeLimit`Skeleton"], ",", 
         RowBox[{
           RowBox[{"\"pr\"", "\[Ellipsis]", "\"nce\""}], "\[Rule]", 
           TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"]}]}], 
       "\[RightAssociation]"}], Short[#, 5]& ], "line" -> 62, "sessionID" -> 
   25974417297526019872, "byteCount" -> 3996800056, "size" -> 5, "stored" -> 
   False, "expr" -> Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, 
   "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.877869472973542*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"b35c618b-4525-4357-ac40-fc1ddc3647ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questions", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"RandomSample", "[", 
     RowBox[{"#", ",", "16000"}], "]"}], "&"}], "/@", " ", 
   "largeQuestion"}]}]], "Input",
 CellChangeTimes->{{3.877869631358019*^9, 3.8778696469613247`*^9}, {
  3.8778697417460165`*^9, 3.877869758907544*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"33f330fe-adce-4e6c-ab9c-1f10a70c8c9f"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       RowBox[{
         RowBox[{"\"algebra__linear_1d_composed\"", "\[Rule]", 
           RowBox[{"{", 
             
             RowBox[{"\"Suppose -1382*k + 1464*k = 11972. Solve -32*w + 78 = \
-k for w.\"", ",", 
               "\"Suppose 28*f - 972 = -30*f + 4*f. Solve f*q - q - 34 = 0 \
for q.\"", ",", 
               "\"Suppose 0 = -28*p + 16688 - 3276. Solve -12*t = p - 491 for \
t.\"", ",", "\"Let h = 2018 - 1882. Solve 46*l = 80*l + h for l.\"", ",", 
               TemplateBox[{"15993"}, "OutputSizeLimit`Skeleton"], ",", 
               "\"Suppose -y - 24 = -4*y. Let q(m) = -16*m - 139. Let j be \
q(-9). Solve -j*d = -d - y for d.\"", ",", 
               "\"Let i(l) = 3*l**2 + 2*l - 11. Suppose 23 = 5*k + 4*m, -4*k \
- m + 8 = -6. Let d be i(k). Solve -d*h - 2 = -20*h for h.\"", ",", 
               "\"Let o = -1117 + 1124. Solve 0*m - o*m = 22*m for m.\""}], 
             "}"}]}], ",", 
         TemplateBox[{"54"}, "OutputSizeLimit`Skeleton"], ",", 
         RowBox[{
           RowBox[{"\"pro\"", "\[Ellipsis]", "\"ence\""}], "\[Rule]", 
           TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"]}]}], 
       "\[RightAssociation]"}], Short[#, 5]& ], "line" -> 63, "sessionID" -> 
   25974417297526019872, "byteCount" -> 95929672, "size" -> 5, "stored" -> 
   False, "expr" -> Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, 
   "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.8778697624520836`*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"9ccb5113-0448-4943-b1a9-a4aac170b252"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"naturalQuestions", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"StringRiffle", "[", 
       RowBox[{"StringSplit", "[", "#", "]"}], "]"}], "&"}], "/@", " ", 
     RowBox[{"StringReplace", "[", 
      RowBox[{"#", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<-\>\"", "->", " ", "\"\< minus \>\""}], ",", " ", 
         RowBox[{"\"\<+\>\"", "->", " ", "\"\<plus\>\""}], ",", " ", 
         RowBox[{"\"\<=\>\"", "->", " ", "\"\<equals\>\""}], ",", " ", 
         RowBox[{"\"\<**\>\"", "->", " ", "\"\<to the power of\>\""}], ",", 
         " ", 
         RowBox[{"\"\<.\>\"", "->", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"\"\<*\>\"", "->", " ", "\"\< multiply \>\""}], ",", " ", 
         RowBox[{"\"\<(\>\"", "->", " ", "\"\<open bracket \>\""}], ",", " ", 
         RowBox[{"\"\<)\>\"", "->", " ", "\"\< close bracket \>\""}]}], " ", 
        "}"}]}], "]"}]}], "&"}], "/@", " ", "questions"}]}]], "Input",
 CellChangeTimes->{{3.8778698918198395`*^9, 3.877869900555871*^9}, {
  3.877869935239072*^9, 3.877869954233689*^9}, {3.877870266385372*^9, 
  3.877870338718854*^9}, {3.8778703713233986`*^9, 3.877870431263208*^9}, {
  3.8778704728997173`*^9, 3.877870473838518*^9}, {3.877870671227564*^9, 
  3.877870695903322*^9}, {3.877870735793762*^9, 3.8778707837546015`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"56f71839-db6a-4dab-ba8c-36be508ffc37"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       RowBox[{
         RowBox[{"\"algebra__linear_1d_composed\"", "\[Rule]", 
           RowBox[{"{", 
             
             RowBox[{"\"Suppose minus 1382 multiply k plus 1464 multiply k \
equals 11972 Solve minus 32 multiply w plus 78 equals minus k for w\"", ",", 
               "\"Suppose 28 multiply f minus 972 equals minus 30 multiply f \
plus 4 multiply f Solve f multiply q minus q minus 34 equals 0 for q\"", ",", 
               TemplateBox[{"15997"}, "OutputSizeLimit`Skeleton"], ",", 
               "\"Let o equals minus 1117 plus 1124 Solve 0 multiply m minus \
o multiply m equals 22 multiply m for m\""}], "}"}]}], ",", 
         TemplateBox[{"54"}, "OutputSizeLimit`Skeleton"], ",", 
         RowBox[{"\"probability__swr_p_sequence\"", "\[Rule]", 
           RowBox[{"{", 
             
             RowBox[{"\"Four letters picked without replacement from {x: 6, \
v: 4, y: 9} Give prob of sequence xyyx\"", ",", 
               TemplateBox[{"15998"}, "OutputSizeLimit`Skeleton"], ",", 
               
               RowBox[{
                "\"What is prob of\"", "\[Ellipsis]", 
                 "\" 1, u: 6, r: 4}?\""}]}], "}"}]}]}], 
       "\[RightAssociation]"}], Short[#, 5]& ], "line" -> 72, "sessionID" -> 
   25974417297526019872, "byteCount" -> 170664600, "size" -> 5, "stored" -> 
   False, "expr" -> Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, 
   "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.87787044541638*^9, 3.877870480493387*^9, 
  3.8778707177023935`*^9, 3.877870765179161*^9, 3.877870817411718*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"6ab45575-707d-445d-abe3-05e7b58263c7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"getAsso", "[", "key_", "]"}], " ", ":=", " ", 
  RowBox[{"Normal", "[", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"naturalQuestions", "[", "key", "]"}], ",", 
     RowBox[{
      RowBox[{"key", "&"}], "/@", 
      RowBox[{"naturalQuestions", "[", "key", "]"}]}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.877871823781003*^9, 3.877871899255652*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"c66fe4c7-e040-4a49-85ab-8a653c6ca362"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plainData", " ", "=", " ", 
  RowBox[{"Association", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"getAsso", "[", "#", "]"}], "&"}], "/@", 
     RowBox[{"Keys", "[", "naturalQuestions", "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8778710768678255`*^9, 3.8778711567551875`*^9}, {
   3.8778712316314077`*^9, 3.877871250902561*^9}, {3.87787130362354*^9, 
   3.8778713162635016`*^9}, {3.877871416203635*^9, 3.8778714300019693`*^9}, {
   3.877871531107215*^9, 3.87787156998732*^9}, {3.8778716919165034`*^9, 
   3.8778717385247927`*^9}, {3.8778717760951157`*^9, 3.877871803385377*^9}, 
   3.877871836801214*^9, {3.8778719032751455`*^9, 3.877872018896224*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"261e89e9-bd9a-4027-8280-d8c38bdd0e2f"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       RowBox[{
         RowBox[{
          "\"Suppose minus 1382 multiply k plus 1464 multiply k equals 11972 \
Solve minus 32 multiply w plus 78 equals minus k for w\"", "\[Rule]", 
           "\"algebra__linear_1d_composed\""}], ",", 
         RowBox[{
          "\"Suppose 28 multiply f minus 972 equals minus 30 multiply f plus \
4 multiply f Solve f multiply q minus q minus 34 equals 0 for q\"", "\[Rule]",
            "\"algebra__linear_1d_composed\""}], ",", 
         TemplateBox[{"892541"}, "OutputSizeLimit`Skeleton"], ",", 
         RowBox[{
          "\"What is prob of sequence vzu when three letters picked without \
replacement from {v: 4, f: 1, z: 2, t: 1, u: 6, r: 4}?\"", "\[Rule]", 
           "\"probability__swr_p_sequence\""}]}], "\[RightAssociation]"}], 
     Short[#, 5]& ], "line" -> 87, "sessionID" -> 25974417297526019872, 
   "byteCount" -> 296547568, "size" -> 5, "stored" -> False, "expr" -> 
   Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{
  3.8778714240846796`*^9, 3.87787153640524*^9, 3.8778715704560966`*^9, {
   3.8778716991133184`*^9, 3.8778717076628957`*^9}, 3.8778717390861506`*^9, {
   3.877871945697118*^9, 3.8778720253043337`*^9}},
 CellLabel->"Out[87]=",ExpressionUUID->"db01e79d-4645-464c-804b-38e575dbb4b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bert", " ", "=", " ", 
  RowBox[{
  "NetModel", "[", 
   "\"\<DistilBERT Trained on BookCorpus and English Wikipedia Data\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.877872033825715*^9, 3.8778720359403205`*^9}, {
  3.8778720669637213`*^9, 3.8778720747660184`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"ebf28abf-d7ca-412c-aa3b-a1980815223e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"string\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "embedding" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 2}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "part1" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 2}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]]|>|>, 
                    "embeddingwords" -> <|
                    "Type" -> "Embedding", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{30522, 
                    768}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {768}, "ClassCount" -> 30522, 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083]}, "$OutputDimension" -> 
                    768|>, "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "posembed" -> <|
                    "Type" -> "SequenceIndices", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Maximum" -> 512, "$Length" -> 
                    NeuralNetworks`LengthVar[2145573083]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`IndexIntegerT[1, 512]]|>|>, 
                    "embeddingpos" -> <|
                    "Type" -> "Embedding", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 
                    768}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {768}, "ClassCount" -> 512, 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083]}, "$OutputDimension" -> 
                    768|>, "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`IndexIntegerT[1, 512]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "inputCombine" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# + #2& ],
                     "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "normalize" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{768}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.1, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "part1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "embeddingwords", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "posembed", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "inputCombine", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "embeddingwords", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "embeddingpos", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "posembed", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "inputCombine", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "embeddingpos", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "inputCombine", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "normalize", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"]}|>, 
                    "encoder" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"attention" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[0.125 #& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {12, 64}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{12, 
                    64}, NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Attention", "Arrays" -> <||>, 
                    "Parameters" -> <|"ScoringNet" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Query" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"1" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{64},
                     NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}|>, "Mask" -> None, "ScoreRescaling" -> None, 
                    "MultiHead" -> True, "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, "$QueryShape" -> {
                    NeuralNetworks`LengthVar[2145573083], 12}, 
                    "$QueryChannels" -> {64}, "$KeyChannels" -> {64}, 
                    "$ValueChannels" -> {64}, "Dropout" -> 0.|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Value" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT], "Query" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 
                    NeuralNetworks`LengthVar[2145573083]}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 768, "$InputDimensions" -> {12, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2145573083], "$InputShape" -> 
                    NeuralNetworks`TensorT[{12, 64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 12, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"linear1" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3072, 
                    768}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    3072}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {3072}, "$OutputSize" -> 3072, 
                    "$InputSize" -> 768, "$InputDimensions" -> {768}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{768}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{3072}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.5 # (1 + Erf[0.7071067811865475 #])& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>|>, 
                    "linear2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{768, 
                    3072}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    768}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {768}, "$OutputSize" -> 768, 
                    "$InputSize" -> 3072, "$InputDimensions" -> {3072}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2145573083],
                     "$InputShape" -> NeuralNetworks`TensorT[{3072}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{768}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 3072}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dropout" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|"DropoutProbability" -> 0.1, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{768}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{768}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "Epsilon" -> 
                    1.*^-12, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    "$StatsDimensions" -> {768}, "Unbiased" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "embedding", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "encoder", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "embedding", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "encoder", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|"Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 2}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]], "Type" -> 
                    "Function", "Function" -> Composition[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    Map[List]], "OutputType" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 2}, 
                    NeuralNetworks`IndexIntegerT[1, 30522]], "Pattern" -> 
                    NeuralNetworks`ValidatedParameter[
                    Blank[String]], "Batched" -> True, "$Version" -> "13.1.3",
                     "Initialization" -> (Initialization :> None)|>|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2145573083], 768}, 
                    NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"string\""}, {
                    TemplateBox[{"\"matrix \"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]2\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of indices \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\[VeryThinSpace]range: \"", "1", 
                    "\"..\"", "30522", "\"\[VeryThinSpace])\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"embedding\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "embedding"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "embedding"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "embedding"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"encoder\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "encoder"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "6", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "encoder"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "encoder"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8778720786471195`*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"29d96446-0f91-4c8c-b639-d84d5951fc35"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"embedData", " ", "=", " ", 
   RowBox[{"KeyMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"bert", "[", 
       RowBox[{"#", ",", 
        RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}], "&"}], ",", 
     RowBox[{"Association", "[", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"Normal", "[", "plainData", "]"}], ",", " ", "20000"}], "]"}],
       "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8778720872967644`*^9, 3.8778721078969765`*^9}, {
  3.877872142539405*^9, 3.877872146151673*^9}, {3.8778724039766645`*^9, 
  3.877872438573486*^9}, {3.8778724819289227`*^9, 3.877872497508671*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"e63e2566-a2b4-4a27-a622-1406c6a2809c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"mixedData", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Normal", "[", "embedData", "]"}], ",", " ", 
     RowBox[{"Length", "[", 
      RowBox[{"Normal", "[", "embedData", "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "mixedData", "]"}]}], "Input",
 CellChangeTimes->{{3.877874059402655*^9, 3.877874145302004*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"f56ccbb8-d6c0-4107-8439-99e9252c2473"],

Cell[BoxData["20000"], "Output",
 CellChangeTimes->{3.877874168475562*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"6dd6995b-c202-4d08-8eee-82a758cf23fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixPlot", "[", 
  RowBox[{
   RowBox[{"Keys", "[", "mixedData", "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8778741828753433`*^9, 3.877874210161519*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"171590db-393b-4491-835c-2fa13a7fa4f5"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
ZbcAoX/C75ucEeHhxbxr13kMMlfySiWqCG/fjDM5S/qhY1tcwMa/QjwMWXX8
QikHl17MmVo6lcy35tJC3Twa776M3G2fKkJApMaJr8+FMPn7kNmRyOCY+t2k
4QciaG7I2rHRWIDTEm+SrtTRuD2wzdlLifS8BZJej/41oV11VSFHloU/311C
liwVINH+5I6nUiJsr5F8sXCI8MyGeL6iE8lTWZUlVZP7kc6Sr4qP46E6JiDv
ziQhlr9utt67VIR7O95ciiB8qrxGtk6J+Hqhq9HFiVea0bTo8Tjz7Sx8vfKl
PIb07KAH/bdfiguQa7VZuT6TxkW5s6fOTxahpGt1bnIHA7mVnpeOZwrBbt4s
WyTGQXuyU5aPGwO9A78fRcwVYFnOrO0fWERPXrbH+kPYCCo8wjV9QGHliJY6
9GhMGDlmHOPIYNmDzRM2EJ7f/qOhdeMOku922VYzLRlMSrH89zKCAn8Ne6LE
tF6M8P5s+LiJwe1FgocvrxE///aEN/SkB++y1zrPIv0x/PrKopYiPhoGvrZO
PNeJXVWGCu1ZDO5MrGq/XibCoiX9s+PNSU8fDX1wmviekmmyqulSCmsuVLvH
z+rGubjOOx/ni1Bb4lSs/JzG6wTfgKxIHnyyO77K/6Ww42X57J/PaCh2GweE
TRKhSXHlg3XXRAgMdJZzUxRBfLr/f9k7hTjpnvXSZzYXxyx1h23IXNdpvWJq
CO8ragakzHzPYPO0LXIXNwgRqHFx/Dg+C/fs/Dde1uOjqjrs4Ys0ITpr2Rt7
yDm2ttztVZjbhIFhWlwmcQBN5lKeStsF2HCra8xvmMai7VeaVdfwMWeZ9ZjO
sXaoDX4pu1FJ+uiTLaFLjwnxQ7LAsd2UjaNTXodcsyEc9XRGj38OhaK5Mk+j
cnuxl+btffmV8IzhCaU34jSGjk229GznIL1tZ1lUggijyrrqiVEi+Px5VnyT
9OrMqC+7ErcxKNcWN7xN7jE7cZb7de1ehBm/Werg2wZ1j17l5o9s+H3JGRqJ
o7D0x9vH/VcYjD6gjDhWAjzXlv07+Uw/ZpXO1Gi5R6P/lnpslw8XtkXXfK8/
asD83R6LTcYPYPbvLeHTlvIxw+hX3gR7IWJL/Vr1TjGwbpt0by/pJXNWR025
+aYPgc8u3g0ra4PdZeeJJhQbN1nTtqYSvUjcClefbMKC9Hzp8WJdfNQfH40u
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
uLQ0YPCFPuFHF0n99Vt40HwQOdaa3oHK+oGiNAMuZu77KZr4VIA5j/0bbwdQ
yBFr6tOZL0Tkprq/9t0UXr1YlTfpA/Ht5zOzpDIo1HEN7GUH+HhmVTweMpuB
TJuFDwzCKHDTg139/f5/H/9+xVnFPdBPNDmxdlETybkvrsJ5hA/Xms8MqOfh
Gcu5SfEoDSf719HnaPJxsmunGZA9dd7bKcoP60K0gEUlEO+1fXpxyZ3bfOJt
cwZtkmiceHiF/v/3ppgVbYyEvxC2LyaGq2ylsPy49GKxBzzYdLD7Cl264LfJ
Z2xNDAWpT+XhA8RPTKyPQVq7F7+Ojb+3Inx7bmtdzVpp4hkpMTFhugLESaZm
TtQQwJhe96bInkKNHXt+hi8N5g65+ve6hOvPb1yx3JiHPpvnDSJ7OxCz4rjG
0eFW8DV/zdydyELj90dmzsSP/tjbntIlPdWRKesu/UaIJ23WN3e/5uB8R27H
WuIFy+6M/JIPFCL2hExFxCQOjnheq5F8QHhDTiSlJp0HPQXfe7lGQixZdfLT
smCSu14nn4nPoBFtu87inqYANXe3GHcuoPCVM/zudAcXMX23dB5x2+Cr80N8
w48OpFhF5AwEsKHYpnbhpD0fYVdcFixUaIePtlVLpoAFxq7fM7Mm8eEYW3FP
kM1BeJivjg6Z/+eKCm4TCFdedqw6wgjsQtCanQoVXWyIHI2Z/f4mH7PEDk41
u0h88VvlmZXufORRRSEt6T2YJeKuVvqTidwtbts76sj1Z2wNPOkoROP0nz67
CQcW6s1YcPQE4Ture7TnMSaWxqfLN5P5lmi92F9OPMA+LexR/VkBzAsS9A87
U0gM1lk6i/iMy5MX6aaafRArN7xtvK0ZkVY67ytyyOcp+7EhnZzTSCO9yW0m
Ddn7bq6cACHerfEeMBtjIyXSwPftzUZkjP/6u6yZgbnF1/dm8nm42nR0srMh
G96iXrxb0XyI6xR7t5QIodHlcF7/H4WmD1mHH5J+DQh3GrU/yEZpftktk51c
ZJ+OP2BfJECnasyeqGAKFekS09l1raje+bvF9joLVMC19L1fedgx9cN2b6ka
VE6I6Fq9qBvyS2Z8P6AogFzsCod70ylcaXQu2x7JhcE0B+2U5FZ0Hii5gG1s
1NZ7e4+Q+aRkv7mvrhbCryN29YRCCnNDZfkpBuTjuy8kJn5n4NHKtaU9lUJY
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
/ul+HiZMmCPSe6Ibm1UvnDotQeFMEz/V7DgXa34s+BXt0AoT/oeUyIsCPLDZ
PMT//+cJnBbYyRAelX9l/UtrkAfB2p7Fyx8JocMYvSuYRCM3U+NFTxc555Xc
m09KiHfLlYzKJTVhLU8zZOs1If5wvTwsSa+KfIjNn8SmscRn02xmNIW74kld
SRF86A/RX2LEerGFaef8d1I3lpppOa2aysGcJ4P9A2QPpubrxI6SXvS3qXhl
kibE4n1jM7TEaLIvhX/jt3Zi+MelScxoNqSd7dqCPfgo+xLvHmJG4UbWetWn
h3iwD6CftZh04obr4rKm0V5UZBkWL8rj4t/RA6KdzwT41q9mcLC1G1ujknQs
LnDwdniRp+0vPuSqOLMuktzd82xV9nCpAC9VlDdnkT13r9xo3lXdiKolp79r
DjAwcDsqS6qXh1eT1unOOkryoONpznx1Pk5cneT1V7yH3Id5JV/aGZgysf9N
oS4POe9NaxT/CDBoiXnr5WlE79gg+WKURunei5dEvfqgqVC63ayYBbvnZ/xf
WfGR9zvs/flkIWwveh59N4ODp9P8J4SKCnDSrfj1JcKXrS/Dmy2KGnEvpe9s
hIABG86m/WeZPKQfeyxvOpfC2rA/0U+quUgonG3hm9kGrlfa1o4njfjk/V3r
Ui8DWXqtN1w4PNQkpbyazuRi5jK/ql0zhLAvFO8+TziGNTrv3+JuIapcBlJb
SzmYdOEvszClCYfZNk+hxIK5mdZpLR4PGzY7yRW6k9xcsZPldqMLoSdYH+Zz
2ch/IK744g4f1Bk7g6CQamSFrHr64mcX/g6zpdcvFsBAv24bNYl4svM3zek+
XLxMyxgP0mxFxNn3hX4JNHy+Vy65HUx8+t+UDgPiU88+0nVOhIPSK1Y1N5G+
ml/raDB1Jo2Qc5UHzWkh9krO+hIlRuZZ773H3hvNCKqdsUImkIPKqXv8hcaE
A3c0PTDUpmCaajpTjfTYt5cj1m5PhTA4NG6YOIV4QYN0a8jqBhzI2j/+WZMB
9jvJJQIVPm7dfB49mS1EncRGw6vdHEx3vrLp+6RmnA9QOa9CfGznq765IR+J
J6Y6Zou8EmDudX+8edqKPQk7NWousTBOq+gtrOAhy4ozX7yZgq/3HetLaWQO
1BmNUzhMbBjIdN7v2w3jjOVZD9dzkHfGwSGHcNyp2T80B5pojHf+TC3y7sOJ
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
np9BclK3vOEOmV+TqRZhXlJ9MBi+6DNcTOHey/21r3cK8GGXtqBNhYlzY9oq
XorEZ1MLd9bdEsLK/WpKryuZh8x8MzFynff3quoYfRFCx0PhdTKLA035ZHvm
GwrmOy/1PF4pwOp9/zZ3FzEgYtLdOpv08pQblPG2bj7W7s10zOX2oq3/QsUn
ct0WD7J0PXq48D/xT09kpA1W/DI749B6zDjcFn6mvhf9wUVpB435EFHg/dIz
p7DGd8vrwMM8bPt66MEOm058lVTd2u3eit9nt51dG0A8p7R6hF3Iw3R+UMHU
t3wUvP3tdnMWhRf+H97lkxwZ1Z719WkiG+KL/y499YmPy0p9kl0sIbTdl+RM
I7zjpj2llNNMYdLvgA133tLgWIlNUrpFYfChnu5K4vP1sTYJ1MFeWJupNJsv
48NbXMW9p1SIJ/0Wjp/IeblzRp/2kty+Pe/DtjXfeWgN0p73dlk3+pUda/a1
MrBA9P6o62oegv7GX934WwDj9KRTtycR7h0uNn5H7tfTquX7xx+ykZl77Fys
tQDdGTaRVl4UJEN3JWw4SYPvanH8MPGJheY5/TrkXMN8esb7ZvPB2ynd9Uip
E1eURKQenmbDfkb2BN/dfPh6yh0W8vi4Lq/prLCSwq0jK7ad2Em848eExXXE
T0U3f99eeY6P3D9HJuj392B+RPqoewyNMebpyWNuNKTXi1Gik4TQqAhP+bqT
wioNR+a3Yh6mpqgsyBbrRtZ+tecvfJvQXc6u9zRjIjFZoli1ggftWdEdLy+R
vn/tElu3mvy5gmpVjRXAqaRWzXoHD5JqSr+qNwvxVrXSfM03Csd2dNZ/fcGF
Rp5z/KyfAvAXGz+1SSRzLV0VIbWIRs1aO/0HZUL80rRabd7OwY0sw/XbT1Hw
F15VCzQnvP5yyZjCFuLnIp+1f89rxL3nc9WlkhlQGLfWPUe4NFlG/VTrfhpz
p/wLZRMeH92n5nSA5MZi6bkiXgMNGLmkvscgggG1ao+3C8VIzm9PC3vt0Ykb
AVLJ7bFsOK4NXi9Bcv6Zy5IFLQk0KoLW7VUn/nbhgccTiy1CsG8Opx0yEEJJ
UoGxqZ9C/ctlm85X0FiZ8bE2KZLMxfjIwnjiNyO940bh+WSPTecZWKnx8EoG
FzNXCNHotStC/gOFNybSJRYbOLA+2enMVRXg3s/sK1oLCBdqqZWp+Tch45Zl
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
   "], {{0, 0}, {192, 24}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{23.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["5", TraditionalForm]}, {14.5, 
       FormBox["10", TraditionalForm]}, {9.5, 
       FormBox["15", TraditionalForm]}, {4.5, 
       FormBox["20", TraditionalForm]}, {0.5, 
       FormBox["24", TraditionalForm]}}, {{23.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["5", TraditionalForm]}, {14.5, 
       FormBox["10", TraditionalForm]}, {9.5, 
       FormBox["15", TraditionalForm]}, {4.5, 
       FormBox["20", TraditionalForm]}, {0.5, 
       FormBox["24", TraditionalForm]}}}, {{{0.125, 
       FormBox["1", TraditionalForm]}, {49.875, 
       FormBox["200", TraditionalForm]}, {99.875, 
       FormBox["400", TraditionalForm]}, {149.875, 
       FormBox["600", TraditionalForm]}, {191.875, 
       FormBox["768", TraditionalForm]}}, {{0.125, 
       FormBox["1", TraditionalForm]}, {49.875, 
       FormBox["200", TraditionalForm]}, {99.875, 
       FormBox["400", TraditionalForm]}, {149.875, 
       FormBox["600", TraditionalForm]}, {191.875, 
       FormBox["768", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]}]], "Output",
 CellChangeTimes->{{3.8778742023169036`*^9, 3.8778742108642993`*^9}},
 CellLabel->
  "Out[109]=",ExpressionUUID->"9546a430-fc9a-440d-9756-46aecfa3f5a8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"traingingData", ",", " ", "vtData"}], "}"}], " ", "=", " ", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{"mixedData", ",", 
     RowBox[{"0.75", "*", 
      RowBox[{"Length", "[", "mixedData", "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.877874227339921*^9, 3.877874267522001*^9}, {
  3.877874348198831*^9, 3.8778744117523966`*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"942b293e-fe48-49a0-980f-838500c3d9b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"testData", ",", " ", "validationData"}], "}"}], " ", "=", " ", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{"vtData", ",", " ", 
     RowBox[{"0.8", " ", "*", " ", 
      RowBox[{"Length", "[", "vtData", "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8778744152546663`*^9, 3.8778744869517035`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"502d9ca2-67ee-485d-b875-42b07e10fc3a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "testData", "]"}]], "Input",
 CellChangeTimes->{{3.877874491503986*^9, 3.877874494252329*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"61e91e64-1b7b-4ed0-ad3f-185401845aa2"],

Cell[BoxData["4000"], "Output",
 CellChangeTimes->{3.8778745013107395`*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"195c16f0-e858-45f0-a6f7-c9c85b60c2f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"network", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DropoutLayer", "[", 
      RowBox[{"\"\<Input\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<Varying\>\"", ",", "768"}], "}"}]}], "]"}], ",", 
     RowBox[{"NetBidirectionalOperator", "[", 
      RowBox[{"LongShortTermMemoryLayer", "[", "150", "]"}], "]"}], 
     RowBox[{"(*", 
      RowBox[{",", " ", 
       RowBox[{"GatedRecurrentLayer", "[", "50", "]"}]}], "*)"}], ",", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"NetMapOperator", "[", 
        RowBox[{"LinearLayer", "[", "30", "]"}], "]"}], ","}], "*)"}], 
     RowBox[{"LongShortTermMemoryLayer", "[", "56", "]"}], ",", 
     RowBox[{"AggregationLayer", "[", 
      RowBox[{"Total", ",", "1"}], "]"}], ",", " ", 
     RowBox[{"LinearLayer", "[", "56", "]"}], ",", 
     RowBox[{"SoftmaxLayer", "[", " ", 
      RowBox[{"\"\<Output\>\"", " ", "->", " ", 
       RowBox[{"NetDecoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Class\>\"", ",", 
          RowBox[{"Keys", "[", "questions", "]"}]}], "}"}], "]"}]}], "]"}]}], 
    " ", "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8778721142809505`*^9, 3.8778721163008285`*^9}, 
   3.8778721491920824`*^9, {3.87787224345673*^9, 3.877872276093667*^9}, {
   3.8778723505081396`*^9, 3.877872357014615*^9}, {3.8778740351856394`*^9, 
   3.8778740563043656`*^9}, 3.8778745094360185`*^9, {3.877874578477234*^9, 
   3.877874602484439*^9}, {3.8778746372438493`*^9, 3.8778746646889796`*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"794910ec-5433-4c00-b4a3-be6fa2fd3f76"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "2" -> <|
                    "Type" -> "NetBidirectional", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "ForwardNet" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 150, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    768, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2120082207], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> NeuralNetworks`TensorT[{150}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "BackwardNet" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{150, 768}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{150, 150}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 150, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    768, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2120082207], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> NeuralNetworks`TensorT[{150}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "Aggregation" -> Catenate, "DataReversed" -> Automatic, 
                    "$InputTensor" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT], "$ForwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 150}, 
                    NeuralNetworks`RealT], "$BackwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 300}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "ForwardState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "ForwardCellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "BackwardState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "BackwardCellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{56, 300}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{56, 300}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{56, 300}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{56, 300}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 56, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    300, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2120082207], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 300}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 56}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{56, 56}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {56}, "$OutputSize" -> 56, 
                    "$InputSize" -> 56, "$InputDimensions" -> {56}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{56}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{
                    "\"algebra__linear_1d_composed\"", 
                    "\"algebra__linear_1d\"", 
                    Skeleton[53], "\"probability__swr_p_sequence\""}, {
                    "algebra__linear_1d_composed", "algebra__linear_1d", 
                    "algebra__linear_2d_composed", "algebra__linear_2d", 
                    "algebra__polynomial_roots_composed", 
                    "algebra__polynomial_roots", 
                    "algebra__sequence_next_term", 
                    "algebra__sequence_nth_term", 
                    "arithmetic__add_or_sub_in_base", 
                    "arithmetic__add_or_sub", "arithmetic__add_sub_multiple", 
                    "arithmetic__div", "arithmetic__mixed", 
                    "arithmetic__mul_div_multiple", "arithmetic__mul", 
                    "arithmetic__nearest_integer_root", 
                    "arithmetic__simplify_surd", 
                    "calculus__differentiate_composed", 
                    "calculus__differentiate", "comparison__closest_composed",
                     "comparison__closest", 
                    "comparison__kth_biggest_composed", 
                    "comparison__kth_biggest", "comparison__pair_composed", 
                    "comparison__pair", "comparison__sort_composed", 
                    "comparison__sort", "measurement__conversion", 
                    "measurement__time", "numbers__base_conversion", 
                    "numbers__div_remainder_composed", 
                    "numbers__div_remainder", "numbers__gcd_composed", 
                    "numbers__gcd", "numbers__is_factor_composed", 
                    "numbers__is_factor", "numbers__is_prime_composed", 
                    "numbers__is_prime", "numbers__lcm_composed", 
                    "numbers__lcm", "numbers__list_prime_factors_composed", 
                    "numbers__list_prime_factors", 
                    "numbers__place_value_composed", "numbers__place_value", 
                    "numbers__round_number_composed", "numbers__round_number",
                     "polynomials__add", "polynomials__coefficient_named", 
                    "polynomials__collect", "polynomials__compose", 
                    "polynomials__evaluate_composed", "polynomials__evaluate",
                     "polynomials__expand", "polynomials__simplify_power", 
                    "probability__swr_p_level_set", 
                    "probability__swr_p_sequence"}], "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 56, "$Rank" -> 0, 
                    "$Version" -> "13.1.3"|>|>, 
                    "InteriorStates" -> <|{2, "ForwardState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "ForwardState"], {
                    2, "ForwardCellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "ForwardCellState"], {
                    2, "BackwardState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "BackwardState"], {
                    2, "BackwardCellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "BackwardCellState"], {
                    3, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "3", "States", "State"], {
                    3, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "States", "CellState"]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetBidirectionalOperator", HoldForm], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"LongShortTermMemoryLayer", ",", 
                    "LongShortTermMemoryLayer"}], "}"}], "]"}], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]300\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LongShortTermMemoryLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]56\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8778721213621273`*^9, {3.8778722507690687`*^9, 3.8778723007186394`*^9}, {
   3.8778723674795265`*^9, 3.877872377367081*^9}, 3.877874606194994*^9, {
   3.877874655461546*^9, 3.8778746673422413`*^9}},
 CellLabel->
  "Out[117]=",ExpressionUUID->"abe98d01-c96e-4f63-b79c-408d6c9d08b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedNet", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"network", ",", "traingingData", ",", " ", 
    RowBox[{"ValidationSet", "->", "validationData"}], ",", " ", 
    RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877867474590951*^9, 3.877867475594259*^9}, {
  3.877874676475333*^9, 3.8778747546703777`*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"6d6f095f-ccc4-4031-8254-5d13df943736"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "2" -> <|
                    "Type" -> "NetBidirectional", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "ForwardNet" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 150, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    768, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2120082207], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> NeuralNetworks`TensorT[{150}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "BackwardNet" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 768}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{150, 150}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{150}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 150, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    768, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2120082207], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> NeuralNetworks`TensorT[{150}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "Aggregation" -> Catenate, "DataReversed" -> Automatic, 
                    "$InputTensor" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT], "$ForwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 150}, 
                    NeuralNetworks`RealT], "$BackwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 150}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 300}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "ForwardState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "ForwardCellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "BackwardState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT], 
                    "BackwardCellState" -> 
                    NeuralNetworks`TensorT[{150}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 300}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyArray[{56}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 56, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    300, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2120082207], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 300}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 56}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{56, 56}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{56}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {56}, "$OutputSize" -> 56, 
                    "$InputSize" -> 56, "$InputDimensions" -> {56}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2120082207], 768}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{56}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{
                    "\"algebra__linear_1d_composed\"", 
                    "\"algebra__linear_1d\"", 
                    Skeleton[53], "\"probability__swr_p_sequence\""}, {
                    "algebra__linear_1d_composed", "algebra__linear_1d", 
                    "algebra__linear_2d_composed", "algebra__linear_2d", 
                    "algebra__polynomial_roots_composed", 
                    "algebra__polynomial_roots", 
                    "algebra__sequence_next_term", 
                    "algebra__sequence_nth_term", 
                    "arithmetic__add_or_sub_in_base", 
                    "arithmetic__add_or_sub", "arithmetic__add_sub_multiple", 
                    "arithmetic__div", "arithmetic__mixed", 
                    "arithmetic__mul_div_multiple", "arithmetic__mul", 
                    "arithmetic__nearest_integer_root", 
                    "arithmetic__simplify_surd", 
                    "calculus__differentiate_composed", 
                    "calculus__differentiate", "comparison__closest_composed",
                     "comparison__closest", 
                    "comparison__kth_biggest_composed", 
                    "comparison__kth_biggest", "comparison__pair_composed", 
                    "comparison__pair", "comparison__sort_composed", 
                    "comparison__sort", "measurement__conversion", 
                    "measurement__time", "numbers__base_conversion", 
                    "numbers__div_remainder_composed", 
                    "numbers__div_remainder", "numbers__gcd_composed", 
                    "numbers__gcd", "numbers__is_factor_composed", 
                    "numbers__is_factor", "numbers__is_prime_composed", 
                    "numbers__is_prime", "numbers__lcm_composed", 
                    "numbers__lcm", "numbers__list_prime_factors_composed", 
                    "numbers__list_prime_factors", 
                    "numbers__place_value_composed", "numbers__place_value", 
                    "numbers__round_number_composed", "numbers__round_number",
                     "polynomials__add", "polynomials__coefficient_named", 
                    "polynomials__collect", "polynomials__compose", 
                    "polynomials__evaluate_composed", "polynomials__evaluate",
                     "polynomials__expand", "polynomials__simplify_power", 
                    "probability__swr_p_level_set", 
                    "probability__swr_p_sequence"}], "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 56, "$Rank" -> 0, 
                    "$Version" -> "13.1.3"|>|>, 
                    "InteriorStates" -> <|{2, "ForwardState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "ForwardState"], {
                    2, "ForwardCellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "ForwardCellState"], {
                    2, "BackwardState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "BackwardState"], {
                    2, "BackwardCellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "BackwardCellState"], {
                    3, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "3", "States", "State"], {
                    3, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "States", "CellState"]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]768\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetBidirectionalOperator", HoldForm], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"LongShortTermMemoryLayer", ",", 
                    "LongShortTermMemoryLayer"}], "}"}], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]300\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LongShortTermMemoryLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]56\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8778747462994156`*^9, 3.8778748545619035`*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"a86ab734-e1c9-4677-b381-1a92f0a7c469"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetMeasurements", "[", 
  RowBox[{"trainedNet", ",", " ", "testData", ",", " ", "\"\<ErrorRate\>\""}],
   "]"}]], "Input",
 CellChangeTimes->{{3.8778747650827255`*^9, 3.8778748189820004`*^9}, {
  3.877874859482331*^9, 3.877874862330803*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"cf14139e-f989-406d-b0dc-2bc1a9eef062"],

Cell[BoxData["0.01175`"], "Output",
 CellChangeTimes->{3.877874869147374*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"f39cc089-ab34-49bc-aa15-3cabcba8f997"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"Values", "[", 
   RowBox[{"Association", "[", "traingingData", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8778748858307333`*^9, 3.8778749125994883`*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"d4ed508c-b6ae-4480-b9c2-ff5c5e2f2bb6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"algebra__linear_1d\"\>", 
   ",", "\<\"algebra__linear_1d_composed\"\>", 
   ",", "\<\"algebra__linear_2d\"\>", 
   ",", "\<\"algebra__linear_2d_composed\"\>", 
   ",", "\<\"algebra__polynomial_roots\"\>", 
   ",", "\<\"algebra__polynomial_roots_composed\"\>", 
   ",", "\<\"algebra__sequence_next_term\"\>", 
   ",", "\<\"algebra__sequence_nth_term\"\>", 
   ",", "\<\"arithmetic__add_or_sub\"\>", 
   ",", "\<\"arithmetic__add_or_sub_in_base\"\>", 
   ",", "\<\"arithmetic__add_sub_multiple\"\>", 
   ",", "\<\"arithmetic__div\"\>", ",", "\<\"arithmetic__mixed\"\>", 
   ",", "\<\"arithmetic__mul\"\>", 
   ",", "\<\"arithmetic__mul_div_multiple\"\>", 
   ",", "\<\"arithmetic__nearest_integer_root\"\>", 
   ",", "\<\"arithmetic__simplify_surd\"\>", 
   ",", "\<\"calculus__differentiate\"\>", 
   ",", "\<\"calculus__differentiate_composed\"\>", 
   ",", "\<\"comparison__closest\"\>", 
   ",", "\<\"comparison__closest_composed\"\>", 
   ",", "\<\"comparison__kth_biggest\"\>", 
   ",", "\<\"comparison__kth_biggest_composed\"\>", 
   ",", "\<\"comparison__pair\"\>", ",", "\<\"comparison__pair_composed\"\>", 
   ",", "\<\"comparison__sort\"\>", ",", "\<\"comparison__sort_composed\"\>", 
   ",", "\<\"measurement__conversion\"\>", ",", "\<\"measurement__time\"\>", 
   ",", "\<\"numbers__base_conversion\"\>", 
   ",", "\<\"numbers__div_remainder\"\>", 
   ",", "\<\"numbers__div_remainder_composed\"\>", 
   ",", "\<\"numbers__gcd\"\>", ",", "\<\"numbers__gcd_composed\"\>", 
   ",", "\<\"numbers__is_factor\"\>", 
   ",", "\<\"numbers__is_factor_composed\"\>", 
   ",", "\<\"numbers__is_prime\"\>", 
   ",", "\<\"numbers__is_prime_composed\"\>", ",", "\<\"numbers__lcm\"\>", 
   ",", "\<\"numbers__lcm_composed\"\>", 
   ",", "\<\"numbers__list_prime_factors\"\>", 
   ",", "\<\"numbers__list_prime_factors_composed\"\>", 
   ",", "\<\"numbers__place_value\"\>", 
   ",", "\<\"numbers__place_value_composed\"\>", 
   ",", "\<\"numbers__round_number\"\>", 
   ",", "\<\"numbers__round_number_composed\"\>", 
   ",", "\<\"polynomials__add\"\>", 
   ",", "\<\"polynomials__coefficient_named\"\>", 
   ",", "\<\"polynomials__collect\"\>", ",", "\<\"polynomials__compose\"\>", 
   ",", "\<\"polynomials__evaluate\"\>", 
   ",", "\<\"polynomials__evaluate_composed\"\>", 
   ",", "\<\"polynomials__expand\"\>", 
   ",", "\<\"polynomials__simplify_power\"\>", 
   ",", "\<\"probability__swr_p_level_set\"\>", 
   ",", "\<\"probability__swr_p_sequence\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.877874913087448*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"ab9ac16e-a878-4e3c-9952-cba7f14be81f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedNet", "[", 
  RowBox[{
   RowBox[{"bert", "[", 
    RowBox[{
    "\"\<9 (a) A bag contains red counters and blue counters only. number of \
red counters: number of blue counters = 3 : 4. Write down the fraction of \
counters that are red.\>\"", ",", " ", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}], ",", " ", 
   RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877874941889069*^9, 3.8778751096951284`*^9}, {
  3.87787515811155*^9, 3.8778751771383367`*^9}, {3.8778752099367075`*^9, 
  3.8778752272721024`*^9}, {3.8778752591156597`*^9, 3.877875266851926*^9}, {
  3.8778753804720926`*^9, 3.877875381208109*^9}, {3.8778763381403933`*^9, 
  3.877876413299713*^9}},
 CellLabel->
  "In[153]:=",ExpressionUUID->"df83bdce-7ed8-4b47-92b9-74afce65e808"],

Cell[BoxData["\<\"comparison__sort\"\>"], "Output",
 CellChangeTimes->{{3.8778749590551815`*^9, 3.8778749703041444`*^9}, {
   3.877875003002527*^9, 3.8778750315937223`*^9}, {3.8778750917010145`*^9, 
   3.8778751117331796`*^9}, {3.8778751614299674`*^9, 
   3.8778751776682563`*^9}, {3.8778752141236935`*^9, 3.8778752277765913`*^9}, 
   3.877875267349996*^9, 3.877875381805662*^9, 3.8778764137449408`*^9},
 CellLabel->
  "Out[153]=",ExpressionUUID->"e7bdf41f-6998-4306-a6c9-e3ada55d8e8f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"TextRecognize", "[", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzs3fufzvXi//t12/t727f94/75PcZhJONQIyPlVCEth2iWkMhhHLPIOaeW
KJYQOZVIooNCIaeiqFSIUBHGWZjvGmN91+fwF+xrr+u27dnpxWVch3nMPO4/
rFu1uK6XeWqa1+N2zaXWgFFdh/xvf/rTn8b9n7H/6Vo4sfXYsYWTn/y/Yn/T
feS4YUNHDh7UYeT4wUMHj31wwP8e+4cr/sef/tT8//jTn/6fv/7vSu2f//zn
//yf//O//uu/Mn0QlVN8wf/8z//M9EFUTi5IF1/wP/7jPzJ9EJXT//pf/8sF
0VyQLrbgP/7xj3/961+ZPojKyQXpXJAutl1swdiOmT6IyskFQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC9K5IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC9K5
4O9cunRp165dK1as+Pjjj8+fP5/p49yarYPOBUOsVXS2DjoXpLNW0dk66FyQ
zpsynQvSuWDsI3D48OHVq1ePHTu2Xbt2d911V/RvTZo02bp1a6ZPd2u2Dro7
WfBflVppaWlxcXHsI5Ppg6icXJAutmDsnuWCXPEF//nPf2b6IConF6RzQbr4
gteuXcv0QVROse1cEK1qLlhUVLRp06aXX365R48e9evXj/5IXl7exo0bM33S
W6uaC1Ymse3+8Y9/xP5rWI6fWyxJkiRJkrAOHTq0cuXK4cOHN2/evEaNGn9Y
qGJq1qz50EMPDRs2bOPGjWfPns30qaWbSXo6q1B8ZQ6dC9L52io6X9dB54J0
Lkjna6vofF0HXeVe8MSJEx999NHYsWMffvjhWrVqhQpV48aNn3nmmTlz5nz2
2WcXL17M9KlvT+VesCq4k9dWJf3bEisU37eKznc9onNBOt+3is53PaJzQTrf
M4fOBekq34Jnz57dsGHDpEmT2rZtm5OT84d5Kjc3t3PnzlOmTFm7du3x48fR
b/r0L9+3Cs4FQ6xVdLYOOheks1bR2TroXJCu8t2UqxoXpKscC8a+lv7hhx9e
ffXVzp07X3+b9BsLVdeuXV955ZXdu3fH/sOR6SMnja2DzgVDrFV0tg46F6Sz
VtHZOuhckK5y3JSrMhekQy946dKlzZs3jxs3rmnTptWqVbuxUN19991dunSZ
OXPmzp07r1y5kunzpoStg84FQ6xVdLYOOheks1bR2TroXJAOfVPWf7sgH3HB
Y8eOvfXWW3369PnDP84vJyenU6dO06dP3759++XLlzN92JSzddC5YIi1is7W
QeeCdNYqOlsHnQvSEW/KKssF6UALHjp0aO7cue3bt//Dd6Nq3Ljx0KFD16xZ
c/78+UyfNK1sHXQuGGKtorN10LkgnbWKztZB54J0oJuy/pAL0lX8BY8cOfLa
a6916NDhDyNV69atX3zxxV27dlWmt6K6LbYOOhcMsVbR2TroXJDOWkVn66Bz
QbqKf1PWzbkgXYVd8NixY6+//nqXLl1ufNf03Nzcnj17vvHGG0ePHq2AJ08z
WwedC4ZYq+hsHXQuSGetorN10LkgXYW9KStBLkhX0RY8ceLE8uXLn3zyyTp1
6vwuUtWvX79///4ffvjhxYsXM33MCsTWQeeCIdYqOlsHnQvSWavobB10LkhX
0W7Kul0uSFdBFiwpKfn0008HDBhw4xun161bt3fv3qtXr65qb0iVIFsHnQuG
WKvobB10LkhnraKzddC5IF0FuSmr3FyQLuMLHjhwYPr06U2aNLnxj/br3r37
ihUrzp49m6mzIdg66FwwxFpFZ+ugc0E6axWdrYPOBekyflPWHXJBukwtePbs
2ZUrVxYUFNSuXbtspMrOzn7iiSeWLl16+vTpNB8JytZB54Ih1io6WwedC9JZ
q+hsHXQuSGfroHNBuvQv+N133z3//PONGjX63YupWrRoMW3atEOHDvnb6bbY
OuhcMMRaRWfroHNBOmsVna2DzgXpbB10LkiXtgUvXbr0wQcfdO3a9Xd/xl9u
bm5hYeHGjRuvXLmS6jNUSrYOOhcMsVbR2TroXJDOWkVn66BzQTpbB50L0qVh
wR9//HH69On5+fm/ezHVY489tnDhwlOnTqXuqasCWwedC4ZYq+hsHXQuSGet
orN10Lkgna2DzgXpUrdg7JG3bt3at2/funXr/u7FVEOGDPn8889LSkqS/qRV
kK2DzgVDrFV0tg46F6SzVtHZOuhckM7WQeeCdKlY8Ny5c8uXL2/btm316tXL
dqpHHnlk7ty5RUVFSXwu2TroXDDEWkVn66BzQTprFZ2tg84F6WwddC5Il9wF
Dx06NG3atMaNG5eNVDk5Ob17996wYYPvTJUKtg46FwyxVtHZOuhckM5aRWfr
oHNBOlsHnQvSJWvBL774YvDgwfXq1SvbqZo0aTJ58uSffvrJr3VTx9ZB54Ih
1io6WwedC9JZq+hsHXQuSGfroHNBujtcsLi4eM2aNY8//njNmjXLdqp27dot
WbLk7NmzyT2tbmTroHPBEGsVna2DzgXprFV0tg46F6SzddC5IF25Fzx9+vSS
JUuaN29eNlJVr169Z8+eGzZsKC4uTsVpdSNbB50Lhlir6GwddC5IZ62is3XQ
uSCdrYPOBenKseCRI0deeuml/Pz8sp0qLy9v7NixP/zwg78Z0szWQeeCIdYq
OltHssRuOpcuXTp79mzsf9N563FBOmsVna2DzgXpbB10Lkh3Wwt+++23I0eO
bNiwYdlO1aJFi1deecU/6S9TbB10LhhiraKzdSTLpUuXSktLY38R+9/YX6ft
eV2QzlpFZ+ugc0E6WwedC9IluODnn3/ep0+fu+++u2yn+vOf/7x8+fLz58+n
56j6Q7YOOhcMsVbR2TqSpeybQKbzDSFdkM5aRWfroHNBOlsHnQvS3XzB2P+7
YcOGgoKCnJycsp3qySefXL9+/ZUrV9J8Wt3I1kHngiHWKjpbR7L42iqVj7WK
ztZB54J0tg46F6QLLVhcXPzee++1a9euevXq1yNV7dq1Bw0atHv37viXzaoI
bB10LhhiraKzdSSL71ul8rFW0dk66FyQztZB54J0Ny544cKFZcuWtWjRIisr
63qnatiw4dixY48cOeJXrRWNrYPOBUOsVXS2DjoXpLNW0dk66FyQztZB54J0
ZRc8efLkvHnzmjZtWvab/vLz86dOnXr8+PFMn1R/zNZB54Ih1io6WwedC9JZ
q+hsHXQuSGfroHNBuviCR44cmTFjRn5+ftlO1bx589mzZ/uH/VVwtg46Fwyx
VtHZOuhckM5aRWfroHNBOlsHnQvS/fjjj1OmTGnUqFHZTtWmTZslS5acO3cu
06fTrdk66FwwxFpFZ+ugc0E6axWdrYPOBelsHXQuyHXo0KHJkyfn5eWV7VQd
OnR45513Ll68mOnTKVG2DjoXDLFW0dk66FyQzlpFZ+ugc0E6WwedCxIdOHBg
/Pjx9957b9lO1blz5w8//PDy5cuZPp1uj62DzgVDrFV0tg46F6SzVtHZOuhc
kM7WQeeCLHv37h09enTDhg1/16nWrVtXXFyc6dOpPGwddC4YYq2is3XQuSCd
tYrO1kHngnS2DjoXpPj222+HDx9ev379sp2qW7duH3/88ZkzZ1yQy9ZB54Ih
1io6WwedC9JZq+hsHXQuSGfroHPBiu+77767sVP16NFj27ZtJSUlLkhn66Bz
wRBrFZ2tg84F6axVdLYOOhek86ZM54IV2Y2dKisrq1evXjt37iwtLY3/GBek
s3XQuWCItYrO1kHngnTWKjpbB50L0nlTpnPBium7774bMWJEgwYNrneqatWq
9enTZ/fu3deuXSv7I12QztZB54Ih1io6WwedC9JZq+hsHXQuSOdNmc4FK5rv
v//+ueeeK9upsrKynnnmmRs7VZwL0tk66FwwxFpFZ+ugc0E6axWdrYPOBem8
KdO5YMWxd+/ekSNH3tipdu3a9YedKs4F6WwddC4YYq2is3XQuSCdtYrO1kHn
gnTelOlcsCLYv3//qFGjftepevfu/eWXX96kU8W5IJ2tg84FQ6xVdLYOOhek
s1bR2TroXJDOmzKdC2bWwYMHx48ff88995T98/569er1xRdfXH8f9ZtzQTpb
B50Lhlir6GwddC5IZ62is3XQuSCdN2U6F8yUw4cPT548OS8vr2ynevrpp8v+
eX+JcEE6WwedC4ZYq+hsHXQuSGetorN10LkgnTdlOhdMv6NHj06fPv2+++4r
26meeuqpHTt23FaninNBOlsHnQuGWKvobB10LkhnraKzddC5IJ03ZToXTKfj
x4///e9/z8/PL9upunXrtm3btpKSkvI9pgvS2TroXDDEWkVn66BzQTprFZ2t
g84F6bwp07lgepw6dWru3LlNmjQp26kKCgo2bNgQ+xx4J4/sgnS2DjoXDLFW
0dk66FyQzlpFZ+ugc0E6b8p0Lphq58+fX7hwYdOmTct2qs6dO69du/bKlSt3
/vguSGfroHPBEGsVna2DzgXprFV0tg46F6TzpkzngqkT++T29ttvN2/evGyn
6tChw/vvv3/58uVkPYsL0tk66FwwxFpFZ+ugc0E6axWdrYPOBem8KdO5YCrE
PqetW7eubdu22dnZ1ztVu3bt3n777YsXLyb3uVyQztZB54Ih1io6WwedC9JZ
q+hsHXQuSOdNmc4Fk27Lli0FBQW1atW63qkefvjhpUuXXrhwIRVP54J0tg46
FwyxVtHZOuhckM5aRWfroHNBOm/KdC6YRLt27erTp0+dOnWud6oHHnhg9uzZ
p0+fTt2TuiCdrYPOBUOsVXS2DjoXpLNW0dk66FyQzpsynQsmxY8//jhmzJiG
DRte71R5eXlTp049ceJEqp/aBelsHXQuGGKtorN10LkgnbWKztZB54J03pTp
XPAOnTlzZs6cOfn5+dc7Vd26dceMGXP06NH0HMAF6WwddC4YYq2is3XQuSCd
tYrO1kHngnTelOlcsNyuXbu2evXqFi1alP0j//r16/fDDz+k8ytDF6SzddC5
YIi1is7WQeeCdNYqOlsHnQvSeVOmc8Hy2b59e5cuXWrWrHm9UxUUFGzevLmk
pCTNJ3FBOlsHnQuGWKvobB10LkhnraKzddC5IJ03ZToXvF2HDx8ePXp0/fr1
r3eqRx555K233rp48WJGzuOCdLYOOhcMsVbR2TroXJDOWkVn66BzQTpvynQu
mLji4uI33njjgQceuN6pGjVq9PLLLxcVFWXwVC5IZ+ugc8EQaxWdrYPOBems
VXS2DjoXpPOmTOeCCdq6dWvHjh2rV69+PVUNGjTop59+yvS5XBDP1kHngiHW
KjpbB50L0lmr6GwddC5I502ZzgVv6ejRo+PGjWvQoMH1TvX4449v2rQp/W9R
9YdckM7WQeeCIdYqOlsHnQvSWavobB10LkjnTZnOBW/uo48+atmy5fVOlZ+f
P3fu3LNnz2b6XP8fF6SzddC5YIi1is7WQeeCdNYqOlsHnQvSeVOmc8GQgwcP
Dh06tG7dutdT1eDBg3/++edMn+v3XJDO1kHngiHWKjpbB50L0lmr6GwddC5I
502ZzgVvFPuMtHLlygcffPB6p2rbtu2HH35YXFyc6aP9AReks3XQuWCItYrO
1kHngnTWKjpbB50L0nlTpnPB3zly5Mizzz579913xztVzZo1x44de/z48Uyf
K8gF6WwddC4YYq2is3XQuSCdtYrO1kHngnTelOlcsKwNGzY8/PDDZd9NfevW
raWlpZk+1824IJ2tg84FQ6xVdLYOOheks1bR2TroXJDOmzKdC8b99ttvM2fO
zMvLi3eqGjVqTJw48eTJk5k+1625IJ2tg84FQ6xVdLYOOheks1bR2TroXJDO
mzKdC8Z88803Tz75ZI0aNeKp6pFHHlm7dm3sw5LpcyXEBelsHXQuGGKtorN1
0LkgnbWKztZB54J03pTpXHDVqlVl31C9sLDwyJEjmT7UbXBBOlsHnQuGWKvo
bB10LkhnraKzddC5IJ03ZbqqvOCxY8dGjRqVm5sb71T33HPPq6++ev78+Uyf
6/ZU5QUrB1sHnQuGWKvobB10LkhnraKzddC5IJ03Zboqu+CWLVtat259/SVV
TzzxxO7du4kfhyq7YKVh66BzwRBrFZ2tg84F6axVdLYOOhek86ZMVwUXjH3O
efXVV++77754p8rKyho9evTx48czfa5yqoILVjK2DjoXDLFW0dk66FyQzlpF
Z+ugc0E6b8p0VW3Bn376acCAAbVr146nqpYtW7777rvFxcWZPlf5VbUFKx9b
B50Lhlir6GwddC5IZ62is3XQuSCdN2W6KrXgrl27Hnvssevf/denT59Dhw5l
+lB3qkotWCnZOuhcMMRaRWfroHNBOmsVna2DzgXpvCnTVZ0F165d27Jly3in
ysnJefnll8+ePZvpQyVB1VmwsrJ10LlgiLWKztZB54J01io6WwedC9J5U6ar
CgvGvk5bsmRJfn5+PFU1bdp09erVsc88mT5XclSFBSs3WwedC4ZYq+hsHXQu
SGetorN10LkgnTdlukq/4Llz5yZMmFCvXr14qurQocPu3bsr0+ecSr9gpWfr
oHPBEGsVna2DzgXprFV0tg46F6TzpkxXuRc8cOBAz549a9asGU9Vffv2rQRv
VPU7lXvBqsDWQeeCIdYqOlsHnQvSWavobB10LkjnTZmuEi+4ffv2tm3bXn9P
9TFjxpw4cSLTh0q+SrxgFWHroHPBEGsVna2DzgXprFV0tg46F6TzpkxXWRd8
9913mzVrFu9Uubm58+bNu3DhQqYPlRKVdcGqw9ZB54Ih1io6WwedC9JZq+hs
HXQuSOdNma7yLVhaWjpnzpxGjRrFU1XLli3Xr19/9erVTJ8rVSrfglWNrYPO
BUOsVXS2DjoXpLNW0dk66FyQzpsyXSVb8MyZM6NGjapbt248VT3xxBP79u3L
9KFSq5ItWAXZOuhcMMRaRWfroHNBOmsVna2DzgXpvCnTVaYFjxw58swzz1x/
T/VBgwb99NNPmT5UylWmBasmWwedC4ZYq+hsHXQuSGetorN10LkgnTdlukqz
4LffftuxY8esrKx4qpo0adKpU6cyfah0qDQLVlm2DjoXDLFW0dk66FyQzlpF
Z+ugc0E6b8p0lWPBsn/8X+3atefMmVNZ31P9RpVjwarM1kHngiHWKjpbB50L
0lmr6GwddC5I502ZrhIsuG7dulatWsVTVaNGjVasWFFcXJzpQ6VPJViwirN1
0LlgiLWKztZB54J01io6WwedC9J5U6ajL7hy5coHHnggnqpatWq1cePGa9eu
ZfpQaUVfULYOOhcMsVbR2TroXJDOWkVn66BzQTpvynToBRctWnTffffFU1WH
Dh2+/vrrKvglGXpB/betg88FQ6xVdLYOOheks1bR2TroXJDOmzIddMHY540X
X3yxQYMG8VTVo0ePAwcOZPpQmQFdUNfZOuhcMMRaRWfroHNBOmsVna2DzgXp
vCnTERc8d+7c6NGj69atG09VAwYM+OmnnzJ9qIwhLqiybB10LhhiraKzddC5
IJ21is7WQeeCdN6U6XALHjt2rLCwMCcnJ56qRo4c+euvv2b6UJmEW1C/Y+ug
c8EQaxWdrYPOBemsVXS2DjoXpPOmTMda8MCBA127ds3Ozo6nqkmTJp06dSrT
h8ow1oK6ka2DzgVDrFV0tg46F6SzVtHZOuhckM6bMh1owa+++urPf/5zvFPV
rFlz1qxZ58+fz/ShMg+0oP6QrYPOBUOsVXS2DjoXpLNW0dk66FyQzpsyHWXB
bdu2tWnTJp6q6tev/8Ybb1y+fDnTh6oQKAsqxNZB54Ih1io6WwedC9JZq+hs
HXQuSOdNmQ6x4Pr161u1ahVPVU2aNPnggw9KSkoyfaiKArGgbsLWQeeCIdYq
OlsHnQvSWavobB10LkjnTZmu4i/43nvvNW/ePJ6qHn744S1btsT+253pQ1Ug
FX9B3Zytg84FQ6xVdLYOOheks1bR2TroXJDOmzJdBV9wxYoVTZs2jaeqDh06
7Nmzx4vP71TwBXVLtg46FwyxVtHZOuhckM5aRWfroHNBOm/KdBV5wddffz0/
Pz+eqgoKCvbt25fpE1VEFXlBJcLWQeeCIdYqOlsHnQvSWavobB10LkjnTZmu
Yi4Yu93Mnz+/UaNG8VTVs2fPgwcPZvpQFVTFXFCJs3XQuWCItYrO1kHngnTW
KjpbB50L0nlTpquAC167dm3GjBn33HNPPFX169fv8OHDmT5UxVUBF9RtsXXQ
uWCItYrO1kHngnTWKjpbB50L0nlTpqtoC8Y+IUyePLlevXrxVDV48OCff/45
04eq0Cragrpdtg46FwyxVtHZOuhckM5aRWfroHNBOm/KdBVqwcuXLz///PO5
ubnxVDVixIhff/0104eq6CrUgioHWwedC4ZYq+hsHXQuSGetorN10LkgnTdl
uoqz4MWLF8eMGXP33XfHU9W4ceNOnjyZ6UMBVJwFVT62DjoXDLFW0dk66FyQ
zlpFZ+ugc0E6b8p0FWTBc+fOPffcc3Xq1ImnqgkTJhQVFWX2SBQVZEGVm62D
zgVDrFV0tg46F6SzVtHZOuhckM6bMl1FWPDMmTPDhg2766674qlq8uTJp0+f
zuB5WNK/4Pnz51euXLlx48bLly+n7UkrMVsHnQuGWKvobB10LkhnraKzddC5
IF1FaB26Exlf8Ny5c88++2zt2rXjqepvf/vbmTNnMnUYojQvGLt4jh49umbN
mnXq1NmwYUN6nrRys3XQuWCItYrO1kHngnTWKjpbB50L0mW8degOZXbBixcv
jhw58vo3AE6bNu3s2bMZOQlXmhcsLi7u27dvbKycnJyPP/44PU9audk66Fww
xFpFZ+ugc0E6axWdrYPOBemsVXQZXPDKlSvjxo2rW7duPFVNnz793Llz6T8G
XZoXLCoqeuqpp2J7NW/efMeOHel50srN1kHngiHWKjpbB50L0lmr6GwddC5I
Z62iy9SCsSedNGlSbm5uPFVNnTrVV1WVT5oX3L17d/v27WOT9ezZ84cffkjP
k1Zutg46FwyxVtHZOuhckM5aRWfroHNBOmsVXaYWnDlzZoMGDeKpasqUKb6t
ermlecGFCxfed999sdWef/75kydPpudJKzdbB50Lhlir6GwddC5IZ62is3XQ
uSCdtYouIwsuXry4cePG8VQ1YcKEoqKidD57JZPOBWO3ziFDhmRlZcWGmzdv
3pUrV9LwpJWerYPOBUOsVXS2DjoXpLNW0dk66FyQzlpFl/4FV61a9eCDD8ZT
1ciRI48fP562p66U0rngtWvXCgsLY8NlZWW9//77fgGcFLYOOhcMsVbR2Tro
XJDOWkVn66BzQTprFV2aF9y2bVubNm3iqap///5HjhxJz/NWYulc8MqVK336
9Ilt16hRo61bt6bhGasCWwedC4ZYq+hsHXQuSGetorN10LkgnbWKLp0Lnjhx
4i9/+Us8VXXt2tX36E6KdC64d+/ezp07x+br1KnTnj170vCMVYGtg84FQ6xV
dLYOOheks1bR2TroXJDOWkWXzgWnT59er169KIqaNWu2a9euNDxjVZDOBRct
WhR/w7EhQ4b89NNPaXjGqsDWQeeCIdYqOlsHnQvSWavobB10LkhnraJL24L7
9+/v2LFj/IVVCxcu9A26kyWd/w4OHTo0/hbrs2bNunjxYhqesSqwddC5YIi1
is7WQeeCdNYqOlsHnQvSWavo0rbg9T8HcNCgQT///HOqn67qSOe/g7Ht4m+x
vmbNGr/6TRZbB50Lhlir6GwddC5IZ62is3XQuSCdtYoubQsuWLCgUaNGURSN
GDHi119/TfXTVR3pr1UNGzbcvHlzGp6uirB10LlgiLWKztZB54J01io6Wwed
C9JZq+jStuCWLVtat24d/07AGTNmnD9/PtXPWEWkbcFDhw4VFBTE5nvkkUd8
27EksnXQuWCItYrO1kHngnTWKjpbB50L0lmr6NK54NSpU3Nzc+PBatKkSadO
nUrDk1Z6aVvwjTfeaNKkSWy7Z5555uDBg6l+uqrD1kHngiHWKjpbB50L0lmr
6GwddC5IZ62iS+eCFy5cePbZZ3NycuLBqm/fvocPH07D81ZuaVswtl21atVi
w02fPv3cuXOpfrqqw9ZB54Ih1io6WwedC9JZq+hsHXQuSGetokvzgufOnRsz
ZkzdunXjwerhhx9eu3ZtSUlJep69UkrbgtffYv3dd9/1k3YS2TroXDDEWkVn
66BzQTprFZ2tg84F6axVdOlf8OrVq/Pnz7/vvvviwap69eqjRo3yfdfLLc21
6q677tqwYUOqn6tKsXXQuWCItYrO1kHngnTWKjpbB50L0lmr6DK14KeffvrI
I49E/6+HHnronXfeuXz5cpqPUQmkZ8GLFy/27t07tlSjRo22bt2a0ueqamwd
dC4YYq2is3XQuSCdtYrO1kHngnTWKroMLnjkyJG//vWv178rMKZ3797ffPON
l77bkp4Ft2zZ0rZt2/g3b3755Zcpfa6qxtZB54Ih1io6WwedC9JZq+hsHXQu
SGetosv4guvXr2/VqtX1YFWrVq3hw4f/8ssvmToPTnoWfPnll+vXrx8baNiw
Ya6TXLYOOhcMsVbR2TroXJDOWkVn66BzQbqMtw7doYqwYFFR0dSpU++9997r
zSr21y+++GLsn2fwVBTpWXDMmDE1a9aMTbN48eLY06X0uaoaWwedC4ZYq+hs
HXQuSGetorN10LkgXUVoHboTFWfBPXv2DBo0qOw3BjZu3PjFF188ceJEpo9W
oaVnwb/+9a/Z/7Zu3bqUPlEVZOugc8EQaxWdrYPOBemsVXS2DjoXpKs4rUPl
U9EW3LZtW0FBQa1ata43q7y8vClTphw/fjzTR6ug0rBg7MEHDhwY2yInJ+eT
Tz5J3RNVTbYOOhcMsVbR2TroXJDOWkVn66BzQbqK1jp0uyrggrFPCOvWrWvf
vn2NGjWuN6sGDRqMGjVq//79FeqoFUEaFjxw4MATTzwRW6F+/fqffvpp6p6o
arJ10LlgiLWKztZB54J01io6WwedC9JVwNah21JhF4wdbP369Y8//nj87ZLi
srOze/XqtWXLltjnjUwfsKJIw4KrV69u1qxZ7OPfuXPn7777LnVPVDXZOuhc
MMRaRWfroHNBOmsVna2DzgXpKmzrUIIq+IKxTw4bN278y1/+kpOTE5XRsWPH
FStWXLhwIdMHzLw0LDh9+vR69erFPux/+9vfzpw5k7onqppsHXQuGGKtorN1
0LkgnbWKztZB54J0Fbx16JYoC3755ZeDBg2KN5Pr8vPzJ06cePDgwYp//tRJ
w4LPP/987dq1Yx/wDz74wC96k87WQeeCIdYqOlsHnQvSWavobB10LkhHaR0K
YS144MCBKVOmNGrUqGyzysrKevLJJ9esWXPp0qVMHzAD0rBg/A8EjH2o165d
m7pnqbJsHXQuGGKtorN10LkgnbWKztZB54J0rNahGxEXPHny5JIlS1q3bl29
evWy2erBBx+cMmXK/v37Y/9xz/QZ0yfVC165cqVPnz7xj7C1KhVsHXQuGGKt
orN10LkgnbWKztZB54J0xNahsrgLxj5vfPbZZzd+e2BMp06d3nzzzXPnzmX6
jOmQ6gX37t3buXPn2Ee1Ro0a69evT9GzVGW2DjoXDLFW0dk66FyQzlpFZ+ug
c0E6butQXCVY8JdffpkzZ06zZs2qVatWtlk1aNBg6NChW7ZsKS4uzvQZUyjV
C65Zs6Zly5axj2eXLl38AwFTwdZB54Ih1io6WwedC9JZq+hsHXQuSFcJWkcV
V2kWvHbt2tatW4cOHdqgQYPfvdTqwQcfnDRp0p49e0pLSzN9zORL9YLz58/P
y8uLfRinTZtWRV6ulma2DjoXDLFW0dk66FyQzlpFZ+ugc0G6StM6qqzKt2BR
UdGyZcs6deqUk5Pzu2zVpk2bWbNmHTlypDL9elO94NSpU+vWrRv76H300Ucp
eooqztZB54Ih1io6WwedC9JZq+hsHXQuSFf5WkdVU4kX3Lt379SpU5s0aZKV
lfW7P0Pw8ccfX7Bgwc8//1wJfuGpXnDEiBHxd7P3LdZTxNZB54Ih1io6Wwed
C9JZq+hsHXQuSFeJW0cVUekXvHbt2ueffz5y5Mh77rknukHLli1j/9fSpUt3
7tx59uxZ4schpQsWFxf37dvXPxAwpWwddC4YYq2is3XQuSCdtYrO1kHngnSV
vnVUelVnwd9++23dunX9+/e/8c8QLPvG7B07dhwzZsy7775bVFSE+NSU0gV/
/PHHgoKC2Eemdu3aGzZsSMVTyNZB54Ih1io6WwedC9JZq+hsHXQuSFd1Wkdl
VQUXLCoqWr16db9+/erXrx/KVvFvGGzXrt3f//73Q4cOVeR7aEoX/PTTT9u0
aRP7aHTu3Pnbb79NxVPI1kHngiHWKjpbB50L0lmr6GwddC5IVwVbRyVTlReM
ffLZvXv34sWLR44c2alTp3r16v3uHa6u69ix44oVKy5cuJDpI/+BlC64fPny
+++/P/YRmDBhQlFRUSqeQrYOOhcMsVbR2TroXJDOWkVn66BzQbqq3DoqBxcs
6+zZs1988cW8efOeeuqp3Nzc3zWrFi1aLFiwIPZjMn3M/5+ULjhjxoz4K9CW
L19eWlqaiqeQrYPOBUOsVXS2DjoXpLNW0dk66FyQztZB54IhFy5cWL9+/aBB
g373DYNt2rRZtmxZxXmdVUoXHDVqVM2aNWO/6lWrVnkZTxFbB50Lhlir6Gwd
dC5IZ62is3XQuSCdrYPOBW+pqKho8eLFzZs3L/t9go899tjKlSsvXryY6dOl
cMHS0tL+/fvHf73vv/++X+6miK2DzgVDrFV0tg46F6SzVtHZOuhckM7WQeeC
Cbp06dKbb7754IMPln2dVexvJ0+e/PXXX1+9ejVTB0vdgidPnuzRo0fsl1mj
Ro3169cn/fEVZ+ugc8EQaxWdrYPOBemsVXS2DjoXpLN10LngbTl79uxrr73W
tGnT372lVeyfDBky5K233jp8+PC1a9fSeaTULbh3797OnTvHfnUPPfTQl19+
mfTHV5ytg84FQ6xVdLYOOheks1bR2TroXJDO1kHnguVQVFS0YMGCZs2a/eGf
IZifnz9w4MBFixZt3br16NGjqY5XqVtwy5Ytbdu2jf2K+vfvf+jQoaQ/vuJs
HXQuGGKtorN10LkgnbWKztZB54J0tg46Fyy30tLSzz77bNSoUXl5eTc2q+tq
1arVvHnznj17Tpw4cfHixWvWrIn9rP379588ebKkpOTO73GpW3D58uXxV5G9
9NJL58+fT/rjK87WQXcnC/6rUot9kiwuLo59ZDJ9EJWTC9LFFozds1yQK77g
P//5z0wfROXkgnQuSBdf8Nq1a5k+iMoptp0L3qGrV69+//33ixYt6tevX8OG
DW9Srm5Uu3btxo0bt23btmvXrs8888ygQYOGDx8+duzYKVOmvPTSS7Nnz16w
YMHSpUuXLVv25ptvvv7667FnWbhw4WuvvTZv3rw5c+a88sor06dPHz9+fOxn
FRYWdu/evWPHjq1atYo9Zt26dWvWrNmgQYOHHnqooKBg4MCBEydOnDt37sqV
Kzdt2vTtt98eP368pKTkJr+u2CPXq1cvdsj58+f/9ttvaft4VjX+O0gX2+4f
//hH7L+G5fi5xZIkSZIkpdjly5f37NmzYMGCESNGdOnS5b777qtRo8Zt9at0
qlatWm5ubsuWLbt37z5mzJjYsT/55JMffvjh/PnzsV/LwIEDYz8g9sMWLVoU
/yeSkivp6axC8ZU5dC5I52ur6HxdB50L0rkgna+tovN1Hal2+fLlgwcPfvzx
x/Pnz58wYcKgQYO6devWtm3bxo0b5+Tk/OE7X2Vc7GDNmjXLzc2N/+1LL730
008/xb/fUEnnv4N0d/LaqqR/W2KF4vtW0fmuR3QuSOf7VtH5rkd0Lkjnux7R
uWBmlZSUFBUV7d+/f8eOHRs3bvzwww9XrVq1bNmyRYsWzZkz5+WXX37hhRfG
jRs3duzY8ePHT5gwYdKkSVOmTPnb3/724osvvvTSSzNmzJg1a9a8efPefvvt
9evXb9++fc+ePYcPHz516lRxcXHsEn3hwoVDhw7FHnzNmjWxx5w6depf//rX
p556qm3bto0aNbqt131lZWXVrFmzbt269957b5MmTVq0aNG6des///nPXbp0
6datW69evQoLC4cMGfLcc8/FDjx58uTp06fHz7ZkyZKlS5e+/vrr8+fPf+WV
V2LHjv0SYr+c2I8cOnRo7GfFfm737t1jj9O+ffvYY8Ye+f7778/Ly8vNzc3J
yYkdMvb/7t27N9Nbpcq/fN8qOBcMsVbR2TroXJDOWkVn66BzQTpbB50L0t3J
grHPvRcvXjxw4MAnn3zy2muvjRo16i9/+Uvjxo2rV6+emhdtlVN2dvZHH32U
9A9dBWHroHPBEGsVna2DzgXprFV0tg46F6SzddC5IF0qFiwuLl65cmWLFi2i
KMrPz3/00Uczm7C6devma6tUYblgiLWKztZB54J01io6WwedC9LZOuhckC5F
Cy5fvrxp06ZRFE2ZMuX06dOxfxL7cvfatWvFxcXnz58vKir65Zdffvzxx717
93711Vc7duzYsmXLxx9/vGbNmlWrVsV+7pIlS+bNmzdr1qxp06ZNnjz5+eef
nzRpUuyv//73v7/66quLFy9etmxZ7EfGfvz69es3b978+eefxx7n+++/P3jw
4M8//3zy5Mlz585dvny5tLS00n+Zbeugc8EQaxWdrYPOBemsVXS2DjoXpLN1
0LkgXYoWnDFjRv369aMomj179m+//ZbcB1dZtg46FwyxVtHZOuhckM5aRWfr
oHNBOlsHnQvSpWjB559/vnbt2lEUvfbaa8XFxcl9cJVl66BzwRBrFZ2tg84F
6axVdLYOOheks3XQuSBdihYcNmxYdnZ2FEWvv/56SUlJch9cZdk66FwwxFpF
Z+ugc0E6axWdrYPOBelsHXQuSJeKBWOfkwcOHBh/h/MVK1Zcu3YtiQ+u37F1
0LlgiLWKztZB54J01io6WwedC9LZOuhckC4VC8a+OiosLIzXqvfee89P0Sll
66BzwRBrFZ2tg84F6axVdLYOOheks3XQuSBdKhaMPWC/fv2iKMrKylq7dm0S
H1k3snXQuWCItYrO1kHngnTWKjpbB50L0tk66FyQLhULXrlypU+fPlEU1alT
Z+PGjUl8ZN3I1kHngiHWKjpbB50L0lmr6GwddC5IZ+ugc0G6VCx48eLF3r17
R1GUl5e3devWJD6ybmTroHPBEGsVna2DzgXprFV0tg46F6SzddC5IF0qFjx7
9uzTTz8dRVHz5s137tyZxEfWjWwddC4YYq2is3XQuSCdtYrO1kHngnS2DjoX
pEvFgidOnOjRo0cURe3atfvqq6+S+Mi6ka2DzgVDrFV0tg46F6SzVtHZOuhc
kM7WQeeCdKlY8MCBA0888UQURd26ddu3b18SH1k3snXQuWCItYrO1kHngnTW
KjpbB50L0tk66FyQLhULbtu27dFHH42iqLCw8PDhw0l8ZN3I1kHngiHWKjpb
B50L0lmr6GwddC5IZ+ugc0G6VCy4cuXKBx98MIqiUaNG/frrr0l8ZN3I1kHn
giHWKjpbB50L0lmr6GwddC5IZ+ugc0G6VCw4Z86ce+65J4qiF1544cyZM0l8
ZN3I1kHngiHWKjpbB50L0lmr6GwddC5IZ+ugc0G6VCw4bty4nJycKIpmz579
22+/JfGRdSNbB50Lhlir6GwddC5IZ62is3XQuSCdrYPOBemSvmDsajlo0KDo
35YsWRJ78GQ9sv6QrYPOBUOsVXS2DjoXpLNW0dk66FyQztZB54J0SV8w9lAD
BgyI16rVq1f7eyPVbB10LhhiraKzddC5IJ21is7WQeeCdLYOOhekS/qCsQcs
LCyMoqh69err169P1sMqxNZB54Ih1io6WwedC9JZq+hsHXQuSGfroHNBuqQv
ePXq1X79+kVRVL9+/U8//TRZD6sQWwedC4ZYq+hsHXQuSGetorN10Lkgna2D
zgXpkr5g7HNy3759oyhq1qzZjh07kvWwCrF10LlgiLWKztZB54J01io6Wwed
C9LZOuhckC7pCx47dqxbt25RFLVv3/6bb75J1sMqxNZB54Ih1io6WwedC9JZ
q+hsHXQuSGfroHNBuqQvuG3btkcffTSKoh49euzfvz9ZD6sQWwedC4ZYq+hs
HXQuSGetorN10Lkgna2DzgXpkr7g66+/np+fH0XR8OHDjx49mqyHVYitg84F
Q6xVdLYOOheks1bR2TroXJDO1kHngnRJX3D8+PE5OTlRFL344otnz55N1sMq
xNZB54Ih1io6WwedC9JZq+hsHXQuSGfroHNBuqQvOGjQoOjfFi9eHHvkZD2s
QmwddC4YYq2is3XQuSCdtYrO1kHngnS2DjoXpEtRrcrKylqzZo1f4qaBrYPO
BUOsVXS2DjoXpLNW0dk66FyQztZB54J0KapVd91114YNG5L1mLoJWwedC4ZY
q+hsHXQuSGetorN10Lkgna2DzgXpUlSrGjVqtHXr1mQ9pm7C1kHngiHWKjpb
B50L0lmr6GwddC5IZ+ugc0G65C54+vTpnj17RlHUqlWrL774IimPqZuzddC5
YIi1is7WQeeCdNYqOlsHnQvS2TroXJAuuQt++umnrVu3jqKoS5cu3333XVIe
Uzdn66BzwRBrFZ2tg84F6axVdLYOOheks3XQuSBdchecNWtWw4YNoygaPnz4
0aNHk/KYujlbB50Lhlir6GwddC5IZ62is3XQuSCdrYPOBemSu+DQoUOzsrKi
KJozZ86lS5eS8pi6OVsHnQuGWKvobB10LkhnraKzddC5IJ2tg84F6ZK74JAh
Q7L+7YMPPvDr2/SwddC5YIi1is7WQeeCdNYqOlsHnQvS2TroXJAuFbUqJyfn
k08+ScoD6pZsHXQuGGKtorN10LkgnbWKztZB54J0tg46F6RL4oKxL2gHDhwY
RVGDBg02b9585w+oRNg66FwwxFpFZ+ugc0E6axWdrYPOBelsHXQuSJfEBY8c
OfKXv/wliqImTZps3779zh9QibB10LlgiLWKztZB54J01io6WwedC9LZOuhc
kC6JC86bNy8vLy+KooKCgu+///7OH1CJsHXQuWCItYrO1kHngnTWKjpbB50L
0tk66FyQLokLjho1qmbNmlEULViwoLi4+M4fUImwddC5YIi1is7WQeeCdNYq
OlsHnQvS2TroXJAuWQvGPg/H37SqRo0a69evT8rZlAhbB50Lhlir6GwddC5I
Z62is3XQuSCdrYPOBemSteC2bdseffTRKIpyc3M3bdqUlLMpEbYOOhcMsVbR
2TroXJDOWkVn66BzQTpbB50L0iVrwenTp9erVy+KohEjRhw7diwpZ1MibB10
LhhiraKzddC5IJ21is7WQeeCdLYOOhekS9aCI0aMqF69ehRFH374obfLdLJ1
0LlgiLWKztZB54J01io6WwedC9LZOuhckC4pCx49erRbt27Rv61duzZZZ1Mi
bB10LhhiraKzddC5IJ21is7WQeeCdLYOOhekS8qCq1atatasWRRFbdu23b17
d7LOpkTYOuhcMMRaRWfroHNBOmsVna2DzgXpbB10LkiXlAWnTp1at27dKIqW
LFkSe7RknU2JsHXQuWCItYrO1kHngnTWKjpbB50L0tk66FyQ7s4XvHr1amFh
YVZWlm9alRG2DjoXDLFW0dk66FyQzlpFZ+ugc0E6WwedC9Ld+YL79u3r3Llz
FEXZ2dnr1q1L4tmUCFsHnQuGWKvobB10LkhnraKzddC5IJ2tg84F6e58wfff
f79FixZRFPXo0WP//v1JPJsSYeugc8EQaxWdrYPOBemsVXS2DjoXpLN10Lkg
3Z0v+PLLL9erVy+KogULFhQXFyfxbEqErYPOBUOsVXS2DjoXpLNW0dk66FyQ
ztZB54J0d7hg7CcOHDgw/qZV77zzjjfu9LN10LlgiLWKztZB54J01io6Wwed
C9LZOuhckO4OFzx69Gi3bt2iKKpevfratWu9V6afrYPOBUOsVXS2DjoXpLNW
0dk66FyQztZB54J0d7jgtm3bHn300SiKOnbsuGfPnuSeTYmwddC5YIi1is7W
QeeCdNYqOlsHnQvS2TroXJDuDhecP39+Xl5eFEV/+9vfzpw5k9yzKRG2DjoX
DLFW0dk66FyQzlpFZ+ugc0E6WwedC9LdyYKxr2CfffbZatWqRVH0+uuvl5SU
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
g84F6axVdLYOOheks3XQuSDdzReMfY06YMCA+Fusv/baa1euXEnz8XRLtg46
FwyxVtHZOuhckM5aRWfroHNBOlsHnQvS3XzB8+fPP/3001EU5eTk+BbrFZOt
g84FQ6xVdLYOOheks1bR2TroXJDO1kHngnQ3X3DWrFkNGzaMoqhbt2779u1L
89mUCFsHnQuGWKvobB10LkhnraKzddC5IJ2tg84F6W6yYOyza58+faIoysrK
Wrx4cexv03883ZKtg84FQ6xVdLYOOheks1bR2TroXJDO1kHngnQ3WXDixIl3
3XVXFEXt2rX7+uuv0382JcLWQeeCIdYqOlsHnQvSWavobB10Lkhn66BzQbrQ
gl988cVjjz0WRVF2dvabb75ZUlKSkePplmwddC4YYq2is3XQuSCdtYrO1kHn
gnS2DjoXpPvDBWOfV/v375+VlRVFUe/evQ8ePJip4+mWbB10LhhiraKzddC5
IJ21is7WQeeCdLYOOheku3HB2GfU5557rkaNGlEU5ebmbty40dtiRWbroHPB
EGsVna2DzgXprFV0tg46F6SzddC5IN3vFox9UTp+/PjatWvH31x91apVXqIr
OFsHnQuGWKvobB10LkhnraKzddC5IJ2tg84F6couWFpaOmzYsPirqmL8cwAR
bB10LhhiraKzddC5IJ21is7WQeeCdLYOOheku77gpUuXCgsLs7Oz46lqwoQJ
RUVFmT6dbs3WQeeCIdYqOlsHnQvSWavobB10Lkhn66BzQbrrC27btq1t27ZR
FFWrVm3atGlnz57N9NGUEFsHnQuGWKvobB10LkhnraKzddC5IJ2tg84F6a4v
+Ntvvw0ZMqRhw4aLFy++fPlyps+lRNk66FwwxFpFZ+ugc0E6axWdrYPOBels
HXQuSOeCdLYOOhcMsVbR2TroXJDOWkVn66BzQTpvynQuSOeCdLYOOhcMsVbR
2TroXJDOWkVn66BzQTpvynQuSOeCdLYOujtZ8F+VWmlpaXFxcewjk+mDqJxc
kC62YOye5YJc8QX/+c9/ZvogKicXpHNBuviC165dy/RBVE6x7VwQzQXpXJAu
tt0//vGP2H8Ny/FziyVJkiRJkqQKI+nprELxlTl0Lkjna6vofF0HnQvSuSCd
r62i83UddC5I54J0d/LaqqR/W2KF4vtW0fmuR3QuSOf7VtH5rkd0Lkjne+bQ
uSCdC9L9y/etgnPBEGsVna2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsV
na2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6Tz
pkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsV
na2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6Tz
pkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsV
na2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6Tz
pkzngnQuSGfroHPBEGsVna2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsV
na2DzgXprFV0tg46F6TzpkzngnQuSGfroHPBEGsVna2DzgXprFV0to5kiX0k
f/vtt2PHju3bt2/Hjh0ff/zx6tWrly5dOm/evBkzZrzwwgvPP//8mDFjhg8f
PnTo0AEDBvTp0+fpp5/u1q1b165dn3zyydhfdO/evUePHk899VTPnj179eoV
+wGDBg0aMWLE+PHjp06dOnPmzPnz57/xxhvvvvvu5s2bv/3229hzXb58ubS0
1AXRvCnTuSCdC9LZOuhcMMRaRWfroHNBOmsVnbUqEcXFxceOHduzZ8/GjRvf
fvvtuXPnTp48ediwYT179mzfvv0DDzxQt27datWqRZlQvXr1Bg0atG7dulev
XuPHj58/f/5HH330zTffnD592i/8ELwp07kgnQvS2TroXDDEWkVn66BzQTpr
FZ21Kib2NdKvv/76zTfffPLJJ8uWLZs5c+bo0aP79OnToUOH+++/PycnJysr
KyMl6g7VqlWradOmBQUFw4YNmzFjxttvv719+/YjR46UlJT4lU/F4U2ZzgXp
XJDO1kHngiHWKjpbB50L0lmr6KpIrYp9FXT06NHdu3evXbt28eLFU6dOHTp0
aNeuXVu2bJmsl0VVr169fv36DzzwwKOPPhp75P79+w8fPvz555+fNm3a7Nmz
Fy1atHTp0hUrVqxevXrNmjXr16/fuHHj1q1bd+zY8cUXX+zcuTP2F59//vn2
7du3bdsW++ebN2/etGlT7LSrVq168803FyxY8Morr7z44osTJ04cNmzY008/
fYev6brnnnsef/zxkSNHLly4MPZcx44di/27nOmVqihvynQuSOeCdLYOOhcM
sVbR2TroXJDOWkVXaWpV7EudM2fOfP/99xs3bly2bNlLL700fPjw7t27P/TQ
Q7m5uXfYo+rUqdO0adP27dv37t37ueeemzZt2qJFi959990tW7Z8++23R48e
vXz5cqY+hrEv8GK/6q+++mrDhg1LliyZMmVKYWHhn//853vvvTc7OzvxX+Nd
d93VunXrgQMHzpw588MPP/zhhx+uXr2akV9RVeNNmc4F6VyQztZB54Ih1io6
WwedC9JZq+hYtaq0tPTEiRNff/312rVrFy5cOHny5AEDBnTq1KlJkyY1atQo
d4zKycmJPUKHDh369OkzevTov//978uXL9+4ceO33357/PjxkpKSivw56iYL
xk7+yy+/7NixY9WqVbFf1IgRI7p27dqsWbOaNWsm8mHJzs5u2rRpz549p0yZ
smLFiu+++85+lQrelOlckM4F6WwddC4YYq2is3XQuSCdtYquAtaq+Kuk9uzZ
s27duoULF06aNKl///7t27fPy8urXr16uXtU06ZNH3/88QEDBkycOHH+/Pnv
vffeZ599dujQoUuXLlWoX/7tKseCsU+5p06d2rFjx9KlS8ePH9+1a9f77rsv
kY9t7MPYrl27UaNGvfXWW99//73xKim8KdO5IJ0L0tk66FwwxFpFZ+ugc0E6
axVdBmtVaWnpsWPHdu7c+c4778ycOXPYsGFdunS5//77y/cqqaysrHvuuadt
27a9evUaPXr0rFmzVq5cuXXr1gMHDly8eLES/xZN1oKXLl367rvv3n333WnT
pvXp06dFixa3fAlW7dq1jVd3zpsynQvSuSCdrYPOBUOsVXS2DjoXpLNW0aWn
Vv3222979+5du3btq6+++txzzz3xxBP5+fnleKFUjRo1Gjdu3LFjx8LCwkmT
Ji1YsODDDz/cvXv38ePHq+ybhKduwdLS0iNHjnzyySdz584dPHhwy5Ytb96v
ysarffv2xX560o9UKXlTpnNBOheks3XQuWCItYrO1kHngnTWKrpUtI6TJ09u
27Zt8eLFo0eP7tKlS8OGDW/rTc7jr5J67LHH+vXrN3HixIULF65du/abb74p
KiryK5kbpfPVcRcvXvzyyy8XLVo0ZMiQW8ar2O5PP/30vHnzvv7665KSkjQc
D8qbMp0L0rkgna2DzgVDrFV0tg46F6SzVtHdeeuIfYGxd+/ed955Z8KECU88
8UTdunWzsrISfKFUkyZNunTpMmzYsJkzZ8YeYceOHceOHauyr5Iqnwx+L2c8
Xi1cuHDw4ME3/87BevXqdevWbfbs2bEfH/sNk/6jVmTelOlckM4F6WwddC4Y
Yq2is3XQuSCdtYquHK3jzJkz27dvX7BgwdChQx9++OFE/oC5u++++5FHHunb
t+8LL7ywfPnyzz777Ndff/XLkqSoOO+Tf+HChS+++CIer5o0aZKdnR36zVBQ
UDBz5szPP/88dvJMnzrzvCnTuSCdC9LZOuhcMMRaRWfroHNBOmsVXSKt48yZ
M1u3bp09e3bfvn0Teb+pvLy8goKCMWPGvP7665999tmpU6e8BaROxalVv3P0
6NF33333ueeea968eeid82vXrt2pU6dp06bt3Lmzyr7mypsynQvSuSCdrYPO
BUOsVXS2DjoXpLNW0f1h6zh16tTmzZtfeeWVPn365Ofnh14kExf7f1u2bDlw
4MBXX311y5Ytp0+f9vdDOlXYWlXW8ePH16xZM3bs2Ju8GC8vL2/AgAErV66M
/RaqUv9R8KZM54J0Lkhn66BzwRBrFZ2tg84F6axVdPHWcf78+Z07d86bN69/
//63zFN169bt1KnTuHHj3nrrrT179ly9ejXTv4gqDVGryjp16tT69esnTJjQ
tm3bWrVq/eHvsccee2zGjBlfffVVVXh7dm/KdC5I54J0tg46FwyxVtHZOuhc
kM5aBXX16tW9e/cuW7Zs2LBhrVq1uvl7T+Xm5nbu3HnixInvvffeoUOHfBf0
CgVXq8o6d+7cpk2bJkyY0Lx58z/8DtPGjRsPGTLk/fffP3/+fGX9as2bMp0L
0rkgna2DzgVDrFV0tg46F6SzVoEcPXp0zZo1EydO7NixY05Ozk3yVP369bt0
6TJp0iTzVMWHrlVl/fjjj4sWLerevXudOnVu/D1ZvXr1Tp06vfLKK99//31p
aWmmD5tM3pTpXJDOBelsHXQuGGKtorN10LkgnbWqIvu/2bvv96rLfN///8dN
Cx1pAaRIgFCCOjQRBCtYQFEsCFiwIXaRpqAzY0FUGLDMAAIqgmgQkSI1gAQ0
lFCuocy1f9h/wXd99/JEBrhDCEk+67nW8/HDuc7Ze4R7fGng/TxJOHHixHff
fTdr1qw777wzPz+/fv36sTyVl5d37bXXTpo0acGCBdu2bTNPgWRNrapw9OjR
f/3rXxMnTuzSpctFvyi1oKDgqaee+v7777Pjq1C9lOlckM4F6WwddC4YY62i
s3XQuSCdtSrTlJSULFq06PHHH7/uuuti3xQorUePHuPGjXvzzTe/+eabnP3j
2LJA9tWqc23evHnWrFk33nhjs2bNLvrP8DPPPFNcXIzOVl7KdC5I54J0tg46
F4yxVtHZOuhckM5albhTp06lrvU5c+bceeed7du3r+QTqFL/21tvvfX1119f
tWrV0aNH0//eZXfryAU5smBZWdmnn3760EMPtWvXrl69euf9s92zZ89nn312
/fr1xC8S9FKmc0E6F6SzddC5YIy1is7WQeeCdNaqRPz+++/Lly9//vnnhwwZ
0rRp01ieql+/ft++fR999NEFCxbs2LHjol/flyOtI4vl2oKpf4xXr149efLk
du3aXfjPfK9evZ577rkNGzaAspWXMp0L0rkgna2DzgVjrFV0tg46F6SzVtWZ
nTt3LliwYMKECal7vFGjRrFClZ+ff/vtt7/xxhupi/7kyZOX/AUu11pH9snZ
Bc+ePfv1119PmjSpbdu2F/6LUFhY+Pzzz//000+Zn628lOlckM4F6WwddC4Y
Y62is3XQuSCdtar2pP7epm7tuXPn3nXXXe3atavkS/x69er1yCOPfPjhhzt3
7rzcX+tztnVkDRc8ffr0V1999eijj140W/Xv33/27Nm//fZbxv5mz0uZzgXp
XJDO1kHngjHWKjpbB50L0lmratbJkyfXrFnz+uuvjxw58qLfVjot9b8aMmTI
1KlTly5deuTIkSv5N8jWQeeCFU6dOrVq1aoJEyZcmK2aNm161113pf59Sf0r
lvQzz+elTOeCdC5IZ+ugc8EYaxWdrYPOBemsVVfu8OHDX3755fPPPz948OAm
TZrEClWHDh1Gjx49Z86cH374oQb/BDRbB50LXujUqVMrV6585JFH2rRpc96/
RwUFBdOmTduxY0fmXKZeynQuSOeCdLYOOheMsVbR2TroXJDOWlU9Bw4c+PTT
T5944ol+/frl5eXFClXqsn7wwQfnz59fjS/xqyJbB50LVuLo0aMLFy686Gcq
Dhs2bMGCBeXl5Um/0UsZzwXpXJDO1kHngjHWKjpbB50L0lmrqu7XX39dvHjx
pEmTCgsLK/k26X379n3sscdS/8kDBw7Uwd9YWwedC1bFL7/88tJLL3Xu3Lle
vXrn/uuWn58/ceLE4uLiBL8Zu5cynQvSuSCdrYPOBWOsVXS2DjoXpLNWVW7v
3r0LFy589NFHe/ToEStUeXl5AwYMePbZZ5ctW3b06NE6/tfB1kHnglV39uzZ
5cuXjxkzplWrVuf9a3j99dfPmzfv0KFDdf8qL2U6F6RzQTpbB50Lxlir6Gwd
dC5IZ626UElJyccff/zwww937969YcOGFy1UzZs3HzZs2Kuvvrp69epTp04l
+FpbB50LVsPevXvfeuutoqKi8xpyhw4dnn766d27d9fl308vZToXpHNBOlsH
nQvGWKvobB10LkhnrUrbs2dPulB17do1Vqhatmw5YsSI6dOnr1u3rga/TfoV
snXQueCV+P777ydOnHjenyGYl5d3zz33rFmzpm7+PfVSpnNBOheks3XQuWCM
tYrO1kHngnS5XKt+/fXXRYsWTZgwoZLPoWrTps0tt9wyc+bMmv2D/GqQrYPO
Ba/c4cOH33///Wuvvfa8T7UaOnToJ598cuzYsVr92b2U6VyQzgXpbB10Lhhj
raKzddC5IF2u1arS0tIlS5ZMmjSpZ8+ese9D1bZt29tvv3327Nk//vhjgt+6
uYpsHXQuWINWrVo1atSo5s2bn/tvdGFh4cyZM8vKymrpJ/VSpnNBOheks3XQ
uWCMtYrO1kHngnS5UKt+++23zz///PHHH+/du3esULVp0+a2226bPXv2hg0b
Mr9QncvWQeeCNW7jxo2PPfbYeV8e2K5du9T/cNu2bTV+0nop07kgnQvS2Tro
XDDGWkVn66BzQbpsrVWpXzS/+eabqVOn9u/fPy8vL/Z9qG6++eYZM2YUFxez
CtW5bB10LlhL9u3bl/q3++qrrz733/oGDRqMGjVq9erVNfiFvV7KdC5I54J0
tg46F4yxVtHZOuhckC7LatWWLVvmzp176623NmvW7KKFKvU/Hz58eKZ9p/Qr
Yeugc8Falfp7u3DhwkGDBjVu3PjcDwWpjxJff/11jfyBnl7KdC5I54J0tg46
F4yxVtHZOuhckC4LalVpaemiRYsefPDBTp061a9f/8JC1aRJkxtuuOGVV15Z
u3ZtdhSqc9k66Fywbqxevfqee+5p2bLluR8cbrnllq+++uoKm5WXMp0L0rkg
na2DzgVjrFV0tg46F6SD1qrUmy/5hX59+/Z96qmnvvzyy9QvoEm/txbZOuhc
sC5t2bJl8uTJbdq0Oa9ZrVq1qtrNykuZzgXpXJDO1kHngjHWKjpbB50L0rFq
1ebNm998883UaRn7Qr+OHTved999CxYsKC0tpfyXukK2DjoXrHtbt26twWbl
pUzngnQuSGfroHPBGGsVna2DzgXpMr9W7d+/f+HChQ8++GDHjh0v+oV+TZs2
HT58+MyZMzdu3Hj27Nmk31vXbB10LpiUrVu3Pv744+c1q9tvv339+vWpD4xV
/3G8lOlckM4F6WwddC4YY62is3XQuSBdZtaqii/0KyoqqvwL/VasWJHdX+h3
SbYOOhdM1i+//HJes2rYsOHDDz/866+/VvFH8FKmc0E6F6SzddC5YIy1is7W
QeeCdBlVqy75hX6dOnUaN27cRx99lDtf6HdJtg46F8wEv/zyyxNPPNG2bduK
jzbt27d/+eWXf//990v+tV7KdC5I54J0tg46F4yxVtHZOuhckC7xWpX+Qr/x
48d36NDhol/o16xZs5tuumnWrFm5+YV+l2TroHPBzLFhw4Z77723RYsWFR9/
CgsL33333fLy8kr+Ki9lOhekc0E6WwedC8ZYq+hsHXQuSJdIrTp58uRXX331
3HPPVf6Ffk8//fTKlStz/Av9LsnWQeeCmSb1YeeGG24490NT6v+5bNmy2Mci
L2U6F6RzQTpbB50Lxlir6GwddC5IV5e1atOmTXPmzBk5cmQlX+iX/hP9Dhw4
4PFeRbYOOhfMQKnfeH/yySfXXHPNuR+gHnjggX379l34H/ZSpnNBOheks3XQ
uWCMtYrO1kHngnS1Xauq8oV+I0aMmDVr1s8//+wX+lWDrYPOBTPW4cOHZ86c
2bFjx4qPV926dXvnnXfO+8JAL2U6F6RzQTpbB50Lxlir6GwddC5IVxu1KvUD
fv3115V/oV+/fv2eeeYZv9Dvytk66Fwww+3atWvSpEmtW7eu+PB12223bdy4
seI09lKmc0E6F6SzddC5YIy1is7WQeeCdDVYq0pLSxcsWHD33Xc3b978ooXq
6quvvv/++z/++OODBw96m9cUWwedCyJ8+eWXRUVFFZ8g2qpVq2nTpqX/xEAv
ZToXpHNBOlsHnQvGWKvobB10Lkh35bVqy5Yts2bNGjx4cOPGjWNf6Dd79uxN
mzb5hX61wdZB54IU5eXl06dP79ChQ8XHtwEDBixbtuz48eNeymi2DjoXpLN1
0LlgjLWKztZB54J01atVqb9q9erVTz/9dI8ePRo2bOgX+iXI1kHngizFxcW3
3nprkyZN0h/r6tev//jjj+/atctLmcvWQeeCdLYOOheMsVbR2TroXJDusmrV
4cOHlyxZcv/997dq1erCQtWoUaObbrpp7ty5Hm51ydZB54I4qV/yPvzwwy5d
ulR89LvhhhuKi4v9uAdl66BzQTpbB50Lxlir6GwddC5IV5VatWvXrrfffnvE
iBFNmza9MFK1a9fuvvvuW7Ro0bFjx/xoXPdsHXQuCJX6wPjAAw+0aNEi/ZGw
bdu2s2fPPnLkSNLv0mWzddC5IJ2tg84FY6xVdLYOOhekq6RWrV+//sUXX4z9
uX49e/acMmXKN998c/r06bp/tirYOuhcEO3999/v3LlzxQfGu+++u6SkJOlH
6fLYOuhckM7WQeeCMdYqOlsHnQvSnVerTpw4sXz58okTJ3bo0KHiT78618CB
A994440tW7ak/sJkX640WwedC9KtW7fuxhtvrKj6PXv2XLRoUWrTpN+lqrJ1
0Lkgna2DzgVjrFV0tg46F6RLL7hnz5758+ePHj26WbNmFxaqFi1ajBo16oMP
Pvjtt9/cOtPYOuhckC614MGDB1988cX27dtXfNh89tlnf//996SfpiqxddC5
IJ2tg84FY6xVdLYOOhdE27Rp0+uvvz5w4MDGjRtfGKm6dOkyYcKEpUuX+uf6
ZTJbB50L0lVcysuXL+/Vq1fFh9D77rtvz549Sb9Ol2broHNBOlsHnQvGWKvo
bB10LoiTmuybb76ZMmVK9+7dGzZseGGk6t+//wsvvFBcXHz27NmkH6tLs3XQ
uSDduZfyvn37xo8fX/Gt14cNG7Zt27akH6hLsHXQuSCdrYPOBWOsVXS2DjoX
pCgrK/vHP/5x3333tWzZ8sJClZeXN3LkyLfffrukpMTf77HYOuhckO68Szn1
/3zjjTfy8/PTH12vv/76H3/80V8lM5mtg84F6WwddC4YY62is3XQuWCG27Fj
x7x582666aamTZteGKnat28/duzYDz/8sLy83A+kULYOOheku+il/PHHH3fr
1i39kbZXr16rVq3yT6bIWLYOOheks3XQuWCMtYrO1kHnghko9SGxuLj4hRde
6Nu3b6NGjS6MVKnT6emnn/72229Pnz593p8JKBxbB50L0sUu5c8//7ygoCD9
Ubdr167Lli3zy6szk62DzgXpbB10LhhjraKzddC5YOY4fvz40qVLJ0yY0L59
+3r16l0YqQYPHjxz5sytW7ee+//Fb62is3XQuSBdJZfyqlWrCgsL0x+BO3fu
/MUXX5w5c6buX6jK2TroXJDO1kHngjHWKjpbB50LZoh333333D88vUKrVq1G
jx49f/78srKyi85kraKzddC5IF3ll/J3333Xt2/f9Afkjh07Llmy5PTp03X8
QlXO1kHngnS2DjoXjLFW0dk66FwwQwwdOrRBgwYVkapbt24TJ05cvnz5qVOn
Kv8LrVV0tg46F6S75KX8ww8/9OvXr+K7BRqsMo2tg84F6WwddC4YY62is3XQ
uWCGePfddwsKCgYMGPDSSy+tX7++6t8dxVpFZ+ugc0G6qlzKqQ/LRUVF6WDV
qVOnf/7zn35JYOawddC5IJ2tg84FY6xVdLYOOheks1bR2TroXJCuipfyhg0b
+vfvnw5WXbp0Wb58ud90PUPYOuhckM7WQeeCMdYqOlsHnQvSWavobB10LkhX
9Uu5uLi44jOsrrnmmlWrVvl7+0xg66BzQTpbB50Lxlir6GwddC5IZ62is3XQ
uSDdZV3K69atq/geVj179lyzZo3TJ87WQeeCdLYOOheMsVbR2TroXJDOWkVn
66BzQbrLvZTXrFnTp0+fdLAqKirauHFjrT5Pl2TroHNBOlsHnQvGWKvobB10
LkhnraKzddC5IF01LuWvv/66d+/e6WA1aNCgLVu21N7zdEm2DjoXpLN10Llg
jLWKztZB54J01io6WwedC9JV71JetmxZr1690sFq+PDh27Ztq6Xn6ZJsHXQu
SGfroHPBGGsVna2DzgXprFV0tg46F6Sr9qX86aefFhQUpIPVHXfcsXPnztp4
ni7J1kHngnS2DjoXjLFW0dk66FyQzlpFZ+ugc0G6K7mUP/roo65du6aD1bhx
4/bu3Vvjz9Ml2TroXJDO1kHngjHWKjpbB50L0lmr6GwddC5Id4WX8t/+9rer
r746HawmTZpUWlpas8/TJdk66FyQztZB54Ix1io6WwedC9JZq+hsHXQuSHfl
l/KMGTPat2+fDlZTp04tKyurwefpkmwddC5IZ+ugc8EYaxWdrYPOBemsVXS2
DjoXpKuRS/mFF15o3bp1OljNmDGjvLy8pp6nS7J10Lkgna2DzgVjrFV0tg46
F6SzVtHZOuhckK5GLuXUjzBp0qQWLVqEEJo2bfrBBx+k/qmoqReqcrYOOhek
s3XQuWCMtYrO1kHngnTWKjpbB50L0tXUpfz777+PHj06Ly8vhNCpU6dly5al
Pj7XyAtVOVsHnQvS2TroXDDGWkVn66BzQTprFZ2tg84F6WrwUt6xY8fAgQPr
1asXQujdu/eGDRv8LW4dsHXQuSCdrYPOBWOsVXS2DjoXpLNW0dk66FyQrmYv
5eLi4qKiovQ3sBoyZMjWrVtr5IdVJWwddC5IZ+ugc8EYaxWdrYPOBemsVXS2
DjoXpKvxS3nFihWFhYXpYHXnnXfu2rWrpn5kXZStg84F6WwddC4YY62is3XQ
uSCdtYrO1kHngnS1cSkvWrTommuuSQerCRMm7N+/vwZ/cJ3H1kHngnS2DjoX
jLFW0dk66FyQzlpFZ+ugc0G6WrqU582b17Fjx3Swev7558vKymr2x1cFWwed
C9LZOuhcMMZaRWfroHNBOmsVna2DzgXpau9Sfumll9q0aZMOVrNnzz527FiN
/xT6X1sHnwvS2TroXDDGWkVn66BzQTprFZ2tg84F6WrvUj516tSjjz7avHnz
EELr1q2XLFly5syZGv9ZZOugc0E6WwedC8ZYq+hsHXQuSGetorN10LkgXa1e
yqWlpbfcckvDhg1DCD169Pjhhx/8TW+Ns3XQuSCdrYPOBWOsVXS2DjoXpLNW
0dk66FyQrrYv5U2bNl133XXprwccMmTI1q1ba+knylm2DjoXpLN10LlgjLWK
ztZB54J01io6WwedC9LVwaX81Vdf9e7dOx2s7rrrrt27d9fez5WDbB10Lkhn
66BzwRhrFZ2tg84F6axVdLYOOhekq5tLedGiRddcc006WE2cOLG0tLRWf7qc
Yuugc0E6WwedC8ZYq+hsHXQuSGetorN10LkgXZ1dynPnzu3YsWM6WL3yyiuH
Dx+u7Z8xR9g66FyQztZB54Ix1io6WwedC9JZq+hsHXQuSFeXl/K0adNat24d
QsjLy3vvvfdS/+TUwU+a9WwddC5IZ+ugc8EYaxWdrYPOBemsVXS2DjoXpKvL
S/nYsWPjxo1r0qRJCKFz585ff/21F/qVs3XQuSCdrYPOBWOsVXS2DjoXpLNW
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
Y9LP+ZML0rkgna2DzgVjrFV0tg46F6SzVtHZOuhckM5LuYoWLlzYvXv3EMI9
99yze/fupJ/zJxekc0E6WwedC8ZYq+hsHXQuSGetorN10LkgnZdyFb300ktt
2rQJIbzwwguHDh1K+jl/ckE6F6SzddC5YIy1is7WQeeCdNYqOlsHnQvSeSlX
0ZgxYxo0aBBC+Pjjj8+ePZv0c/7kgnQuSGfroHPBGGsVna2DzgXprFV0tg46
F6TzUq6K/fv3p7/Fert27dasWZP0c/6LC9K5IJ2tg84FY6xVdLYOOheks1bR
2TroXJDOS7kqVq5c2adPnxDC4MGDN2/enPRz/osL0rkgna2DzgVjrFV0tg46
F6SzVtHZOuhckM5LuSpefvnl9Detmjx5cmlpadLP+S8uSOeCdLYOOheMsVbR
2TroXJDOWkVn66BzQTov5Us6efLkzTffHP5Ppn3Tqv91QT4XpLN10LlgjLWK
ztZB54J01io6WwedC9J5KV/S8uXLCwsLQwh9+vT58ccfk37O+VyQzgXpbB10
LhhjraKzddC5IJ21is7WQeeCdF7Kl/TUU0+1bNkyhPD4448fOHAg6eeczwXp
XJDO1kHngjHWKjpbB50L0lmr6GwddC5I56VcuR07dgwaNCiE0KhRo2XLlmXg
bxhckM4F6WwddC4YY62is3XQuSCdtYrO1kHngnReypV76623OnbsGEK4+eab
t23blvRzLsIF6VyQztZB54Ix1io6WwedC9JZq+hsHXQuSOelXIkjR44MHz48
/f3V582bd+LEiaRfdBEuSOeCdLYOOheMsVbR2TroXJDOWkVn66BzQTov5Uos
XLjwmmuuCSH079//p59+Svo5F+eCdC5IZ+ugc8EYaxWdrYPOBemsVXS2DjoX
pPNSjkn9+nLXXXc1aNAghPDCCy8cOnQo6RddnAvSuSCdrYPOBWOsVXS2DjoX
pLNW0dk66FyQzks55osvvujZs2cIoWvXrt9//33Sz4lyQToXpLN10LlgjLWK
ztZB54J01io6WwedC9J5KV9U6jfn48ePz8vLCyFMmTLl4MGDSb8oygXpXJDO
1kHngjHWKjpbB50L0lmr6GwddC5I56V8UV9++WVhYWEIIT8//7vvvkv6OZVx
QToXpLN10LlgjLWKztZB54J01io6WwedC9J5KV/Uww8/3KRJkxDCpEmTSktL
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
tYrO1kHngnTWKjpbB50L0mXIpXzkyJEHH3ywWbNm6e+s/vrrrx89ejTZJ1Fk
yIKqNheks3XQuWCMtYrO1kHngnTWKjpbB50L0mXCpXz8+PEJEyY0b948nape
fvnlw4cPJ/gelkxYUFfCBelsHXQuGGOtorN10LkgnbWKztZB54J0iV/KqX9+
Jk+e3KJFi3SqeuGFFw4dOpTUY4gSX1BXyAXpbB10LhhjraKzddC5IJ21is7W
QeeCdMleyidOnJg8eXLLli3Tqer5558vKytL5CVctg46F6SzddC5YIy1is7W
QeeCdNYqOlsHnQvSJXgpHzt2bOLEiRWfVfXss8/+/vvvdf8MOlsHnQvS2Tro
XDDGWkVn66BzQTprFZ2tg84F6ZK6lMvLyydMmFCRqp5++unffvutjt+QHWwd
dC5IZ+ugc8EYaxWdrYPOBemsVXS2DjoXpEvkUj5y5MjDDz9c8W3V/ayqK2Hr
oHNBOlsHnQvGWKvobB10LkhnraKzddC5IF3dX8qHDx8eP358s2bN0qlq6tSp
fq+qK2HroHNBOlsHnQvGWKvobB10LkhnraKzddC5IF0dX8qHDh26//77K1KV
31b9ytk66FyQztZB54Ix1io6WwedC9JZq+hsHXQuSFeXl/KBAwfGjBnTtGnT
dKp64YUXDh06VAc/b3azddC5IJ2tg84FY6xVdLYOOheks1bR2TroXJCuzi7l
vXv33nHHHY0bN06nqhdffNFUVSNsHXQuSGfroHPBGGsVna2DzgXprFV0tg46
F6Srm0t5x44dI0aMaNiwYTpVvfLKK4cPH67VnzF32DroXJDO1kHngjHWKjpb
B50L0lmr6GwddC5IVweX8pYtWwYPHly/fv0QQqNGjWbOnFleXl57P12usXXQ
uSCdrYPOBWOsVXS2DjoXpLNW0dk66FyQrrYv5R9//LF///7pT6lq1qzZvHnz
jh8/Xks/V26yddC5IJ2tg84FY6xVdLYOOheks1bR2TroXJCuVi/ldevW9evX
L52qWrdu/cEHH5w8ebI2fqJcZuugc0E6WwedC8ZYq+hsHXQuSGetorN10Lkg
Xe1dyqtXr+7Tp086VeXn53/yySepn6jGfxbZOuhckM7WQeeCMdYqOlsHnQvS
WavobB10LkhXS5fysmXLevbsmU5VXbp0+eKLL06fPl2zP4XSbB10Lkhn66Bz
wRhrFZ2tg84F6axVdLYOOhekq41LefHixd27d0+nqoKCghUrVqQ+Vtfgj69z
2TroXJDO1kHngjHWKjpbB50L0lmr6GwddC5IV+OX8vz587t06ZJOVUVFRevW
rfMMr1W2DjoXpLN10LlgjLWKztZB54J01io6WwedC9LV7KX8zjvvdOrUKZ2q
Bg8evGXLlhr5YVUJWwedC9LZOuhcMMZaRWfroHNBOmsVna2DzgXpavBSnjlz
Zn5+fjpVjRw5cvv27Vf+Y+qSbB10Lkhn66BzwRhrFZ2tg84F6axVdLYOOhek
q5FL+ezZs9OmTWvTpk06VY0ePXrXrl019UJVztZB54J0tg46F4yxVtHZOuhc
kM5aRWfroHNBuiu/lMvLyydPntyyZct0qho3btzevXtr8IWqnK2DzgXpbB10
LhhjraKzddC5IJ21is7WQeeCdFd4Kf/6669jxoxp2rRpOlVNnDixtLS0Zl+o
ytk66FyQztZB54Ix1io6WwedC9JZq+hsHXQuSHcll/LWrVuHDx/esGHDdKp6
6qmnfvvttxp/oSpn66BzQTpbB50Lxlir6GwddC5IZ62is3XQuSBdtS/lH374
oaioKN2p6tWr9/LLLx8+fLg2XqjK2TroXJDO1kHngjHWKjpbB50L0lmr6Gwd
dC5IV71LecWKFYWFhelU1apVq7fffvv48eO19EJVztZB54J0tg46F4yxVtHZ
OuhckM5aRWfroHNBumpcykuWLOnevXs6VXXu3Pkf//hH6keovReqcrYOOhek
s3XQuWCMtYrO1kHngnTWKjpbB50L0l3upfz+++937tw5nap69+799ddfpz4O
1+oLVTlbB50L0tk66FwwxlpFZ+ugc0E6axWdrYPOBeku61KeM2dOhw4d0qlq
0KBBP//8s7+JTZytg84F6WwddC4YY62is3XQuSCdtYrO1kHngnRVvJRT/5mp
U6e2adMmnapuueWWHTt21M0LVTlbB50L0tk66FwwxlpFZ+ugc0E6axWdrYPO
BemqcikfPHhw/PjxzZs3T6eqsWPH7tmzp64eqEuwddC5IJ2tg84FY6xVdLYO
Oheks1bR2TroXJDukpfyL7/8MnLkyEaNGqVT1cSJE0tLS+vyhaqcrYPOBels
HXQuGGOtorN10LkgnbWKztZB54J0lV/K69at69evX/h/nn/++bKysjp+oSpn
66BzQTpbB50Lxlir6GwddC5IZ62is3XQuSBdJZfy0qVLe/bsme5ULVq0mDt3
7rFjx+r+haqcrYPOBelsHXQuGGOtorN10LkgnbWKztZB54J0sUv5o48+6tq1
azpVdenSZfHixadOnUrkhaqcrYPOBelsHXQuGGOtorN10LkgnbWKztZB54J0
F72U33zzzQ4dOqRTVf/+/deuXetv4zOWrYPOBelsHXQuGGOtorN10LkgnbWK
ztZB54J0513Kp06dmjp1aps2bdKpavjw4du2bUv2haqcrYPOBelsHXQuGGOt
orN10LkgnbWKztZB54J0517KpaWl999/f7NmzdKp6u677969e3fSD9Ql2Dro
XJDO1kHngjHWKjpbB50L0lmr6GwddC5IV3Epb9q06cYbb2zYsGE6VT366KP7
9+9P+nW6NFsHnQvS2TroXDDGWkVn66BzQTprFZ2tg84F6dKX8ooVK3r37h3+
n+eff76srCzpp6lKbB10Lkhn66BzwRhrFZ2tg84F6axVdLYOOhekSy24YMGC
bt26pTtV69at//rXvx4/fjzpd6mqbB10Lkhn66BzwRhrFZ2tg84F6axVdLYO
OhekmzdvXseOHdOpqqCgYOnSpWfOnEn6UboMtg46F6SzddC5YIy1is7WQeeC
dNYqOlsHnQtynT59etq0aRV//N/gwYM3btzoL4g4tg46F6SzddC5YIy1is7W
QeeCdNYqOlsHnQtCpf/4v+bNm6dT1ahRo3bt2pX0o1Qdtg46F6SzddC5YIy1
is7WQeeCdNYqOlsHnQsSbd68eejQoRV//N8DDzywb9++pB+larJ10Lkgna2D
zgVjrFV0tg46F6SzVtHZOuhcEGfVqlWFhYUVf/zfM888s2fPHi9lLlsHnQvS
2TroXDDGWkVn66BzQTprFZ2tg84FWT755JPz/vi/w4cPeymj2TroXJDO1kHn
gjHWKjpbB50L0lmr6GwddC4IMmfOnPz8/HSq6tmz57Jly86cOeOlTOeCdC5I
Z+ugc8EYaxWdrYPOBemsVXS2DjoXRDhy5Mjjjz/eqlWrdKoaOnToli1b0r//
9FKmc0E6F6SzddC5YIy1is7WQeeCdNYqOlsHnQtmvu3bt992222NGzdOp6ox
Y8bs2bOn4n/rpUzngnQuSGfroHPBGGsVna2DzgXprFV0tg46F8xwa9as6dOn
T8X3VH/iiScOHjx47n/AS5nOBelckM7WQeeCMdYqOlsHnQvSWavobB10LpjJ
lixZ0r1793Snatq06axZs44ePXref8ZLmc4F6VyQztZB54Ix1io6WwedC9JZ
q+hsHXQumLHefvvtTp06pVNVt27dlixZkvrd+IX/MS9lOhekc0E6WwedC8ZY
q+hsHXQuSGetorN10LlgBjp+/PgzzzzTunXrdKoaOHDg+vXrYxt5KdO5IJ0L
0tk66FwwxlpFZ+ugc0E6axWdrYPOBTPN9u3bR40a1aRJk3SqSv3fd+/eXcl/
3kuZzgXpXJDO1kHngjHWKjpbB50L0lmr6GwddC6YUVavXt27d++K76k+ceLE
0tLSyv8SL2U6F6RzQTpbB50Lxlir6GwddC5IZ62is3XQuWDm+Pjjj7t161bx
PdWnT59+5MiRS/5VXsp0LkjngnS2DjoXjLFW0dk66FyQzlpFZ+ugc8FMkPpI
OH369Pbt26dT1TXXXBP7nuoX8lKmc0E6F6SzddC5YIy1is7WQeeCdNYqOlsH
nQsmbv/+/ePHj2/evHk6VQ0dOnTTpk1V/3XNS5nOBelckM7WQeeCMdYqOlsH
nQvSWavobB10Lpis4uLiAQMG1K9fP52q7rvvvr17917Wj+ClTOeCdC5IZ+ug
c8EYaxWdrYPOBemsVXS2DjoXTNDnn39eUFBQ8T3Vn3vuubKyssv9QbyU6VyQ
zgXpbB10LhhjraKzddC5IJ21is7WQeeCSXn77bc7deqU7lT5+fnvv//+iRMn
qvHjeCnTuSCdC9LZOuhcMMZaRWfroHNBOmsVna2DzgXr3pEjR5544omrrroq
naquvfbaNWvWVPu32V7KdC5I54J0tg46F4yxVtHZOuhckM5aRWfroHPBOrZ1
69aRI0fm5eWlU9WoUaN27dp1JT+glzKdC9K5IJ2tg84FY6xVdLYOOheks1bR
2TroXLAurVy5slevXhXfqGry5MkHDhy4wh/TS5nOBelckM7WQeeCMdYqOlsH
nQvSWavobB10Llhn5s+f37lz53SnatGixZtvvlleXn7lP6yXMp0L0rkgna2D
zgVjrFV0tg46F6SzVtHZOuhcsA6cPn36xRdfbNu2bTpV9ezZc+nSpWfOnKmR
H9xLmc4F6VyQztZB54Ix1io6WwedC9JZq+hsHXQuWNtKSkrGjBnTrFmzdKq6
6aabtm/fXoM/vpcynQvSuSCdrYPOBWOsVXS2DjoXpLNW0dk66FywVn399deF
hYUV36hq/Pjxv/76a83+FF7KdC5I54J0tg46F4yxVtHZOuhckM5aRWfroHPB
2vP+++9XfKOqhg0bvvTSS4cOHarxn8VLmc4F6VyQztZB54Ix1io6WwedC9JZ
q+hsHXQuWBuOHDkyZcqU1q1bp1PVNddcs3jx4tTvpWvj5/JSpnNBOheks3XQ
uWCMtYrO1kHngnTWKjpbB50L1riNGzcOHz68UaNG6VQ1YsSIbdu21d7vFb2U
6VyQzgXpbB10LhhjraKzddC5IJ21is7WQeeCNevzzz/v3r17xTeqmjhxYmlp
aa3+jF7KdC5I54J0tg46F4yxVtHZOuhckM5aRWfroHPBmpL63fKsWbPy8/PT
nap169Zz584tLy+v7Z/XS5nOBelckM7WQeeCMdYqOlsHnQvSWavobB10Llgj
9u7dO27cuObNm6dT1bXXXvvNN9+kPr7VwU/tpUzngnQuSGfroHPBGGsVna2D
zgXprFV0tg46F7xy3377bd++fevVq5dOVXfffXdJSUmd/exeynQuSOeCdLYO
OheMsVbR2TroXJDOWkVn66BzwSs0f/78Ll26pDtVvXr1nnvuubKysrp8gJcy
nQvSuSCdrYPOBWOsVXS2DjoXpLNW0dk66Fyw2o4dO/bss8+2adMmnaq6du26
cOHC1N/MOn6GlzKdC9K5IJ2tg84FY6xVdLYOOheks1bR2TroXLB6Nm/efPPN
Nzdu3DidqoYNG5b6nyTyi5GXMp0L0rkgna2DzgVjrFV0tg46F6SzVtHZOuhc
sBr++c9/FhQUhP/n4Ycf3r9/f1KP8VKmc0E6F6SzddC5YIy1is7WQeeCdNYq
OlsHnQteltQvN2+++WaHDh3Snaply5azZ88+evRogk/yUqZzQToXpLN10Llg
jLWKztZB54J01io6WwedC1bd3r17x48f36JFi3SqKioqWrVq1dmzZ5N9lZcy
nQvSuSCdrYPOBWOsVXS2DjoXpLNW0dk66FywilatWlVYWFjx1X933nlnSUlJ
0o/6/3kp07kgnQvS2TroXDDGWkVn66BzQTprFZ2tg84Fq+Kdd97p2LFjRap6
+umnf//996Qf9QcvZToXpHNBOlsHnQvGWKvobB10LkhnraKzddC5YOX27Nlz
//33N2/ePN2punfvvmjRotTfsaTf9ScvZToXpHNBOlsHnQvGWKvobB10Lkhn
raKzddC5YCVWrlzZq1evik+puv3223ft2pX0o87npUzngnQuSGfroHPBGGsV
na2DzgXprFV0tg46F7yo1C8r8+bNq/jqv3r16mXUV/+dy0uZzgXpXJDO1kHn
gjHWKjpbB50L0lmr6GwddC54od27d48bN67iq/8KCgoWL16c+p1w0u+6OC9l
Ohekc0E6WwedC8ZYq+hsHXQuSGetorN10LngeVasWNGzZ88M/+q/c3kp07kg
nQvS2TroXDDGWkVn66BzQTprFZ2tg84FK6T+Jrz11lsdOnRId6r69es/++yz
mfnVf+fyUqZzQToXpLN10LlgjLWKztZB54J01io6WwedC6bt2rVr7NixzZo1
S6eqHj16LFmyJGO/+u9cXsp0LkjngnS2DjoXjLFW0dk66FyQzlpFZ+ugc8GU
5cuX9+jRo+Kr/0aNGrV79+6kH1VVXsp0LkjngnS2DjoXjLFW0dk66FyQzlpF
Z+ugy/EFU7/FnTNnTsVX/zVo0GDq1KllZWVJv+syeCnTuSCdC9LZOuhcMMZa
RWfroHNBOmsVXY63jiyQywvu3LlzzJgxFV/916tXr88++wzx1X/n8lKmc0E6
F6SzddC5YIy1is7WQeeCdNYqulxuHdkhZxdctmzZuV/9N3r06JKSkqQfVR1e
ynQuSOeCdLYOOheMsVbR2TroXJDOWkWXs60ja+TggqdOnXrjjTfy8/PTnaph
w4bTpk1jffXfubyU6VyQzgXpbB10LhhjraKzddC5IJ21ii4HW0eWybUFN27c
eMsttzRu3DidqgoLC7/44otTp04l/a7q81Kmc0E6F6SzddC5YIy1is7WQeeC
dNYqulxrHdknpxb8+OOPu3btWvHVf3feeSf0q//O5aVM54J0Lkhn66BzwRhr
FZ2tg84F6axVdDnVOrJSjix44MCBSZMmtWrVKt2pWrRoMX369CNHjiT9rhrg
pUzngnQuSGfroHPBGGsVna2DzgXprFV0OdI6slguLPjVV1/16dOnXr166VQ1
aNCgNWvWpD74JP2umuGlTOeCdC5IZ+ugc8EYaxWdrYPOBemsVXS50DqyW3Yv
mPoIM3v27A4dOlR89d+jjz5aWlqa9LtqkpcynQvSuSCdrYPOBWOsVXS2DjoX
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
SOeCdLYOOhcMsVbR2TroXJDOWkVnraLLXfChL/0rV67chAkTrl69GusH1F/w
UqZzQToXpLN10LlgiLWKztZB54J01io6axVdtOD27ds7duyY90v/unbtmpaW
5vGF4KVM54J0Lkhn66BzwRBrFZ2tg84F6axVdNYqtMuXL48dO7Zy5cq5napp
06arVq26c+dOrB9N+eWlTOeCdC5IZ+ugc8EQaxWdrYPOBemsVXTWKq5Vq1bl
/dK/ChUq+KV/RF7KdC5I54J0tg46FwyxVtHZOuhckM5aRWetItqzZ0/Hjh3L
li2bm6q6det27Ngxry0iL2U6F6RzQTpbB50Lhlir6GwddC5IZ62is1ax/P77
7+PGjcv7pX+vvvrq0qVLb9++HetH01PyUqZzQToXpLN10LlgiLWKztZB54J0
1io6axXI119/Xbt27dxOlZiYOHny5EuXLrkgmpcynQvSuSCdrYPOBUOsVXS2
DjoXpLNW0VmrEHbv3v3WW2+VKVMmN1W9++67J0+ejIZzQTovZToXpHNBOlsH
nQuGWKvobB10LkhnraKzdRRxFy9eHDNmTFJSUm6nSk5O/u6776LVcv4BF6Tz
UqZzQToXpLN10LlgiLWKztZB54J01io6W0eRFf3GuHz58lq1auV2qkqVKk2Z
MuXatWt5/zEXpPNSpnNBOheks3XQuWCItYrO1kHngnTWKjpbR9G0Y8eOdu3a
5f3Svx49eqSnp/95KRek81Kmc0E6F6SzddC5YIi1is7WQeeCdNYqOltHUXPq
1KkPPvigYsWKuZ0qJSVl7dq1uV/69xAXpPNSpnNBOheks3XQuWCItYrO1kHn
gnTWKjpbR9GRmZn5+eefV69ePbdTJSUlTZs27fr164/5t1yQzkuZzgXpXJDO
1kHngiHWKjpbB50L0lmr6GwdRURqamqjRo1KliyZm6r69u175syZv/zt0QXp
vJTpXJDOBelsHXQuGGKtorN10LkgnbWKztYRc/v37+/atWu5cuVyO1WbNm02
b958//79/PzrLkjnpUzngnQuSGfroHPBEGsVna2DzgXprFV0to4Y+u2338aO
HVu5cuXcTlWvXr2FCxdmZGTk/xtxQTovZToXpHNBOlsHnQuGWKvobB10Lkhn
raKzdcREVlbW4sWLa9asmdupypYtO3r06D/++ONJvykXpPNSpnNBOheks3XQ
uWCItYrO1kHngnTWKjpbR+H76aefWrZsGR8fn5uqunfvnpaW9nS3kgvSeSnT
uSCdC9LZOuhcMMRaRWfroHNBOmsVna2jMKWlpfXr169ChQq5napFixapqanR
BE/9bbognZcynQvSuSCdrYPOBUOsVXS2DjoXpLNW0dk6CsfVq1enTZtWpUqV
3E5Vo0aNmTNn3rx58xm/ZRek81Kmc0E6F6SzddC5YIi1is7WQeeCdNYqOltH
IVi9enWdOnVyO1WJEiUGDx58+fLlAvnGXZDOS5nOBelckM7WQeeCIdYqOlsH
nQvSWavobB3P1Y4dO9q1a1emTJncVNWxY8c9e/ZkZ2cX1HfhgnReynQuSOeC
dLYOOhcMsVbR2TroXJDOWkVn63hOjh8/PnDgwMTExNxO1aRJkxUrVty5c6dg
vyMXpPNSpnNBOheks3XQuWCItYrO1kHngnTWKjpbR4G7fPnylClT8r5FVVJS
UvS/XLt27Xl8dy5I56VM54J0Lkhn66BzwRBrFZ2tg84F6axVdLaOApSVlbVk
yZKaNWv+PY/+/fufPXv2+f0u54J0Xsp0LkjngnS2DjoXDLFW0dk66FyQzlpF
Z+soKD/++GNycnKpUqVyO1WHDh1+/vnnrKys5/r9uiCdlzKdC9K5IJ2tg84F
Q6xVdLYOOheks1bR2Tqe3d69e7t06ZKQkJDbqZKTk9esWXP37t1C+N5dkM5L
mc4F6VyQztZB54Ih1io6WwedC9JZq+hsHc/i1KlTw4YNq1SpUm6nql279uzZ
s2/dulVoz+CCdF7KdC5I54J0tg46FwyxVtHZOuhckM5aRWfreDo3btz49NNP
q1atmtupypYtO2rUqD/++KOQn8QF6byU6VyQzgXpbB10LhhiraKzddC5IJ21
is7W8aSiz6lWrlxZp06dvG+l3qtXrxMnTsTk2HFBOi9lOhekc0E6WwedC4ZY
q+hsHXQuSGetorN1PJGffvqpdevWpUuXzu1U7dq127Jly/3792P1SC5I56VM
54J0Lkhn66BzwRBrFZ2tg84F6axVdLaOfPrll1969uxZvnz53E7VuHHjZcuW
ZWZmxvbBXJDOS5nOBelckM7WQeeCIdYqOlsHnQvSWavobB1/6cyZM6NHj05K
SsrtVFWrVp0+ffqNGzdi/Wj/Lxek81Kmc0E6F6SzddC5YIi1is7WQeeCdNYq
OlvHY1y9enXGjBl530o9Li5uyJAhly9fjvWj/f9ckM5Lmc4F6VyQztZB54Ih
1io6WwedC9JZq+hsHY8U/ZwsWLCgRo0aed9KvVu3bocOHYp+zcf66f4PF6Tz
UqZzQToXpLN10LlgiLWKztZB54J01io6W8dDok8J1qxZ07Bhw5IlS+Z2qrZt
227cuPHevXuxfrpHcEE6L2U6F6RzQTpbB50Lhlir6GwddC5IZ62is3XktXHj
xof+yr+UlJRVq1bduXMn1o8W5IJ0Xsp0LkjngnS2DjoXDLFW0dk66FyQzlpF
Z+vIsXv37s6dOyckJOR2qnr16s2bNy8jIyPWj/YXXJDOS5nOBelckM7WQeeC
IdYqOlsHnQvSWavobB1paWnvvfdeYmJi3r/yb+rUqdevX4/1o+WLC9J5KdO5
IJ0L0tk66FwwxFpFZ+ugc0E6axXdi9w6zp49O2bMmMqVK+d2qrJly44YMeLK
lSuxfrQn8CIvWDx4KdO5IJ0L0tk66FwwxFpFZ+ugc0E6axXdi9k6rl69OmPG
jKpVq+b9K//69u2bnp6O+6l4MRcsTryU6VyQzgXpbB10LhhiraKzddC5IJ21
iu5Fax3Rp0OLFy+uWbNm3k7VuXPnvXv3Zmdnx/rpnsaLtmDx46VM54J0Lkhn
66BzwRBrFZ2tg84F6axVdC9O64g+F1qzZs0rr7wSFxeX26natm27cePG6HOk
WD/d03txFiyuvJTpXJDOBelsHXQuGGKtorN10LkgnbWK7gVpHWvXrk1JSYmP
j8/tVM2aNfv666/v3LkT60d7Vi/IgsWYlzKdC9K5IJ2tg84FQ6xVdLYOOhek
s1bRFfvWsX79+latWpUuXTq3U9WtW3fu3Lm3bt2K9aMVjGK/YLHnpUzngnQu
SGfroHPBEGsVna2DzgXprFV0xbh1bN68uV27dmXKlMntVDVr1pw+ffqNGzdi
/WgFqRgv+ILwUqZzQToXpLN10LlgiLWKztZB54J01iq6Ytk6tm/f3qlTp4SE
hNxOVaVKlcmTJ1+7di3Wj1bwiuWCLxQvZToXpHNBOlsHnQuGWKvobB10Lkhn
raIrZq1jz5493bt3L1++fG6nqlSp0rhx465evRrrR3teitmCLyAvZToXpHNB
OlsHnQuGWKvobB10LkhnraIrNq3j4MGDffv2rVChQm6nSkhIGDFixO+//168
/5QvNgu+sLyU6VyQzgXpbB10LhhiraKzddC5IJ21iq4YtI4DBw7069cvMTEx
t1PFx8cPHjz4zJkz6B9XPhWDBV9wXsp0LkjngnS2DjoXDLFW0dk66FyQzlpF
h24d+/fvf+j1VJF+/fodP378xbk70Avqf72U+VyQzgXpbB10LhhiraKzddC5
IJ21ig7aOvbt29e7d++HOlWvXr0OHToU/ZqM9dMVKuiCyuWlTOeCdC5IZ+ug
c8EQaxWdrYPOBemsVXS41rF3795evXo91Kl69+59+PDhF61T5cAtqId4KdO5
IJ0L0tk66FwwxFpFZ+ugc0E6axUdqHXs3bu3Z8+eef++vxIlSvTp0+eF7VQ5
QAvqkbyU6VyQzgXpbB10LhhiraKzddC5IJ21ig7ROvbs2dOjR4+8napkyZJ9
+/Y9cuSIn9sgFtRjeCnTuSCdC9LZOuhcMMRaRWfroHNBOmsVXRFvHTt37uzW
rVu5cuXydqp+/fodPXrUz2pyFPEF9Ze8lOlckM4F6WwddC4YYq2is3XQuSCd
tYquyLaOzZs3d+zYMSEhIbdTxcXF9e/f/9ixY34+k1eRXVD55KVM54J0Lkhn
66BzwRBrFZ2tg84F6axVdEWwdaxfv75NmzZlypTJ7VSlSpUaMGDA8ePH/Uzm
z4rggnoiXsp0LkjngnS2DjoXDLFW0dk66FyQzlpFV3RaR/Qk3377bYsWLeLj
43M7VUJCwpAhQ3799VfviJCis6CejpcynQvSuSCdrYPOBUOsVXS2DjoXpLNW
0RWF1nHv3r0VK1Y0btw4Li4ut1MlJSV9+OGHv/32m78/PF5RWFDPwkuZzgXp
XJDO1kHngiHWKjpbB50L0lmr6GLbOjIyMhYtWlS3bt2SJUvmdqrq1atPmjTp
6tWrMXkkHGsVnZcynQvSuSCdrYPOBUOsVXS2DjoXpLNW0cWqdVy7du3zzz+v
Xr363/N4+eWXp0+ffuPGjUJ+GDRrFZ2XMp0L0rkgna2DzgVDrFV0tg46F6Sz
VtEVfus4f/78tGnTqlatmrdTNWjQ4PPPP79161ahPUaxYa2i81Kmc0E6F6Sz
ddC5YIi1is7WQeeCdNYqusJsHceOHRs1alRSUlLeTvXqq68uWrTo9u3bhfAA
xZK1is5Lmc4F6VyQztZB54Ih1io6WwedC9JZq+gKp3Xs27fvvffeS0xMzNup
WrRosWLFiszMzOf6XRd71io6L2U6F6RzQTpbB50Lhlir6GwddC5IZ62ie96t
Y9u2bV26dClXrlzeTtWuXbu1a9dG3+9z+k5fKNYqOi9lOhekc0E6WwedC4ZY
q+hsHXQuSGetontOrSP6BlNTU994440yZcrk7VRdu3bdvn37/fv3C/a7e5FZ
q+i8lOlckM4F6WwddC4YYq2is3XQuSCdtYquwFtH9K0tW7asSZMmpUqVyo1U
8fHx/fv3P3ToUPQLpqC+I+WwVtF5KdO5IJ0L0tk66FwwxFpFZ+ugc0E6axVd
AbaOa9euzZkzp1atWiVKlMjtVElJSaNGjTp79qy/SJ4TaxWdlzKdC9K5IJ2t
g84FQ6xVdLYOOheks1bRFUjrOH369OTJk1966aW8X/RXu3btqVOnXr9+vaAe
VY9kraLzUqZzQToXpLN10LlgiLWKztZB54J01iq6Z2wdhw4dGjJkSMWKFfN2
qkaNGs2dO/fWrVsF+6h6JGsVnZcynQvSuSCdrYPOBUOsVXS2DjoXpLNW0T11
69i+fXu3bt0e+sv+XnvttRUrVmRmZj6PR9UjWavovJTpXJDOBelsHXQuGGKt
orN10LkgnbWK7klbR/TPf//9961bt37oL/vr0KHD+vXro082nuvT6s+sVXRe
ynQuSOeCdLYOOhcMsVbR2TroXJDOWkWX/9Zx8+bNhQsX1q9fPy4uLjdSlSpV
qnfv3vv27cvOzi6Ep9WfWavovJTpXJDOBelsHXQuGGKtorN10LkgnbWKLj+t
48yZM1OmTHnoTdQrVao0cuTI06dPu35sWavovJTpXJDOBelsHXQuGGKtorN1
0LkgnbWK7vGt4+DBg4MHD37oTdTr1q07Y8aMGzduFPKj6pGsVXReynQuSOeC
dLYOOhcMsVbR2TroXJDOWkUXah2bN2/u3LnzQ2+i3rx58yVLlty+fTsmj6pH
slbReSnTuSCdC9LZOuhcMMRaRWfroHNBOmsV3UOt4+7duytWrEhJSYmPj3/o
TdR//PFH30S9CLJW0Xkp07kgnQvS2TroXDDEWkVn66BzQTprFV1u67hw4cKM
GTOqVauWN1LFx8f37dt3//79vol6kWWtovNSpnNBOheks3XQuWCItYrO1kHn
gnTWKrroc4Ndu3YNGTKkUqVKeTtVtWrVxo4de+7cOcct4qxVdF7KdC5I54J0
tg46FwyxVtHZOuhckM5ahfbTTz916tTpoTenatKkydy5czMyMmL9dMoXaxWd
lzKdC9K5IJ2tg84FQ6xVdLYOOheks1YR3bhxY/HixU2aNClVqlTeTtWuXbvv
vvvu7t27sX5APQFrFZ2XMp0L0rkgna2DzgVDrFV0tg46F6SzVrGcPHlywoQJ
lStXzhupSpUq1bt37z179mRlZcX6AfXErFV0Xsp0LkjngnS2DjoXDLFW0dk6
6FyQzlpFsW3btp49e5YvXz5vp6pZs+bYsWOPHz8e7RjrB9RTslbReSnTuSCd
C9LZOuhcMMRaRWfroHNBOmtVEXfjxo0lS5Y0a9YsPj4+b6dq0aLF4sWLb9++
beugc0E6L2U6F6RzQTpbB50Lhlir6GwddC5IZ60qstLS0saOHfvQF/1FunTp
smnTpnv37uX8Y7YOOhek81Kmc0E6F6SzddC5YIi1is7WQeeCdNaqoiY7O/uH
H37o2LFjQkJC3khVvXr10aNHp6enP/QJua2DzgXpvJTpXJDOBelsHXQuGGKt
orN10LkgnbWq6Dh9+vT06dNr1apVsmTJR37R3yP/LVsHnQvSeSnTuSCdC9LZ
OuhcMMRaRWfroHNBOmtVzGVlZa1bt65z587lypXLG6lKly7du3fv7du3379/
/zH/uq2DzgXpvJTpXJDOBelsHXQuGGKtorN10LkgnbUqhtLS0iZOnFi9evUS
JUrk7VQNGzacPn365cuX8/ORZeugc0E6L2U6F6RzQTpbB50Lhlir6GwddC5I
Z60qfBcuXFiwYEHLli3LlCmTN1KVLFmyc+fOP/zwQ7RI/r81WwedC9J5KdO5
IJ0L0tk66FwwxFpFZ+ugc0E6a1WhOXfu3IIFC958882H3j4958VUH3/88W+/
/fYUQ9g66FyQzkuZzgXpXJDO1kHngiHWKjpbB50L0lmrnrf09PS5c+e2adOm
bNmyD0WqihUr9u/ff8uWLffu3Xvqb9/WQeeCdF7KdC5I54J0tg46FwyxVtHZ
OuhckM5a9Tzcv39/x44dY8aMadiwYXx8/EORKvpfOnbsuHz58tBf8/dEbB10
LkjnpUzngnQuSGfroHPBEGsVna2DzgXprFUF6MKFCytXruzZs2eFChX+/iel
S5d+++23ly1bdvPmzQL8Y8vWQeeCdF7KdC5I54J0tg46FwyxVtHZOugKasFt
27aNGzdu8uTJS5YsOXjwYHZ2doE8nv6SteoZZWRkbNq0afTo0Y0bN/7zy6gi
L730Uq9evVauXBn9k8/jAWwddC5I56VM54J0Lkhn66BzwRBrFZ21iq5AFty/
f3/t2rXzHvjly5dv3779nDlz0tPT/a3vubJWPYXop+vw4cOzZs1q167dn98y
PUejRo3Gjh27Y8eOZ3lPqvywddC5IJ2XMp0L0rkgna2DzgVDrFV01iq6Alnw
yJEjderUeeTJH6lfv/7o0aN3796dlZVVUI+tXNaq/Dtx4sTChQu7d+9eqVKl
EiVK/PnXamJiYqdOnebNm3fq1KlC+yPb1kHngnReynQuSOeCdLYOOhcMsVbR
WavoCmTB6Pe3nj17lilTJhSscrz88sujRo3avXu3XydYgKxVj3f69OmlS5f2
7t27SpUqJUuWfOSvzJSUlEmTJu3cufN5v4zqkWwddC5I56VM54J0Lkhn66Bz
wRBrFZ21iq4AF5w1a1aNGjUe+ZKVhyQnJ3/xxRcF+1bVLyxr1Z+dOXNm5cqV
7733Xq1ateLi4h75i7Bu3bqDBg369ttvr1+/HtvfwWwddC5I56VM54J0Lkhn
66BzwRBrFZ21iq5gF4y+tbVr13bo0KFs2bI5TeBvf/tbqFmVKVOmX79+v/76
q1fes7BW5Th9+vSyZcv69+//mEJVs2bNPn36LF269MyZM0XnT2RbB50L0nkp
07kgnQvS2TroXDDEWkVnraJ7TgumpaV9/PHHHTp0CL1BUF61a9ceP378/v37
/QrBp/Ai16r09PQvv/yyT58+1atXD32VX9WqVbt3775w4cITJ05EP1exfuRH
sHXQuSCdlzKdC9K5IJ2tg84FQ6xVdNYqukJY8Pz586mpqRMmTOjQoUPVqlVD
VSFSqVKlnj17rl69+vbt2/62kE8vVK2KfphHjx5dsGBB9OvkMe9DFf0y69q1
6xdffHHkyJGin0BtHXQuSOelTOeCdC5IZ+ugc8EQaxWdtYqu8Be8evXq9u3b
Z86c2aZNm3Llyj3ylVdxcXHt27dfvHhxRkaGvz88XrGvVffu3du/f//s2bM7
d+6cmJgYeqletWrVunfvPn/+/KNHjxb9QpWXrYPOBem8lOlckM4F6WwddC4Y
Yq2is1bRxXzBNWvWpKSkxMfHPzJBlClTplevXlu3br1//36snrCIK5a16vbt
2zt27Jg2bVq7du0SEhJCL8arUaNGz549Fy1aVGS/yi8/bB10LkjnpUzngnQu
SGfroHPBEGsVXcxbh55REVlw27ZtHTp0KFOmTKhLtGzZcuXKldGjxvY5i6Bi
U6suX768bt26sWPHRls/5lfCP/7xj379+n311Vfp6encQpWXrYPOBem8lOlc
kM4F6WwddC4YYq2iKyKtQ0+tSC24bdu2bt26Pea1NM2bN//+++/v3bsX6yct
QtC16tdff12+fPmgQYPq1atXqlSp0O6vvPLKkCFDVq9efeHCheL32aytg84F
6byU6VyQzgXpbB10LhhiraIrUq1DT6EILnj48OEPP/wwKSkp1C4aNWo0bdq0
jIyMWD9pkcCqVZmZmbt37549e3aXLl2iiUNvQlWyZMnk5OTRo0f/8MMPV69e
pfzono6tg84F6byU6VyQzgXpbB10LhhiraIrgq1DT6TILnj//v21a9d27949
9FKr+Pj4pk2bTpw4ccOGDZcuXXphP8kp+rXq7Nmz33zzzciRI1NSUh7zJX4V
K1Zs167d1KlTt2zZkpmZ+eL8uWDroHNBOi9lOhekc0E6WwedC4ZYq+iKbOtQ
PhX9BTMzMzds2PD+++9XqVIl9FKcSPXq1Tt16jR16tQff/yxWH69WEgRrFW3
bt3atWvX7Nmzu3fvXq1atZIlS4ZWq1WrVo8ePebOnXvo0KGsrKxYP3hs2Dro
XJDOS5nOBelckM7WQeeCIdYquqLfOvR4rAXT0tImTZpUv379x7zHUY7KlSu/
+eabY8aM+frrr48ePZqdnR3rZ39eikKtysrKOnLkyJIlSwYNGtSoUaPQ3/AY
iYuLa9as2bBhw1atWnX27Fn/WPxfWwefC9J5KdO5IJ0L0tk66FwwxFpFx2od
+jPogufOnRs/fnz16tUf87qdvEqXLt2kSZMBAwbMmTNn+/btxemtkGJSq+7f
v5+WlrZ8+fLhw4e/9tprZcuWfcxPfrVq1d55553PPvts165d/ob/Z7YOOhek
81Kmc0E6F6SzddC5YIi1ig7aOpSLvuDOnTtHjhz5+C83CyWUf/7zn2PHjv36
66/T0tK4X4ZWOLXq1q1bBw4c+PLLL4cMGfL4t5/KaYPNmzcfPnz4qlWrTp8+
7Z99j2froHNBOi9lOhekc0E6WwedC4ZYq+jorUPFZsG0tLQ5c+Z07Ngx9K7s
j1eyZMmXX365W7duM2bMWL9+/blz5yi/Yz+PWhV9gydPnvz+++8/+uijLl26
RD8zf/mllw0bNuzfv/+CBQsOHDhw//79AnyYYs/WQeeCdF7KdC5I54J0tg46
FwyxVtEVm9bxwip+C2ZnZx87dmzZsmUffPBBcnJy6dKlnyJe/f3BOyy99NJL
TZo06dat25QpU3744YdTp05lZmYWtZ+rZ6lV0b97+fLlX375Zd26dfPnzx85
cmT79u1r1679l20qUr9+/d69e3/++ec7duzIyMgoaj8tILYOOhek81Kmc0E6
F6SzddC5YIi1iq74tY4XTbFfMPrt98yZM+vXr//ss8/69evXokWLpKSkJ/2y
wYcqVqVKlRo2bNixY8chQ4ZMnTp18eLFqampmzdv3rVr14EDB44dO3b69OmL
Fy9eu3YtMzMz+hl+rr/FhWpVVlZW9ADRk0SPFD3bt99+u2jRok8++WTUqFHd
unVr3rx5tWrVoh9LPn/UCQkJzZo1GzBgwLx58/bs2XPnzh1/3y4otg46F6Tz
UqZzQToXpLN10LlgiLWKrti3jmLvxVwwIyPj6NGjqamps2fPHj16dJ8+fd54
4406deokJCSUKFHiieLV3/72t4f+y5+VLFmybNmylSpVqlGjRt26dZs0adK8
efM2bdp06NCha9eu0fc+aNCg4cOHjx07dsqUKdMfmDZt2tQHov9l8uTJkyZN
mjhx4vjx48eNGxf9Y6NGjRoyZEi/fv169OjRqVOn6Jtq1apVcnLyK6+8Ev0o
qlatWqZMmSf9geRVunTphg0bduvWLXqAtWvXnjp1Kvp1EuvRii1bB50L0nkp
07kgnQvS2TroXDDEWkX3YraO4sQFH5KVlXX58uW0tLRvvvlmwoQJXbt2bdKk
yUsvvZSfL47DiYuLq169evPmzbt37z5q1Kh58+Zt2bLl/Pnz/mlVmGwddC5I
56VM54J0Lkhn66B7lgX/U6xFh+Hdu3ejn5lYP4iekgvSRQtGd5YL5sfFixe3
bt06c+bMnj17NmrU6PF/L17MRY9XtWrVBg0atGrVqlOnTv369Rs5cuRHH300
f/781NTUAwcORD+caP1Y/6Tq//sY/Pe//x3rB9FTckG6nAWzs7Nj/SB6StF2
LojmgnQuSBdt969//evp7oK7kqQi6eTJkz/88MOMGTP69OnTrFmzfL6j+0sv
vZSSktKtW7dhw4Z9/PHHCxcuXLJkyfz582fNmjV9+vSPHpg2bVr0f4r+M/pf
om//k08++fTTT2fOnDnrgblz5y5evHjFihXffPNN9ACbNm3atWvX/v37jxw5
kp6efu7cuRs3bty5cyfWPz2SJEmSiq0CT2dFiq/MoXNBOl9bVYCys7NPnz79
448/fvrpp3379m3atGk++1X16tXffPPN4cOHL1y4cOfOnZcvX87//3/K13XQ
uSCdC9L52io6X9dB54J0Lkj3LK+tKvAvSyxSfN8qOt/1iM4Fn6v/+Z//OXfu
3MaNG2fNmjVgwICUlJR8fv1glSpV3njjjaFDh86fP3/btm2XLl0K/XEQ+jsB
ReG7HtG5IJ3vmUPngnQuSPcf37cKzgVDrFV0tg46Fyxk0Ul7/vz5n376afbs
2e+9917z5s3LlSuXn7+/r1KlSi1bthw4cGD0L27cuPHs2bM5f6ZYq+hsHXQu
SOelTOeCdC5IZ+ugc8EQaxWdrYPOBWMu+g3w4sWLW7Zs+eKLL95///1WrVpV
rFgxP/2qbNmyTZo06dGjx8SJE7/77rvjx49nZWXF+kejJ2broHNBOi9lOhek
c0E6WwedC4ZYq+hsHXQuWDRduXJl586dCxcuHDZsWJs2bSpXrlyyZMm/7FfR
P1O3bt3OnTtPmDBh5cqVBw4cyMjIcNwiztZB54J0Xsp0LkjngnS2DjoXDLFW
0dk66FyQ4vr163v37l26dOmYMWM6duxYq1atUqVK5ectsKpVq9a2bdvct8D6
/fff/YSwSLF10LkgnZcynQvSuSCdrYPOBUOsVXS2DjoX5MrMzDx8+PDKlSvH
jx/frVu3Bg0axMfH56dflS9fvlmzZn379v3kk09SU1NPnjwZ/TKI9Y/mxWXr
oHNBOi9lOhekc0E6WwedC4ZYq+hsHXQuSJf3XdazsrJ+/fXXdevWffrpp/36
9UtJSUlISMhPv8r5EsJ33nln3LhxS5cu3bNnz7Vr17y+C4etg84F6byU6VyQ
zgXpbB10LhhiraKzddC5IN3j/07A6HfX33//ffv27QsWLBg2bFjbtm2rVq0a
FxeXn4RVuXLl1157beDAgbNmzVq/fv2pU6d8CdbzYOugc0E6L2U6F6RzQTpb
B50Lhlir6GwddC5I9/ha9Ug3b948ePDgypUrJ06c2KVLl3r16uXzSwhLlSoV
/cOdO3ceP3788uXL9+7d60uwnp2tg84F6byU6VyQzgXpbB10LhhiraKzddC5
IN1T1Ko/y8rKOnXq1Pr162fNmjVo0KBWrVpVqlQpP38LYSQpKally5YDBgz4
9NNPU1NTjx8/fu/ePX9Xzz9bB50L0nkp07kgnQvS2TroXDDEWkVn66BzQboC
qVWPdO3atb179y5btmzcuHHvvPNO3bp18/kSrEitWrXeeuutESNGLFiwYOvW
rRcuXPBPwBBbB50L0nkp07kgnQvS2TroXDDEWkVn66BzQbrnV6v+7N69e+np
6evWrZs5c+bAgQNfe+21/L8Eq2zZsq+88kq3bt0mTJjgVxHmZeugc0E6L2U6
F6RzQTpbB50Lhlir6GwddC5IV5i16pGuX7++f//+FStWTJw4sWvXrg0bNsz/
S7AqVqyYkpLSp0+fjz/++Jtvvjl06FBGRsaL9qvR1kHngnReynQuSOeCdLYO
OhcMsVbR2TroXJAu5rXqz6JHOnv27KZNm+bOnTt06NA333yzRo0a+fyLCP/+
37+LcMCAATNmzPjuu+8OHz58+/btYvxL1NZB54J0Xsp0LkjngnS2DjoXDLFW
0dk66FyQrgjWqke6c+fOsWPHUlNTP/300wEDBjzRVxFGqlSp0qpVq/feey8n
YR06dOjWrVtF/0edH7YOOhek81Kmc0E6F6SzddC5YIi1is7WQeeCdJRa9Ug3
btw4ePDgqlWrpkyZ0qtXr2bNmpUrV65EiRL5fxVW8+bNe/fuHf3rK1eu3LNn
z+XLl3Gf7to66FyQzkuZzgXpXJDO1kHngiHWKjpbB50L0qFr1SNdu3Zt3759
K1eunDx5co8ePZo2bZqQkJD/hBX9ww0bNuzUqdPIkSPnzZu3YcOG48eP37lz
p8j+Ird10LkgnZcynQvSuSCdrYPOBUOsVXS2DjoXpCt+teqRrl69unfv3hUr
VkyePLlnz57Jycnly5fPf8KKJCUlRf/Wu+++O3bs2AULFmzYsOHo0aM3b96M
+U+drYPOBem8lOlckM4F6WwddC4YYq2is3XQuSDdC1KrHun69esHDx5cs2bN
jBkzBgwY0Lp16ypVquT/7dxzlCtXrkGDBh06dHj//fc//vjjZcuWbd269cSJ
ExkZGYXzs2rroHNBOi9lOhekc0E6WwedC4ZYq+hsHXQuSPci16pHunv3bnp6
+saNG+fPn//hhx927ty5UaNGT/S1hLmif6tevXpt27bt27fv+PHj586d+913
3+3evfvs2bPR91JQHzW2DjoXpPNSpnNBOheks3XQuWCItYrO1kHngnTWqny6
fv36oUOHUlNT58yZM2rUqC5dujRt2rRixYr5/3sJH1K+fPn69eu3bdu2V69e
0Tf42WefrVixYvPmzUeOHLl8+XK0Sz4fzNZB54J0Xsp0LkjngnS2DjoXDLFW
0dk66FyQzlr1jO7cufPrr79u2bJl+fLlH3/88fvvv9+hQ4dGjRolJiY+dcjK
UbFixQYNGrzxxhs9evQYPnx49I0vWbIkNTV1z549p06dunXrVs5qtg46F6Tz
UqZzQToXpLN10LlgiLWKztZB54J01qrn5+7du2fOnPn555+/+eabL774YuzY
sX369GnTpk3dunWf7ksLHxIXF1elSpVXXnnl9ddff/fdd4cNGzZ16tQFCxZE
3922bdvS0tIuXbp07949/4gs4qxVdF7KdC5I54J0tg46FwyxVtHZOuhckM5a
FSt37tw5e/bs3r17U1NTFy5cOGXKlMGDB3fq1CklJaVmzZqlSpV6xpaVKyEh
oUaNGk2aNHnzzTd79uw5bNiwjz76aO7cuatWrdq0adMvv/xy7ty53FdqqfBZ
q+i8lOlckM4F6WwddC4YYq2is3XQuSCdtapoiv5cy8jIOH369N69e9etW7dk
yZLp06ePGDGiR48ebdq0adCgQVJS0pP+9YWPV6JEicTExDp16iQnJ7/11lu9
evUaNmzYlClTvvjii5UrV27YsGHPnj0nT568dOlSAb5FvP7XWsXnpUzngnQu
SGfroHPBEGsVna2DzgXprFVc0XbXr18/fvz41q1bU1NTv/rqq08//XT06NH9
+vXr0KFDcnJyrVq1ypYt++xfcvhncXFxFStWrFOnTtOmTd98883u3bsPHDgw
+q6nT58+f/78VatWbdiwYffu3ceOHfvtt99u3ryZlZXln9Qh1io6L2U6F6Rz
QTpbB50Lhlir6GwddC5IZ62i+8vWce/evStXrpw8eXL37t3r1q1bunTpzJkz
x40bN3DgwM6dO7dq1ap+/foF/kqtP4uPj69YsWKtWrUaNWr02muvtW/f/t13
342eYdSoUVOmTJk1a9bixYtXr169fv36nTt3Hjp0KHrgCxcuXL169e7du9GP
sRj/QW+tovNSpnNBOheks3XQuWCItYrO1kHngnTWKrqCah3RR/GdO3cuXrx4
7NixXbt2paamLl26dNasWRMmTHj//fe7devWtm3bJk2a1KpVq3z58s/41x0+
deyqUaNG/fr1mzZt+vrrr7dv37579+79+vUbOnTo6NGjp0yZ8sknn8yZM2fR
okXLly9fs2bNDz/8sGnTpp07d+7bt+/IkSPp6ennz5+/cuXKrVu3cu6aIvLJ
g7WKzkuZzgXpXJDO1kHngiHWKjpbB50L0lmr6GLSOqJPSzIzM3///ffjx4/v
2bNn48aNq1atWrBgwYwZM8aMGTN48ODu3bu3a9cuOTn5H//4x0svvVS6dOnn
8QWJzyguLi4hIaFSpUrVqlWrXbt2/fr1GzduHD1zq1at2rZt26FDh86dO/fo
0aNv374DBw784IMPRo4cGf3oJk6cOHXq1OhHOmvWrLlz5y5atOirr776+uuv
v/3229TU1PXr12/evHn79u0///zz3r17f/nll7S0tBMnTpw6der8+fPRz9iV
K1euX79++/btu3fv3r9/P/oAzM7O9mMQzUuZzgXpXJDO1kHngiHWKjpbB50L
0lmr6CivzImeMzMz8/Lly6dOnTp06NDOnTvXr1+/evXqxYsXz5o1a8qUKaNG
jRo4cOC7777bvn37Vq1avfrqq/Xq1atevXpiYmIB/g2JRVPJkiXj4+MTEhIq
VKiQlJRUpUqVmjVr1qlTp27dug0bNmzcuHGzZs1SUlJatmz5+uuvt23b9p//
/GeHDh06derUpUuX6GesV69effr06d+//6BBg4YMGTJs2LCRI0d++OGHY8aM
GT9+/KRJk6ZOnfrxxx/PmDHjs88+i36258yZM2/evIULF0Y/+V999dWyZctW
rFixatWqNWvWfPvtt99///0PP/zw448/btiwYdOmTVu2bNm2bVu0188//7xn
z559+/YdOHAgWvDIkSNpaWnHjh07ceJEenp6NOuZM2fOnTt34cKFixcvXrp0
6cqVK1evXr1+/fqNGzcyMjKi9e/evRv9Wr13715WVlZ2dnb0m0/0+W30S5f+
WZyXMp0L0rkgna2DzgVDrFV0tg46F6SzVtFRatUzin6Yd+7cuXr16vnz50+e
PHnw4MFdu3Zt3Ljx+++/X758+aJFi2bPnj19+vRJkyaNHj166NChAwcO7N27
d9euXTt06NCmTZsWLVo0adKkXr16NWvWfOmll8qXL1+qVKki+HKvF1a0RVxc
XDRKfHx8mTJlEhISypUrV6FChcTExIoVKyYlJUWrValSpWrVqtWqVatRo0a0
Y+3atevUqfPyyy//4x//qFu3bv369Rs0aPDKK680atSocePG0dxNmzZt1qxZ
cnJySkpK8+bNo18DLVu2fO2111q1atW6devXX389+oXRtm3bNx9o167dW2+9
1f6B6NfM22+/3emBd955p3Pnzl26dIl+LXV7oHv37u+++26PB3r27NmrV6/o
P3OaYd8H+vXr179//wH/9d577w18YNADgwcPfv+BIUOGfPDA0AeGDRs2fPjw
nP8c8cDIB0b9Xx/+1+j/GvNfY/9r3Lhxuf8lx/hHmRAwMSD64Ar9n0LfVOSR
33X0r8ycOXPp0qXr1q3bs2dPenr6tWvXoj+MYvjbi60DzQXpbB10LhhiraKz
ddC5IJ21iu4FqVXPQ/STdv/+/du3b1+/fv3SpUvnz58/derUsWPHDh06tHfv
3p07d27ZsmX9+vVr165ds2bNihUrvvzyywULFnzxxRfRoT19+vSPPvoourtH
jx49YsSI999//7333uvbt2/Pnj27du3aqVOn9u3bv/nmm61bt27RokWzZs0a
N25cv379l19+uVatWtWqVUtKSkpMTExISIiPjy/8NwGTiqby5cvXqVMnJSWl
Y8eOAwYMmDBhQvThFn30bd++/fjx49euXXtOp5Ctg84F6WwddC4YYq2is3XQ
uSCdtYrOWkWX87Kx+w9EU96+ffvGjRt//PHHpUuXfvvtt7Nnz546derEiRNH
jx49fPjwwYMH9+7d+/PPP+/cuXPbtm2bN2/esGHDunXr1q5d++23365evXrF
ihVLly798ssvFy1atGDBgnnz5s2ZM2fmzJmffPLJ9OnTp02bNmXKlEmTJo0b
N2706NGjRo0aMWLE0KFDP/jgg8GDB7/33nv9+/fv27dv7969c14v1LVr186d
O7/99tsdOnR466232rVr17Zt2zfeeKNVq1YtWrRo3rx5cnJy06ZNmzRp0rhx
41deeaVBgwb16tV7+eWXa9euXatWrRo1alSrVq1q1aqVK1euVKlShQoVypcv
n5CQULZs2TJlypQuXbpUqVJxcXG+yE35FP1qeemllxo1avTPf/4z+uU6efLk
6Nd59CEQfWhcuXLlqQ8lWwedC9LZOuhcMMRaRWfroHNBOmsVnbWKzgX/98Ff
SRn9DESf7ua87fz9+/fv3bsX/bTcvXs3MzMzIyPj1q1bN2/evH79+rVr165e
vfrHH39cuXLl8uXLv//++8WLF3/77bfz58+fPXv2zJkzp0+f/vXXX9PT00+e
PHnixInjx48fO3bs6NGjaWlpR44cOXz48KFDh3755ZcDBw7s379/3759ex/Y
s2fPzz//vOuBnTt37tixY9sDW7du3bJly+bNmzc98NNPP23cuHHDhg3r16//
8YGcVLhmzZrvv/9+7QPRf/nuu+++/fbbb/5rzQOrH1i1atXXD6x8YMWKFcsf
WLZs2dKlS3P+86sHvnxgyf+1+L8W/dfC/1rwX/Pnz8/9LznmBcwN+OIJhb6d
0Pc7fvz4MWPGDB069N13323btm3jxo2rVasWHx//jC2rVKlS1atXb968effu
3UePHh19R9FA0e7RL57Hf3zZOuhckM7WQeeCIdYqOlsHnQvSWavobB10Lkjn
pVwgok/m7969+9tvvx05cmTbtm2rV6+eM2fO+PHjBwwY0KFDh1dffbVKlSpP
/RcuVKhQoVGjRp06dRo+fPgXX3yxcePGU6dOZWVl5XzXLkjngnS2DjoXDLFW
0dk66FyQzlpFZ+ugc0E6L+VCE/1U37hxIz09fceOHatWrZo5c+aIESO6du3a
vHnzatWqPWnLiouLq1279ltvvfXBBx9E39SGDRvOnTuXnZ0d6x+lnpgfg3S2
DjoXDLFW0dk66FyQzlpFZ+ugc0E6L+UiIvrj7MqVK4cPH/7xxx/nzp07evTo
rl27vvrqq4mJifn/uwwqVKiQkpIyYMCA2bNn//TTT+fPn7dfFX1+DNLZOuhc
MMRaRWfroHNBOmsVna2DzgXpvJSLvtu3b584ceKnn35asGDBqFGj3n777Xr1
6pUuXTo//apixYqtW7eO/q2VK1ceP378/v37sf7R6GF+DNLZOuhcMMRaRWfr
oHNBOmsVna2DzgXpvJShsrKyzp07t3Xr1nnz5g0bNuyf//xnjRo1/vLLCcuX
L9+8efPon//666/PnDkT/Rka6x+H/BjEs3XQuWCItYrO1kHngnTWKjpbB50L
0nkp0+Vd8NatWwcOHFi+fPmYMWPat2//l/0q+ge6dev2+eef79u3L/pAjvUP
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
     "], {{0, 589.530295306842}, {797.0409590492844, 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{143.9926, 143.9926},
     SmoothingQuality->"High"],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{797.0409590492844, 589.530295306842},
   PlotRange->{{0, 797.0409590492844}, {0, 589.530295306842}}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877875426792283*^9, 3.8778754683219285`*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"fb1a0b49-a98d-4d34-b9f5-6779655374b2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expression", "[", 
  RowBox[{
   RowBox[{"questions", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.877875539827721*^9, 3.877875561659845*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"4250b12e-c05c-4d36-9a0b-d4f5acca6675"],

Cell[BoxData[
 RowBox[{"Expression", 
  "[", "\<\"Suppose -1382*k + 1464*k = 11972. Solve -32*w + 78 = -k for \
w.\"\>", "]"}]], "Output",
 CellChangeTimes->{3.8778755620613613`*^9},
 CellLabel->
  "Out[138]=",ExpressionUUID->"a56ea2bb-094c-47fd-9970-a7c8b0ef8626"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"TextRecognize", "[", "]"}], "//", "AbsoluteTiming"}]], "Input",
 CellChangeTimes->{{3.877875640387062*^9, 3.8778756486859636`*^9}, {
  3.8778756800761633`*^9, 
  3.8778757426652427`*^9}},ExpressionUUID->"de62ee23-4bf0-4541-ad5d-\
8782419857e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.0004229`", 
   ",", "\<\"Suppose -1382\[LeftGuillemet]k + 1464\[LeftGuillemet]k = 11972. \
Solve -32\[LeftGuillemet]w + 78 = -k for w.\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.877875649183498*^9, {3.8778756853938236`*^9, 3.8778757172904725`*^9}},
 CellLabel->
  "Out[142]=",ExpressionUUID->"160c8190-08d1-4081-a3ad-dcac2f0db2a7"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.877875010873147*^9, 
  3.8778750131081805`*^9}},ExpressionUUID->"08677157-a0d2-443e-b039-\
b83a0a834109"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToString", "[", 
  RowBox[{"ToExpression", "[", "\"\<n ^ 5\>\"", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.877875753987109*^9, 3.8778757638031645`*^9}, {
  3.8778780578835115`*^9, 3.8778780611835365`*^9}, {3.877878286307022*^9, 
  3.8778783818473997`*^9}},
 CellLabel->
  "In[183]:=",ExpressionUUID->"f13a1eeb-720a-446d-97b1-2c22fdbb2302"],

Cell[BoxData["\<\" 5\\nn\"\>"], "Output",
 CellChangeTimes->{{3.877875744194728*^9, 3.8778757642390604`*^9}, 
   3.877878185063648*^9, {3.877878309192008*^9, 3.877878382194456*^9}},
 CellLabel->
  "Out[183]=",ExpressionUUID->"03a7492d-ef67-4974-a307-4954b9c9eb35"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToString", "[", 
  RowBox[{"\"\<4n ^ 5\>\"", ",", " ", "StandardForm", ",", " ", 
   RowBox[{"CharacterEncoding", "->", "\"\<ASCII\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8778758505590906`*^9, 3.877875944923729*^9}, {
  3.8778784172945986`*^9, 3.8778784921193457`*^9}, {3.8778785507945614`*^9, 
  3.877878573096098*^9}},
 CellLabel->
  "In[189]:=",ExpressionUUID->"04bcf019-b83c-4ca1-a0b8-da7a033eff7d"],

Cell[BoxData["\<\"\\\\!\\\\(\\\\*RowBox[{\\\"\\\\\\\"4n ^ \
5\\\\\\\"\\\"}]\\\\)\"\>"], "Output",
 CellChangeTimes->{{3.877875856933762*^9, 3.877875879768348*^9}, 
   3.877875945454575*^9, {3.877878460532434*^9, 3.877878492839267*^9}, {
   3.877878553709402*^9, 3.877878573603177*^9}},
 CellLabel->
  "Out[189]=",ExpressionUUID->"cfe1bd64-bc4b-4e98-8729-42ec06847a22"]
}, Open  ]]
},
WindowSize->{1269, 721},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c19432a0-41f0-40d0-bfbe-004a0779d4b7"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 1679, 36, 105, "Input",ExpressionUUID->"471d7cd1-6d71-4f5e-8826-34cf5f21b09d"],
Cell[2262, 60, 401, 6, 32, "Output",ExpressionUUID->"e0782424-f996-477b-a7d5-8b4ccc573bde"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2700, 71, 283, 6, 28, "Input",ExpressionUUID->"9597b77d-1996-42c1-bc5a-354003f55ac8"],
Cell[2986, 79, 1209, 20, 351, "Output",ExpressionUUID->"0670287e-5c21-41b1-9661-6c7e2dfb3956"]
}, Open  ]],
Cell[4210, 102, 888, 19, 28, "Input",ExpressionUUID->"03aff200-9994-46bc-a879-99c07f969c2d"],
Cell[CellGroupData[{
Cell[5123, 125, 331, 5, 28, "Input",ExpressionUUID->"5eea092a-d7d8-4819-9455-4290999c4249"],
Cell[5457, 132, 1547, 27, 144, "Output",ExpressionUUID->"2a1f8d78-d6a4-4b6c-b497-5ade158fa98e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7041, 164, 589, 15, 28, "Input",ExpressionUUID->"cace77be-6530-4cd7-98b7-4f450b7d0339"],
Cell[7633, 181, 1616, 30, 163, "Output",ExpressionUUID->"b35c618b-4525-4357-ac40-fc1ddc3647ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9286, 216, 400, 9, 28, "Input",ExpressionUUID->"33f330fe-adce-4e6c-ab9c-1f10a70c8c9f"],
Cell[9689, 227, 1638, 30, 184, "Output",ExpressionUUID->"9ccb5113-0448-4943-b1a9-a4aac170b252"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11364, 262, 1434, 27, 86, "Input",ExpressionUUID->"56f71839-db6a-4dab-ba8c-36be508ffc37"],
Cell[12801, 291, 1762, 32, 146, "Output",ExpressionUUID->"6ab45575-707d-445d-abe3-05e7b58263c7"]
}, Open  ]],
Cell[14578, 326, 497, 12, 28, "Input",ExpressionUUID->"c66fe4c7-e040-4a49-85ab-8a653c6ca362"],
Cell[CellGroupData[{
Cell[15100, 342, 803, 15, 28, "Input",ExpressionUUID->"261e89e9-bd9a-4027-8280-d8c38bdd0e2f"],
Cell[15906, 359, 1435, 25, 142, "Output",ExpressionUUID->"db01e79d-4645-464c-804b-38e575dbb4b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17378, 389, 374, 8, 28, "Input",ExpressionUUID->"ebf28abf-d7ca-412c-aa3b-a1980815223e"],
Cell[17755, 399, 177979, 2932, 52, "Output",ExpressionUUID->"29d96446-0f91-4c8c-b639-d84d5951fc35"]
}, Open  ]],
Cell[195749, 3334, 755, 18, 28, "Input",ExpressionUUID->"e63e2566-a2b4-4a27-a622-1406c6a2809c"],
Cell[CellGroupData[{
Cell[196529, 3356, 502, 12, 48, "Input",ExpressionUUID->"f56ccbb8-d6c0-4107-8439-99e9252c2473"],
Cell[197034, 3370, 157, 3, 32, "Output",ExpressionUUID->"6dd6995b-c202-4d08-8eee-82a758cf23fd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197228, 3378, 306, 7, 28, "Input",ExpressionUUID->"171590db-393b-4491-835c-2fa13a7fa4f5"],
Cell[197537, 3387, 142316, 2344, 97, "Output",ExpressionUUID->"9546a430-fc9a-440d-9756-46aecfa3f5a8"]
}, Open  ]],
Cell[339868, 5734, 491, 12, 28, "Input",ExpressionUUID->"942b293e-fe48-49a0-980f-838500c3d9b0"],
Cell[340362, 5748, 455, 11, 28, "Input",ExpressionUUID->"502d9ca2-67ee-485d-b875-42b07e10fc3a"],
Cell[CellGroupData[{
Cell[340842, 5763, 215, 4, 28, "Input",ExpressionUUID->"61e91e64-1b7b-4ed0-ad3f-185401845aa2"],
Cell[341060, 5769, 158, 3, 32, "Output",ExpressionUUID->"195c16f0-e858-45f0-a6f7-c9c85b60c2f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[341255, 5777, 1616, 35, 67, "Input",ExpressionUUID->"794910ec-5433-4c00-b4a3-be6fa2fd3f76"],
Cell[342874, 5814, 39757, 760, 134, "Output",ExpressionUUID->"abe98d01-c96e-4f63-b79c-408d6c9d08b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[382668, 6579, 473, 9, 28, "Input",ExpressionUUID->"6d6f095f-ccc4-4031-8254-5d13df943736"],
Cell[383144, 6590, 38009, 725, 52, "Output",ExpressionUUID->"a86ab734-e1c9-4677-b381-1a92f0a7c469"]
}, Open  ]],
Cell[CellGroupData[{
Cell[421190, 7320, 348, 7, 28, "Input",ExpressionUUID->"cf14139e-f989-406d-b0dc-2bc1a9eef062"],
Cell[421541, 7329, 160, 3, 32, "Output",ExpressionUUID->"f39cc089-ab34-49bc-aa15-3cabcba8f997"]
}, Open  ]],
Cell[CellGroupData[{
Cell[421738, 7337, 295, 6, 28, "Input",ExpressionUUID->"d4ed508c-b6ae-4480-b9c2-ff5c5e2f2bb6"],
Cell[422036, 7345, 2647, 53, 204, "Output",ExpressionUUID->"ab9ac16e-a878-4e3c-9952-cba7f14be81f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[424720, 7403, 831, 16, 86, "Input",ExpressionUUID->"df83bdce-7ed8-4b47-92b9-74afce65e808"],
Cell[425554, 7421, 486, 7, 32, "Output",ExpressionUUID->"e7bdf41f-6998-4306-a6c9-e3ada55d8e8f"]
}, Open  ]],
Cell[426055, 7431, 91655, 1508, 81, "Input",ExpressionUUID->"fb1a0b49-a98d-4d34-b9f5-6779655374b2"],
Cell[CellGroupData[{
Cell[517735, 8943, 326, 8, 28, InheritFromParent,ExpressionUUID->"4250b12e-c05c-4d36-9a0b-d4f5acca6675"],
Cell[518064, 8953, 265, 6, 32, "Output",ExpressionUUID->"a56ea2bb-094c-47fd-9970-a7c8b0ef8626"]
}, Open  ]],
Cell[CellGroupData[{
Cell[518366, 8964, 279, 6, 28, "Input",ExpressionUUID->"de62ee23-4bf0-4541-ad5d-8782419857e0"],
Cell[518648, 8972, 383, 9, 32, "Output",ExpressionUUID->"160c8190-08d1-4081-a3ad-dcac2f0db2a7"]
}, Open  ]],
Cell[519046, 8984, 154, 3, 28, "Input",ExpressionUUID->"08677157-a0d2-443e-b039-b83a0a834109"],
Cell[CellGroupData[{
Cell[519225, 8991, 367, 7, 28, "Input",ExpressionUUID->"f13a1eeb-720a-446d-97b1-2c22fdbb2302"],
Cell[519595, 9000, 264, 4, 52, "Output",ExpressionUUID->"03a7492d-ef67-4974-a307-4954b9c9eb35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[519896, 9009, 436, 8, 28, "Input",ExpressionUUID->"04bcf019-b83c-4ca1-a0b8-da7a033eff7d"],
Cell[520335, 9019, 368, 6, 54, "Output",ExpressionUUID->"cfe1bd64-bc4b-4e98-8729-42ec06847a22"]
}, Open  ]]
}
]
*)

